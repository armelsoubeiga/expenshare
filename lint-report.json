[{"filePath":"G:\\Projets\\expenshare\\components\\auth\\pin-change.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used.","line":12,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isReady' is assigned a value but never used.","line":25,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2449,2452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2449,2452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2715,2718],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2715,2718],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Input } from \"@/components/ui/input\"\nimport { ArrowLeft, Loader2 } from \"lucide-react\"\nimport { useDatabase } from \"@/hooks/use-database\"\n\n// Définition du type User pour ce composant\ninterface User {\n  id?: number\n  name: string\n  pin: string\n  created_at: Date\n}\n\ninterface PinChangeProps {\n  isOpen: boolean\n  onClose: () => void\n}\n\nexport function PinChange({ isOpen, onClose }: PinChangeProps) {\n  const { db, isReady } = useDatabase()\n  const [currentPin, setCurrentPin] = useState(\"\")\n  const [newPin, setNewPin] = useState(\"\")\n  const [confirmPin, setConfirmPin] = useState(\"\")\n  const [error, setError] = useState(\"\")\n  const [success, setSuccess] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n  const [userId, setUserId] = useState<number | null>(null)\n\n  useEffect(() => {\n    if (isOpen) {\n      // Réinitialiser l'état\n      setCurrentPin(\"\")\n      setNewPin(\"\")\n      setConfirmPin(\"\")\n      setError(\"\")\n      setSuccess(\"\")\n      setIsLoading(false)\n      \n      // Récupérer l'ID utilisateur\n      const storedUser = localStorage.getItem(\"expenshare_user\")\n      if (storedUser) {\n        const userData = JSON.parse(storedUser)\n        setUserId(userData.id)\n      }\n    }\n  }, [isOpen])\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    setError(\"\")\n    setSuccess(\"\")\n    \n    // Validation des champs\n    if (!currentPin || !newPin || !confirmPin) {\n      setError(\"Tous les champs sont obligatoires\")\n      return\n    }\n    \n    if (newPin !== confirmPin) {\n      setError(\"Les nouveaux PIN ne correspondent pas\")\n      return\n    }\n    \n    if (newPin.length < 4) {\n      setError(\"Le PIN doit contenir au moins 4 caractères\")\n      return\n    }\n    \n    if (!db || !userId) {\n      setError(\"Erreur d'initialisation\")\n      return\n    }\n    \n    setIsLoading(true)\n    \n    try {\n      // Vérifier le PIN actuel\n      const user = await db.users.get(userId)\n      \n      if (!user) {\n        setError(\"Utilisateur non trouvé\")\n        setIsLoading(false)\n        return\n      }\n      \n      // Utilisation d'une assertion de type\n      const userWithPin = user as any\n      \n      if (userWithPin.pin !== currentPin) {\n        setError(\"PIN actuel incorrect\")\n        setIsLoading(false)\n        return\n      }\n      \n      // Mettre à jour le PIN avec une assertion de type\n      await db.users.update(userId, { pin: newPin } as any)\n      \n      // Mettre à jour le stockage local\n      const storedUser = JSON.parse(localStorage.getItem(\"expenshare_user\") || \"{}\")\n      storedUser.pin = newPin\n      localStorage.setItem(\"expenshare_user\", JSON.stringify(storedUser))\n      \n      setSuccess(\"PIN mis à jour avec succès\")\n      \n      // Fermer le dialogue après 1.5 secondes\n      setTimeout(() => {\n        onClose()\n      }, 1500)\n      \n    } catch (error) {\n      console.error(\"Erreur lors du changement de PIN:\", error)\n      setError(\"Une erreur est survenue lors de la mise à jour du PIN\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            Changer le PIN\n          </DialogTitle>\n          <DialogDescription>\n            Modifiez votre code PIN de connexion\n          </DialogDescription>\n        </DialogHeader>\n\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n        \n        {success && (\n          <Alert>\n            <AlertDescription>{success}</AlertDescription>\n          </Alert>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <label htmlFor=\"current-pin\" className=\"text-sm font-medium\">\n              PIN actuel\n            </label>\n            <Input\n              id=\"current-pin\"\n              type=\"password\"\n              value={currentPin}\n              onChange={(e) => setCurrentPin(e.target.value)}\n              placeholder=\"Entrez votre PIN actuel\"\n              disabled={isLoading}\n              className=\"text-center\"\n              maxLength={6}\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <label htmlFor=\"new-pin\" className=\"text-sm font-medium\">\n              Nouveau PIN\n            </label>\n            <Input\n              id=\"new-pin\"\n              type=\"password\"\n              value={newPin}\n              onChange={(e) => setNewPin(e.target.value)}\n              placeholder=\"Entrez votre nouveau PIN\"\n              disabled={isLoading}\n              className=\"text-center\"\n              maxLength={6}\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <label htmlFor=\"confirm-pin\" className=\"text-sm font-medium\">\n              Confirmer le nouveau PIN\n            </label>\n            <Input\n              id=\"confirm-pin\"\n              type=\"password\"\n              value={confirmPin}\n              onChange={(e) => setConfirmPin(e.target.value)}\n              placeholder=\"Confirmez votre nouveau PIN\"\n              disabled={isLoading}\n              className=\"text-center\"\n              maxLength={6}\n            />\n          </div>\n\n          <DialogFooter className=\"flex flex-col sm:flex-row gap-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose} disabled={isLoading} className=\"sm:w-1/2\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Annuler\n            </Button>\n            <Button type=\"submit\" disabled={isLoading} className=\"sm:w-1/2\">\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Mise à jour...\n                </>\n              ) : (\n                \"Mettre à jour\"\n              )}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"G:\\Projets\\expenshare\\components\\charts\\monthly-trend-chart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":3,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'year' is assigned a value but never used.","line":24,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":16},{"ruleId":"prefer-const","severity":2,"message":"'maxExpense' is never reassigned. Use 'const' instead.","line":31,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":31,"endColumn":19,"fix":{"range":[1111,1184],"text":"const maxExpense = Math.max(...expensesByMonth.map(item => item.amount), 0)"}},{"ruleId":"prefer-const","severity":2,"message":"'maxBudget' is never reassigned. Use 'const' instead.","line":32,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":32,"endColumn":18,"fix":{"range":[1189,1260],"text":"const maxBudget = Math.max(...budgetsByMonth.map(item => item.amount), 0)"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":106,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":40}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":2,"fixableWarningCount":0,"source":"\"use client\"\n\nimport React, { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { formatCurrency } from '@/lib/utils'\n\ntype MonthlyDataPoint = {\n  month: string\n  amount: number\n}\n\ninterface MonthlyTrendChartProps {\n  expensesByMonth: MonthlyDataPoint[]\n  budgetsByMonth: MonthlyDataPoint[]\n}\n\nexport function MonthlyTrendChart({ expensesByMonth, budgetsByMonth }: MonthlyTrendChartProps) {\n  const [activeData, setActiveData] = useState<'both' | 'expenses' | 'budgets'>('both')\n  \n  // Conversion des mois numériques en noms de mois abrégés français\n  const getMonthName = (monthKey: string): string => {\n    const [year, month] = monthKey.split('-')\n    const monthNames = [\"Jan\", \"Fév\", \"Mar\", \"Avr\", \"Mai\", \"Juin\", \"Juil\", \"Août\", \"Sep\", \"Oct\", \"Nov\", \"Déc\"]\n    return monthNames[parseInt(month) - 1]\n  }\n\n  // Trouver la valeur maximale pour dimensionner le graphique\n  const getMaxValue = (): number => {\n    let maxExpense = Math.max(...expensesByMonth.map(item => item.amount), 0)\n    let maxBudget = Math.max(...budgetsByMonth.map(item => item.amount), 0)\n    return Math.max(maxExpense, maxBudget) * 1.2 // Ajouter 20% pour la marge\n  }\n\n  const sortedExpenses = [...expensesByMonth].sort((a, b) => a.month.localeCompare(b.month))\n  const sortedBudgets = [...budgetsByMonth].sort((a, b) => a.month.localeCompare(b.month))\n  const months = Array.from(new Set([...sortedExpenses.map(e => e.month), ...sortedBudgets.map(b => b.month)]))\n    .sort((a, b) => a.localeCompare(b))\n    .slice(-6) // Afficher seulement les 6 derniers mois\n\n  const maxValue = getMaxValue()\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <CardTitle>Évolution Mensuelle</CardTitle>\n            <CardDescription>Dépenses et budgets au cours du temps</CardDescription>\n          </div>\n          <div className=\"flex gap-1\">\n            <Button\n              size=\"sm\"\n              variant={activeData === 'both' ? \"default\" : \"outline\"}\n              className=\"h-7 text-xs px-2\"\n              onClick={() => setActiveData('both')}\n            >\n              Les deux\n            </Button>\n            <Button\n              size=\"sm\"\n              variant={activeData === 'expenses' ? \"default\" : \"outline\"}\n              className=\"h-7 text-xs px-2\"\n              onClick={() => setActiveData('expenses')}\n            >\n              Dépenses\n            </Button>\n            <Button\n              size=\"sm\" \n              variant={activeData === 'budgets' ? \"default\" : \"outline\"}\n              className=\"h-7 text-xs px-2\"\n              onClick={() => setActiveData('budgets')}\n            >\n              Budgets\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"relative w-full h-60\">\n          {/* Axe Y et ligne horizontale */}\n          <div className=\"absolute left-0 top-0 bottom-0 w-12 flex flex-col justify-between text-xs text-muted-foreground\">\n            <div className=\"text-right pr-2\">{formatCurrency(maxValue).split('€')[0]}€</div>\n            <div className=\"text-right pr-2\">{formatCurrency(maxValue / 2).split('€')[0]}€</div>\n            <div className=\"text-right pr-2\">0€</div>\n          </div>\n          \n          {/* Grille */}\n          <div className=\"absolute left-12 right-0 top-0 bottom-0 border-l\">\n            <div className=\"absolute top-0 left-0 right-0 border-b border-dashed border-muted\" style={{ height: '1px' }} />\n            <div className=\"absolute top-1/2 left-0 right-0 border-b border-dashed border-muted\" style={{ height: '1px' }} />\n            <div className=\"absolute bottom-0 left-0 right-0 border-b\" style={{ height: '1px' }} />\n            \n            {/* Mois (axe X) */}\n            <div className=\"absolute bottom-[-20px] left-0 right-0 flex justify-between\">\n              {months.map((month) => (\n                <div key={month} className=\"text-xs text-muted-foreground text-center\" style={{ width: `${100 / months.length}%` }}>\n                  {getMonthName(month)}\n                </div>\n              ))}\n            </div>\n            \n            {/* Graphiques */}\n            <div className=\"absolute top-0 bottom-0 left-0 right-0 flex items-end\">\n              {months.map((month, index) => {\n                const expense = sortedExpenses.find(e => e.month === month)?.amount || 0\n                const budget = sortedBudgets.find(b => b.month === month)?.amount || 0\n                const expenseHeight = (expense / maxValue) * 100\n                const budgetHeight = (budget / maxValue) * 100\n                \n                return (\n                  <div\n                    key={month}\n                    className=\"flex items-end justify-center h-full\"\n                    style={{ width: `${100 / months.length}%` }}\n                  >\n                    {(activeData === 'both' || activeData === 'expenses') && (\n                      <div \n                        className=\"w-3 bg-red-500 rounded-t mx-0.5 relative group\"\n                        style={{ height: `${expenseHeight}%` }}\n                      >\n                        <div className=\"opacity-0 group-hover:opacity-100 absolute bottom-full mb-1 left-1/2 transform -translate-x-1/2 bg-card border shadow-sm rounded px-2 py-1 text-xs whitespace-nowrap z-10\">\n                          <span className=\"font-medium\">{formatCurrency(expense)}</span>\n                        </div>\n                      </div>\n                    )}\n                    {(activeData === 'both' || activeData === 'budgets') && (\n                      <div \n                        className=\"w-3 bg-blue-500 rounded-t mx-0.5 relative group\"\n                        style={{ height: `${budgetHeight}%` }}\n                      >\n                        <div className=\"opacity-0 group-hover:opacity-100 absolute bottom-full mb-1 left-1/2 transform -translate-x-1/2 bg-card border shadow-sm rounded px-2 py-1 text-xs whitespace-nowrap z-10\">\n                          <span className=\"font-medium\">{formatCurrency(budget)}</span>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        </div>\n      </CardContent>\n      <CardFooter className=\"pt-0 pb-2 flex justify-between\">\n        <div className=\"flex items-center text-xs text-muted-foreground gap-2\">\n          <div className=\"flex items-center gap-1\">\n            <div className=\"w-3 h-3 rounded bg-red-500\"></div>\n            <span>Dépenses</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <div className=\"w-3 h-3 rounded bg-blue-500\"></div>\n            <span>Budgets</span>\n          </div>\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"G:\\Projets\\expenshare\\components\\export\\export-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExportType' is defined but never used.","line":16,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[866,869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[866,869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1507,1510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1507,1510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3433,3436],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3433,3436],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4001,4004],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4001,4004],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4311,4314],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4311,4314],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":137,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5000,5003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5000,5003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sym' is assigned a value but never used.","line":143,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":143,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6378,6381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6378,6381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6407,6410],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6407,6410],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":322,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":322,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12483,12486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12483,12486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":354,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":354,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13550,13553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13550,13553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":363,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":363,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14010,14013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14010,14013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":366,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":366,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14138,14141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14138,14141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":366,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":366,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14146,14149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14146,14149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":370,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":370,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14315,14318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14315,14318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":377,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":377,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14724,14727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14724,14727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":378,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":378,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14776,14779],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14776,14779],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":380,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":380,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14893,14896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14893,14896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":380,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":380,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14912,14915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14912,14915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":380,"column":102,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":380,"endColumn":105,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14950,14953],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14950,14953],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":401,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[15595,15670],"text":"\n            Choisissez le projet et le type d&apos;export à générer.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[15595,15670],"text":"\n            Choisissez le projet et le type d&lsquo;export à générer.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[15595,15670],"text":"\n            Choisissez le projet et le type d&#39;export à générer.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[15595,15670],"text":"\n            Choisissez le projet et le type d&rsquo;export à générer.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":424,"column":27,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[16458,16472],"text":"Types d&apos;export"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[16458,16472],"text":"Types d&lsquo;export"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[16458,16472],"text":"Types d&#39;export"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[16458,16472],"text":"Types d&rsquo;export"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useEffect, useMemo, useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { useDatabase } from \"@/hooks/use-database\"\nimport { formatDate } from \"@/lib/utils\"\n\n// PDF\nimport jsPDF from \"jspdf\"\nimport autoTable from \"jspdf-autotable\"\n\ntype ExportType = 'csv' | 'pdf'\n\ninterface ExportDialogProps {\n  isOpen: boolean\n  onClose: () => void\n}\n\nexport function ExportDialog({ isOpen, onClose }: ExportDialogProps) {\n  const { db, isReady } = useDatabase()\n  const [projects, setProjects] = useState<any[]>([])\n  const [selectedProjectId, setSelectedProjectId] = useState<string>(\"all\")\n  const [exportCsv, setExportCsv] = useState(true)\n  const [exportPdf, setExportPdf] = useState(true)\n  const [busy, setBusy] = useState(false)\n  const [displayCurrency, setDisplayCurrency] = useState<'EUR'|'CFA'|'USD'>('EUR') // devise utilisateur (fallback)\n  const [projectCurrency, setProjectCurrency] = useState<'EUR'|'CFA'|'USD'>('EUR') // devise du projet sélectionné\n\n  useEffect(() => {\n    if (!isOpen || !isReady || !db) return\n    ;(async () => {\n      try {\n        const storedUser = localStorage.getItem('expenshare_user')\n        let ps: any[] = []\n        let dc: 'EUR'|'CFA'|'USD' = 'EUR'\n        if (storedUser) {\n          const user = JSON.parse(storedUser)\n          try {\n            const cur = await db.settings.get(`user:${user.id}:currency`)\n            if (cur?.value) dc = cur.value\n          } catch {}\n          // Récup projets autorisés\n          try {\n            ps = await db.getUserProjects(String(user.id))\n          } catch {\n            // Fallback: tous\n            if (db.projects?.toArray) ps = await db.projects.toArray()\n          }\n        }\n        setDisplayCurrency(dc)\n        setProjects(ps || [])\n        // Sélectionner un projet par défaut si disponible et aligner la devise projet\n        if ((ps || []).length > 0) {\n          const first = ps[0]\n          setSelectedProjectId(String(first.id))\n          if (first?.currency === 'EUR' || first?.currency === 'CFA' || first?.currency === 'USD') {\n            setProjectCurrency(first.currency)\n          }\n        }\n      } catch {}\n    })()\n  }, [isOpen, isReady, db])\n\n  // Met à jour la devise projet et l'état du PDF selon la sélection\n  useEffect(() => {\n    const all = selectedProjectId === 'all'\n    if (all) {\n      setExportPdf(false)\n    }\n    if (!all) {\n      const p = projects.find((x) => String(x.id) === String(selectedProjectId))\n      const c = p?.currency\n      if (c === 'EUR' || c === 'CFA' || c === 'USD') {\n        setProjectCurrency(c)\n      }\n    }\n  }, [selectedProjectId, projects])\n\n  const isAll = selectedProjectId === 'all'\n  const effectiveCurrency: 'EUR'|'CFA'|'USD' = isAll ? displayCurrency : projectCurrency\n\n  const currencySymbol = useMemo(() => {\n    switch (effectiveCurrency) {\n      case 'CFA': return 'F CFA'\n      case 'USD': return '$'\n      default: return '€'\n    }\n  }, [effectiveCurrency])\n\n  // Supprime les caractères potentiellement non supportés par les polices PDF (ex: emoji) et normalise\n  const sanitizeText = (val: any): string => {\n    const s = (val == null ? '' : String(val)).normalize('NFC')\n    // Garder uniquement les caractères Latin-1 (accents FR inclus) et ponctuation basique\n    return s.replace(/[^\\x00-\\xFF]/g, '')\n  }\n\n  const download = (blob: Blob, filename: string) => {\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = filename\n    document.body.appendChild(a)\n    a.click()\n    setTimeout(() => {\n      a.remove()\n      URL.revokeObjectURL(url)\n    }, 100)\n  }\n\n  const txCurrencyForRow = (t: any): 'EUR'|'CFA'|'USD' => {\n    if (!isAll) return effectiveCurrency\n    // Si export \"tous projets\", on utilise la devise du projet de la transaction si disponible\n    const c = t.project_currency\n    if (c === 'CFA' || c === 'USD' || c === 'EUR') return c\n    return 'EUR'\n  }\n\n  const txNativeAmount = (t: any): number => {\n    const c = txCurrencyForRow(t)\n    if (c === 'CFA') return (t.amount_cfa ?? t.amount_eur ?? t.amount) || 0\n    if (c === 'USD') return (t.amount_usd ?? t.amount_eur ?? t.amount) || 0\n    return (t.amount_eur ?? t.amount) || 0\n  }\n\n  const formatAmountPdf = (n: number, cur?: 'EUR'|'CFA'|'USD'): string => {\n    const c = cur || effectiveCurrency\n    const decimals = c === 'CFA' ? 0 : 2\n    const s = n.toLocaleString('fr-FR', { minimumFractionDigits: decimals, maximumFractionDigits: decimals })\n    // Remplacer les espaces insécables et espacements fins par des espaces normaux\n    return s.replace(/[\\u202F\\u00A0]/g, ' ')\n  }\n\n  const exportAsCsv = (transactions: any[]) => {\n    const headers = isAll\n      ? ['Type','Titre','Catégorie','Sous-catégorie','Montant','Devise','Projet','Utilisateur','Date']\n      : ['Type','Titre','Catégorie','Sous-catégorie',`Montant (${currencySymbol})`,'Projet','Utilisateur','Date']\n    const rows = transactions.map((t) => {\n      const c = txCurrencyForRow(t)\n      const sym = c === 'CFA' ? 'F CFA' : c === 'USD' ? '$' : '€'\n      const amount = formatAmountPdf(txNativeAmount(t), c)\n      const common = [\n        t.type === 'expense' ? 'Dépense' : 'Budget',\n        t.title || '',\n        t.parent_category_name || t.category_name || '',\n        t.parent_category_name ? (t.category_name || '') : '',\n      ]\n      if (isAll) {\n        return [\n          ...common,\n          amount,\n          c,\n          t.project_name || '',\n          t.user_name || '',\n          t.created_at ? formatDate(t.created_at) : ''\n        ]\n      }\n      return [\n        ...common,\n        amount,\n        t.project_name || '',\n        t.user_name || '',\n        t.created_at ? formatDate(t.created_at) : ''\n      ]\n    })\n    const csv = [headers, ...rows]\n      .map(r => r.map(v => `\"${String(v).replace(/\"/g,'\"\"')}\"`).join(','))\n      .join(\"\\r\\n\")\n    download(new Blob([csv], { type: 'text/csv' }), `expenshare-transactions-${new Date().toISOString().slice(0,10)}.csv`)\n  }\n\n  const exportAsPdf = (transactions: any[], options?: { project?: any, members?: string[] }) => {\n    const doc = new jsPDF({ unit: 'pt', format: 'a4' })\n    const margin = 40\n    const line = (y: number) => doc.line(margin, y, doc.internal.pageSize.getWidth()-margin, y)\n\n    // Police et couleurs de base\n    doc.setFont('helvetica', 'bold')\n    doc.setTextColor(20, 20, 20)\n\n    // Header\n    doc.setFontSize(20)\n    if (options?.project) {\n      const p = options.project\n      const title = `Rapport du projet: ${sanitizeText(p.name || '')}`\n      doc.text(title.trim(), margin, 40)\n      doc.setFont('helvetica', 'normal')\n      doc.setFontSize(11)\n      const members = sanitizeText((options.members || []).join(', '))\n      if (members) doc.text(`Membres: ${members}`, margin, 58)\n      doc.text(`Devise: ${projectCurrency}`, margin, 74)\n    } else {\n      doc.text('Rapport des transactions', margin, 40)\n      doc.setFont('helvetica', 'normal')\n      doc.setFontSize(11)\n      doc.text(`Devise: ${isAll ? 'Multiple' : effectiveCurrency}`, margin, 58)\n    }\n    doc.text(`Date: ${new Date().toLocaleString('fr-FR')}`, margin, 90)\n    line(102)\n\n    // Cartes (totaux)\n    const totals = transactions.reduce((acc, t) => {\n      if (t.type === 'expense') acc.exp += txNativeAmount(t)\n      else acc.bud += txNativeAmount(t)\n      return acc\n    }, { exp: 0, bud: 0 })\n    const balance = totals.bud - totals.exp\n\n    // Cartes alignées (style site)\n  const pageW = doc.internal.pageSize.getWidth()\n    const gap = 12\n    const cardsY = 115\n    const cardH = 68\n    const cardW = (pageW - margin * 2 - gap * 2) / 3\n    const roundedRect = (x: number, y: number, w: number, h: number, r = 8, color: [number,number,number]) => {\n      doc.setFillColor(color[0], color[1], color[2])\n      doc.roundedRect(x, y, w, h, r, r, 'F')\n    }\n    // Fond clair des cartes\n    const redBg: [number,number,number] = [255, 235, 238]\n    const blueBg: [number,number,number] = [232, 240, 254]\n    const greenBg: [number,number,number] = [232, 245, 233]\n    const dangerBg: [number,number,number] = [255, 235, 238]\n\n    // Dessiner cartes\n    roundedRect(margin, cardsY, cardW, cardH, 8, redBg)\n    roundedRect(margin + cardW + gap, cardsY, cardW, cardH, 8, blueBg)\n    const balBg = balance >= 0 ? greenBg : dangerBg\n    roundedRect(margin + (cardW + gap) * 2, cardsY, cardW, cardH, 8, balBg)\n\n    // Contenus cartes\n    const cardPad = 12\n    // Dépenses\n    doc.setFont('helvetica', 'bold')\n    doc.setTextColor(100, 100, 100)\n    doc.setFontSize(10)\n    doc.text('Total Dépenses', margin + cardPad, cardsY + cardPad + 2)\n    doc.setFontSize(16)\n    doc.setTextColor(239, 68, 68) // rouge\n  doc.text(`${formatAmountPdf(totals.exp, projectCurrency)} ${currencySymbol}`, margin + cardPad, cardsY + cardPad + 26)\n    // Budgets\n    doc.setTextColor(100, 100, 100)\n    doc.setFontSize(10)\n    doc.text('Total Budgets', margin + cardW + gap + cardPad, cardsY + cardPad + 2)\n    doc.setFontSize(16)\n    doc.setTextColor(59, 130, 246) // bleu\n  doc.text(`${formatAmountPdf(totals.bud, projectCurrency)} ${currencySymbol}`, margin + cardW + gap + cardPad, cardsY + cardPad + 26)\n    // Solde\n    doc.setTextColor(100, 100, 100)\n    doc.setFontSize(10)\n    doc.text('Solde', margin + (cardW + gap) * 2 + cardPad, cardsY + cardPad + 2)\n    doc.setFontSize(16)\n    doc.setTextColor(balance >= 0 ? 16 : 239, balance >= 0 ? 185 : 68, balance >= 0 ? 129 : 68) // vert/rouge\n  doc.text(`${formatAmountPdf(balance, projectCurrency)} ${currencySymbol}`, margin + (cardW + gap) * 2 + cardPad, cardsY + cardPad + 26)\n\n    // Répartition par catégorie — barres horizontales fines pour toutes les catégories\n    const byCat = new Map<string, number>()\n    for (const t of transactions) {\n      if (t.type !== 'expense') continue\n      const k = t.parent_category_name || t.category_name || 'Sans catégorie'\n      byCat.set(k, (byCat.get(k) || 0) + txNativeAmount(t))\n    }\n    let y = cardsY + cardH + 24\n    doc.setFontSize(12)\n    doc.setTextColor(20,20,20)\n    doc.text('Dépenses par catégorie', margin, y)\n    y += 12\n    const sorted = Array.from(byCat.entries()).sort((a,b)=>b[1]-a[1])\n    const totalVal = sorted.reduce((s, [,v]) => s+v, 0) || 1\n\n    // Layout\n  const pageW2 = doc.internal.pageSize.getWidth()\n  const pageH2 = doc.internal.pageSize.getHeight()\n    const labelW = 170\n    const valueW = 110\n    const barH = 6\n    const gapY = 10\n  const barX = margin + labelW\n  const barW = pageW2 - margin - barX - valueW\n    const trackColor: [number,number,number] = [235, 238, 245]\n    const fillColor: [number,number,number] = [59, 130, 246]\n    const textMuted: [number,number,number] = [90, 90, 90]\n\n    const formatPercent = (p: number): string => `${(p*100).toLocaleString('fr-FR', { minimumFractionDigits: 1, maximumFractionDigits: 1 }).replace(/[\\u202F\\u00A0]/g,' ')} %`\n\n    doc.setFontSize(10)\n    sorted.forEach(([label, value]) => {\n      // Saut de page si nécessaire (laisser un peu d'espace avant le tableau suivant)\n  if (y + barH + gapY > pageH2 - margin - 120) {\n        doc.addPage()\n        y = margin\n        doc.setFont('helvetica','bold')\n        doc.setTextColor(20,20,20)\n        doc.setFontSize(12)\n        doc.text('Dépenses par catégorie', margin, y)\n        y += 12\n        doc.setFont('helvetica','normal')\n        doc.setFontSize(10)\n      }\n\n      const pct = value / totalVal\n      const w = Math.max(1, Math.round(barW * pct))\n      const labelText = sanitizeText(label)\n      const valueText = `${formatAmountPdf(value, projectCurrency)} ${currencySymbol}  •  ${formatPercent(pct)}`\n\n      // Libellé à gauche\n      doc.setTextColor(textMuted[0], textMuted[1], textMuted[2])\n      doc.text(labelText, margin, y + barH)\n\n      // Rail (track)\n      doc.setFillColor(trackColor[0], trackColor[1], trackColor[2])\n      doc.rect(barX, y, barW, barH, 'F')\n      // Remplissage\n      doc.setFillColor(fillColor[0], fillColor[1], fillColor[2])\n      doc.rect(barX, y, w, barH, 'F')\n\n      // Valeur alignée à droite\n      doc.setTextColor(20,20,20)\n      doc.text(valueText, barX + barW + valueW - 2, y + barH, { align: 'right' as any })\n\n      y += barH + gapY\n    })\n\n    // Table réduite\n  const tableStartY = y + 20\n    autoTable(doc, {\n      startY: tableStartY,\n      head: [[\"Type\",\"Titre\",\"Montant\",\"Utilisateur\",\"Date\"]],\n      body: transactions.slice(0, 200).map((t) => [\n  t.type === 'expense' ? 'Dépense' : 'Budget',\n  sanitizeText(t.title || ''),\n  `${formatAmountPdf(txNativeAmount(t), txCurrencyForRow(t))} ${isAll ? (txCurrencyForRow(t) === 'CFA' ? 'F CFA' : txCurrencyForRow(t) === 'USD' ? '$' : '€') : currencySymbol}`,\n  sanitizeText(t.user_name || ''),\n        t.created_at ? formatDate(t.created_at) : ''\n      ]),\n      styles: { fontSize: 9 },\n      headStyles: { fillColor: [33, 33, 33] },\n      theme: 'striped',\n      margin: { left: margin, right: margin },\n    })\n\n    const blob = doc.output('blob')\n    download(blob as Blob, `expenshare-rapport-${new Date().toISOString().slice(0,10)}.pdf`)\n  }\n\n  const handleExport = async () => {\n    if (!db) return\n    setBusy(true)\n    try {\n      // Transactions autorisées, complètes avec métadonnées\n      let transactions: any[] = []\n      if (selectedProjectId === 'all') {\n        // On n'a pas d'endpoint \"all\" direct; on concatène les transactions récentes avec un grand plafond\n        transactions = await db.getRecentTransactions(10000)\n      } else {\n        transactions = await db.getProjectTransactions(Number(selectedProjectId))\n      }\n      // Filtrer par projet si besoin\n      if (selectedProjectId !== 'all') {\n        transactions = (transactions || []).filter((t: any) => Number(t.project_id) === Number(selectedProjectId))\n      }\n      // Ordonner par date desc\n      transactions.sort((a: any, b: any) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\n\n      if (exportCsv) exportAsCsv(transactions)\n      if (exportPdf) {\n        let project: any | undefined\n        let members: string[] | undefined\n        if (selectedProjectId !== 'all') {\n          try {\n            project = await db.getProjectById(Number(selectedProjectId))\n            // membres\n            const mem = await db.project_users.where('project_id').equals(Number(selectedProjectId)).toArray()\n            const userIds: string[] = Array.from(new Set<string>((mem || []).map((m: any) => String(m.user_id))))\n            let users: any[] = []\n            try { users = await db.users.toArray() } catch {}\n            const userMap = new Map<string, any>(users.map((u: any) => [String(u.id), u] as [string, any]))\n            members = userIds.map((uid: string) => (userMap.get(uid)?.name as string | undefined)).filter((n): n is string => typeof n === 'string' && n.length > 0)\n          } catch {}\n        }\n        exportAsPdf(transactions, { project, members })\n      }\n      onClose()\n    } catch (e) {\n      console.error('Export failed', e)\n      alert(\"Erreur lors de l'export\")\n    } finally {\n      setBusy(false)\n    }\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-lg\">\n        <DialogHeader>\n          <DialogTitle>Exporter les données</DialogTitle>\n          <DialogDescription>\n            Choisissez le projet et le type d'export à générer.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label>Projet</Label>\n            <Select value={selectedProjectId} onValueChange={setSelectedProjectId}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Sélectionner un projet\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Tous mes projets</SelectItem>\n                {projects.map((p) => (\n                  <SelectItem key={p.id} value={String(p.id)}>\n                    {p.icon} {p.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Types d'export</Label>\n            <div className=\"flex items-center gap-4\">\n              <label className=\"flex items-center gap-2 text-sm\">\n                <Checkbox checked={exportCsv} onCheckedChange={(v) => setExportCsv(!!v)} />\n                CSV\n              </label>\n              <label className=\"flex items-center gap-2 text-sm\">\n                <Checkbox checked={exportPdf} disabled={selectedProjectId === 'all'} onCheckedChange={(v) => setExportPdf(!!v)} />\n                PDF{selectedProjectId === 'all' ? ' — non disponible pour tous les projets' : ''}\n              </label>\n            </div>\n          </div>\n\n          <p className=\"text-xs text-muted-foreground\">\n            {selectedProjectId === 'all'\n              ? \"CSV: les montants sont dans la devise propre à chaque projet (colonne Devise incluse).\"\n              : `Montants exportés dans la devise du projet (${currencySymbol}).`}\n          </p>\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onClose} disabled={busy}>Annuler</Button>\n          <Button onClick={handleExport} disabled={busy}>\n            {busy ? 'Génération…' : 'Exporter'}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"G:\\Projets\\expenshare\\components\\forms\\project-form.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'projectId' is assigned a value but never used.","line":82,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport React, { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Label } from \"@/components/ui/label\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\nimport { FolderPlus, Loader2 } from \"lucide-react\"\nimport { useDatabase } from \"@/hooks/use-database\"\n\ninterface ProjectFormProps {\n  isOpen: boolean\n  onClose: () => void\n  onSuccess: () => void\n}\n\nconst PROJECT_COLORS = [\n  { name: \"Bleu\", value: \"#3b82f6\", bg: \"bg-blue-500\" },\n  { name: \"Vert\", value: \"#10b981\", bg: \"bg-green-500\" },\n  { name: \"Violet\", value: \"#8b5cf6\", bg: \"bg-violet-500\" },\n  { name: \"Rose\", value: \"#ec4899\", bg: \"bg-pink-500\" },\n  { name: \"Orange\", value: \"#f59e0b\", bg: \"bg-amber-500\" },\n  { name: \"Rouge\", value: \"#ef4444\", bg: \"bg-red-500\" },\n  { name: \"Indigo\", value: \"#6366f1\", bg: \"bg-indigo-500\" },\n  { name: \"Teal\", value: \"#14b8a6\", bg: \"bg-teal-500\" },\n]\n\nconst PROJECT_ICONS = [\"📁\", \"🏠\", \"🚗\", \"🛒\", \"🎯\", \"💼\", \"🎨\", \"🏖️\", \"🎓\", \"💡\"]\n\nexport function ProjectForm({ isOpen, onClose, onSuccess }: ProjectFormProps) {\n  const { db } = useDatabase()\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    icon: \"📁\",\n    color: \"#3b82f6\",\n    currency: \"EUR\",\n  })\n  const [error, setError] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n\n  useEffect(() => {\n    if (isOpen) {\n      resetForm()\n    }\n  }, [isOpen])\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      description: \"\",\n      icon: \"📁\",\n      color: \"#3b82f6\",\n      currency: \"EUR\",\n    })\n    setError(\"\")\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (!formData.name.trim()) {\n      setError(\"Le nom du projet est obligatoire\")\n      return\n    }\n\n    setIsLoading(true)\n    setError(\"\")\n\n    try {\n      if (!db) throw new Error(\"Base de données non disponible\")\n\n      // Get current user\n      const storedUser = localStorage.getItem(\"expenshare_user\") || localStorage.getItem(\"expenshare_current_user\")\n      if (!storedUser) throw new Error(\"Utilisateur non connecté\")\n      \n      const currentUserData = JSON.parse(storedUser)\n      \n      // Create project\n      const projectId = await db.createProject(\n        formData.name,\n        formData.description || \"\",\n        formData.icon,\n        formData.color,\n        formData.currency,\n        currentUserData.id || 0\n      )\n\n      onSuccess()\n      onClose()\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"Erreur lors de la création du projet\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <FolderPlus className=\"h-5 w-5\" />\n            Nouveau Projet\n          </DialogTitle>\n          <DialogDescription>Créez un nouveau projet</DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Nom du projet *</Label>\n              <Input\n                id=\"name\"\n                placeholder=\"Ex: Rénovation maison, Vacances 2024...\"\n                value={formData.name}\n                onChange={(e) => setFormData((prev) => ({ ...prev, name: e.target.value }))}\n                required\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                placeholder=\"Décrivez brièvement votre projet...\"\n                value={formData.description}\n                onChange={(e) => setFormData((prev) => ({ ...prev, description: e.target.value }))}\n                rows={2}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Icône du projet</Label>\n              <div className=\"flex flex-wrap gap-2\">\n                {PROJECT_ICONS.map((icon) => (\n                  <Button\n                    key={icon}\n                    type=\"button\"\n                    variant={formData.icon === icon ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setFormData((prev) => ({ ...prev, icon }))}\n                    className=\"text-lg p-2 h-auto\"\n                  >\n                    {icon}\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Couleur du projet</Label>\n              <div className=\"flex flex-wrap gap-2\">\n                {PROJECT_COLORS.map((color) => (\n                  <Button\n                    key={color.value}\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setFormData((prev) => ({ ...prev, color: color.value }))}\n                    className={`p-2 h-auto ${formData.color === color.value ? \"ring-2 ring-primary\" : \"\"}`}\n                  >\n                    <div className={`w-4 h-4 rounded-full ${color.bg}`} />\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end gap-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose} disabled={isLoading}>\n              Annuler\n            </Button>\n            <Button type=\"submit\" disabled={isLoading}>\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Création...\n                </>\n              ) : (\n                \"Créer le projet\"\n              )}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"G:\\Projets\\expenshare\\components\\forms\\project-settings-form.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FolderPlus' is defined but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":14,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2149,2152],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2149,2152],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2211,2214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2211,2214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2328,2331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2328,2331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProjectData'. Either include it or remove the dependency array.","line":84,"column":6,"nodeType":"ArrayExpression","endLine":84,"endColumn":40,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, projectId, db, activeTab, loadProjectData]","fix":{"range":[3398,3432],"text":"[isOpen, projectId, db, activeTab, loadProjectData]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4731,4734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4731,4734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":139,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":139,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":274,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":274,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9309,9312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9309,9312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":283,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":283,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9531,9534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9531,9534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":313,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":313,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10528,10531],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10528,10531],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport React, { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { FolderPlus, Plus, X, Users, Loader2, Save, Settings, User } from \"lucide-react\"\nimport { useDatabase } from \"@/hooks/use-database\"\nimport { Category } from \"@/lib/types\"\n\ninterface ProjectSettingsFormProps {\n  isOpen: boolean\n  onClose: () => void\n  onSuccess: () => void\n  projectId: number\n  activeTab?: string\n}\n\n// Restreindre aux 3 devises demandées\nconst CURRENCIES = [\n  { code: \"EUR\", symbol: \"€\", name: \"Euro\" },\n  { code: \"USD\", symbol: \"$\", name: \"Dollar US\" },\n  // Utiliser le code \"CFA\" pour l'UX, on convertira en \"XOF\" pour l'affichage si nécessaire\n  { code: \"CFA\", symbol: \"CFA\", name: \"Franc CFA\" },\n]\n\nconst PROJECT_COLORS = [\n  { name: \"Bleu\", value: \"#3b82f6\", bg: \"bg-blue-500\" },\n  { name: \"Vert\", value: \"#10b981\", bg: \"bg-green-500\" },\n  { name: \"Violet\", value: \"#8b5cf6\", bg: \"bg-violet-500\" },\n  { name: \"Rose\", value: \"#ec4899\", bg: \"bg-pink-500\" },\n  { name: \"Orange\", value: \"#f59e0b\", bg: \"bg-amber-500\" },\n  { name: \"Rouge\", value: \"#ef4444\", bg: \"bg-red-500\" },\n  { name: \"Indigo\", value: \"#6366f1\", bg: \"bg-indigo-500\" },\n  { name: \"Teal\", value: \"#14b8a6\", bg: \"bg-teal-500\" },\n]\n\nconst PROJECT_ICONS = [\"📁\", \"🏠\", \"🚗\", \"🛒\", \"🎯\", \"💼\", \"🎨\", \"🏖️\", \"🎓\", \"💡\"]\n\nexport function ProjectSettingsForm({ isOpen, onClose, onSuccess, projectId, activeTab = \"details\" }: ProjectSettingsFormProps) {\n  const { toast } = useToast()\n  const { db } = useDatabase()\n  const [project, setProject] = useState<any>(null)\n  const [projectUsers, setProjectUsers] = useState<any[]>([])\n  const [categories, setCategories] = useState<Category[]>([])\n  const [allUsers, setAllUsers] = useState<any[]>([])\n  const [currentTab, setCurrentTab] = useState(activeTab)\n  \n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    icon: \"📁\",\n    color: \"#3b82f6\",\n    currency: \"EUR\",\n  })\n  // Taux de conversion spécifiques au projet (1 € = …)\n  const [eurToCfa, setEurToCfa] = useState<string>(\"\")\n  const [eurToUsd, setEurToUsd] = useState<string>(\"\")\n\n  const [newCategory, setNewCategory] = useState(\"\")\n  const [newSubcategory, setNewSubcategory] = useState(\"\")\n  const [selectedCategoryForSub, setSelectedCategoryForSub] = useState<number | null>(null)\n  \n  const [newUserId, setNewUserId] = useState<string | null>(null)\n  const [isAddingUser, setIsAddingUser] = useState(false)\n  const [isRemovingUser, setIsRemovingUser] = useState<string | null>(null)\n  \n  const [error, setError] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n\n  useEffect(() => {\n    if (isOpen && projectId && db) {\n      loadProjectData()\n      // Mettre à jour l'onglet actif si les props changent\n      setCurrentTab(activeTab)\n    }\n  }, [isOpen, projectId, db, activeTab])\n\n  const loadProjectData = async () => {\n    if (!db) return\n    setIsLoading(true)\n    \n    try {\n      // Charger les infos du projet\n      const projectData = await db.getProjectById(projectId)\n      if (projectData) {\n        setProject(projectData)\n        // Charger le code de devise et normaliser 'XOF' vers 'CFA'\n        const dbCurrency = (projectData.currency as string) || 'EUR'\n        const uiCurrency = dbCurrency === 'XOF' ? 'CFA' : dbCurrency\n        setFormData({\n          name: projectData.name,\n          description: projectData.description || \"\",\n          icon: projectData.icon,\n          color: projectData.color,\n          currency: uiCurrency,\n        })\n      }\n      \n      // Charger les catégories\n      const projectCategories = await db.categories\n        .where(\"project_id\")\n        .equals(projectId)\n        .toArray()\n        \n      setCategories(projectCategories)\n      \n      // Charger tous les utilisateurs\n      const users = await db.users.toArray()\n      setAllUsers(users)\n      \n      // Charger les utilisateurs du projet\n      const projectUserRecords = await db.project_users\n        .where(\"project_id\")\n        .equals(projectId)\n        .toArray()\n        \n      const projUsers = await Promise.all(\n        projectUserRecords.map(async (pu: any) => {\n          const user = await db.users.get(pu.user_id)\n          return user ? { ...user, role: pu.role } : null\n        })\n      )\n      \n      setProjectUsers(projUsers.filter(Boolean))\n      // Charger les taux de conversion projet (si définis)\n      try {\n        const cfa = await db.settings.get(`project:${projectId}:eur_to_cfa`)\n        const usd = await db.settings.get(`project:${projectId}:eur_to_usd`)\n        if (cfa?.value) setEurToCfa(String(cfa.value))\n        if (usd?.value) setEurToUsd(String(usd.value))\n      } catch (e) {\n        // ignorer\n      }\n      \n    } catch (error) {\n      console.error(\"Failed to load project data:\", error)\n      setError(\"Erreur lors du chargement des données du projet\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleSaveProject = async () => {\n    if (!db) return\n    setIsLoading(true)\n    setError(\"\")\n    \n    try {\n      // Valider que le nom du projet n'est pas vide\n      if (!formData.name.trim()) {\n        setError(\"Le nom du projet est obligatoire\")\n        return\n      }\n\n      // Mettre à jour les données du projet (enregistrer directement le code de devise choisi)\n      const updatedProject = await db.updateProject(projectId, {\n        name: formData.name,\n        description: formData.description,\n        icon: formData.icon,\n        color: formData.color,\n        currency: formData.currency\n      })\n\n  if (updatedProject) {\n        // Sauvegarder les taux de conversion projet si fournis (ignorer si db.settings indisponible)\n        if (eurToCfa) {\n          try { await db.settings.put({ key: `project:${projectId}:eur_to_cfa`, value: eurToCfa }) } catch { /* skip */ }\n        }\n        if (eurToUsd) {\n          try { await db.settings.put({ key: `project:${projectId}:eur_to_usd`, value: eurToUsd }) } catch { /* skip */ }\n        }\n\n  // Recharger entièrement les données du projet (devise et taux) pour garantir la cohérence\n  await loadProjectData()\n\n        // Notifier l'app du changement de devise projet\n        const detail = {\n          projectId,\n          currency: formData.currency,\n          eurToCfa,\n          eurToUsd,\n        }\n        if (typeof window !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('expenshare:project-currency-changed', { detail }))\n          // Event pour rechargement général des données\n          window.dispatchEvent(new CustomEvent('expenshare:project-updated', { detail: { projectId } }))\n        }\n\n        // Afficher un toast de succès\n        toast({\n          title: \"Projet mis à jour\",\n          description: \"Les modifications ont été enregistrées avec succès.\",\n          variant: \"default\"\n        })\n\n  // Fermer le formulaire et notifier le succès\n  onSuccess()\n  onClose()\n      } else {\n        setError(\"Erreur lors de la mise à jour du projet\")\n      }\n    } catch (error) {\n      console.error(\"Failed to update project:\", error)\n      setError(\"Erreur lors de la mise à jour du projet\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n  \n  const addCategory = async () => {\n    if (!newCategory.trim() || !db) return\n    setIsLoading(true)\n    \n    try {\n      await db.categories.add({\n        project_id: projectId,\n        name: newCategory.trim(),\n        level: 1,\n        parent_id: undefined,\n      })\n      \n      setNewCategory(\"\")\n      await loadProjectData() // Recharger les catégories\n    } catch (error) {\n      console.error(\"Failed to add category:\", error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n  \n  const addSubcategory = async () => {\n    if (!newSubcategory.trim() || !selectedCategoryForSub || !db) return\n    setIsLoading(true)\n    \n    try {\n      await db.categories.add({\n        project_id: projectId,\n        name: newSubcategory.trim(),\n        level: 2,\n        parent_id: selectedCategoryForSub,\n      })\n      \n      setNewSubcategory(\"\")\n      await loadProjectData() // Recharger les catégories\n    } catch (error) {\n      console.error(\"Failed to add subcategory:\", error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n  \n  const addUserToProject = async () => {\n    if (!db || !newUserId) return\n    \n    setIsAddingUser(true)\n    try {\n  // Vérifier que l'utilisateur n'est pas déjà dans le projet\n  if (projectUsers.some(user => String(user.id) === String(newUserId))) {\n        setError(\"Cet utilisateur est déjà dans le projet\")\n        return\n      }\n      \n      // Ajouter l'utilisateur au projet avec un rôle par défaut\n      await db.project_users.add({\n        project_id: projectId,\n        user_id: newUserId as any,\n        role: \"member\",\n        added_at: new Date()\n      })\n\n  // Recharger la liste depuis la DB pour garantir cohérence (RLS etc.)\n      await loadProjectData()\n      setNewUserId(null)\n      \n    } catch (error: any) {\n      console.error(\"Failed to add user to project:\", error)\n      const msg = (error && error.message) ? String(error.message) : \"Erreur lors de l'ajout de l'utilisateur au projet\"\n      setError(msg)\n      // Avertissements spécifiques\n      if (msg.includes('Seul le propriétaire du projet') || msg.includes(\"L'administrateur doit faire partie du projet\")) {\n        toast({\n          title: \"Action non autorisée\",\n          description: msg,\n          variant: \"destructive\"\n        })\n      } else {\n        toast({ title: \"Échec de l'ajout\", description: msg, variant: \"destructive\" })\n      }\n    } finally {\n      setIsAddingUser(false)\n    }\n  }\n  \n  const removeUserFromProject = async (userId: string | number) => {\n    if (!db) return\n    \n    setIsRemovingUser(String(userId))\n    try {\n      // Supprimer l'utilisateur du projet\n      await db.project_users.remove(projectId, userId)\n\n  // Recharger la liste depuis la DB\n  await loadProjectData()\n      \n    } catch (error: any) {\n      console.error(\"Failed to remove user from project:\", error)\n      const msg = (error && error.message) ? String(error.message) : \"Erreur lors de la suppression de l'utilisateur du projet\"\n      setError(msg)\n      // Avertissements spécifiques\n      if (msg.includes('Impossible de retirer le propriétaire')) {\n        toast({\n          title: \"Propriétaire non retirable\",\n          description: \"Vous ne pouvez pas retirer le propriétaire du projet.\",\n          variant: \"destructive\"\n        })\n      } else if (msg.includes('Seul le propriétaire du projet') || msg.includes('administrateur')) {\n        toast({\n          title: \"Action non autorisée\",\n          description: \"Vous n'avez pas la permission de retirer cet utilisateur.\",\n          variant: \"destructive\"\n        })\n      } else {\n        toast({ title: \"Échec de la suppression\", description: msg, variant: \"destructive\" })\n      }\n    } finally {\n  setIsRemovingUser(null)\n    }\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Settings className=\"h-5 w-5\" />\n            Paramètres du projet\n          </DialogTitle>\n          <DialogDescription>Configurez les paramètres du projet</DialogDescription>\n        </DialogHeader>\n\n        {error && (\n          <Alert variant=\"destructive\" className=\"my-4\">\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {isLoading && !project ? (\n          <div className=\"flex justify-center p-6\">\n            <Loader2 className=\"h-10 w-10 animate-spin text-primary\" />\n          </div>\n        ) : (\n          <Tabs defaultValue={currentTab} className=\"mt-4\" onValueChange={setCurrentTab}>\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"general\">Général</TabsTrigger>\n              <TabsTrigger value=\"categories\">Catégories</TabsTrigger>\n              <TabsTrigger value=\"users\">Utilisateurs</TabsTrigger>\n              <TabsTrigger value=\"currency\">Devise</TabsTrigger>\n            </TabsList>\n\n            {/* Onglet Général */}\n            <TabsContent value=\"general\" className=\"space-y-4 py-4\">\n              <div className=\"grid gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Nom du projet</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Description (optionnel)</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Icône</Label>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {PROJECT_ICONS.map((icon) => (\n                      <button\n                        key={icon}\n                        type=\"button\"\n                        onClick={() => setFormData({ ...formData, icon })}\n                        className={`text-2xl p-2 rounded-md ${\n                          formData.icon === icon ? \"bg-primary/20 ring-1 ring-primary\" : \"hover:bg-muted\"\n                        }`}\n                        aria-label={`Choisir l'icône ${icon}`}\n                      >\n                        {icon}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Couleur</Label>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {PROJECT_COLORS.map((color) => (\n                      <button\n                        key={color.value}\n                        type=\"button\"\n                        onClick={() => setFormData({ ...formData, color: color.value })}\n                        className={`w-7 h-7 rounded-full border-2 ${\n                          formData.color === color.value ? \"border-primary ring-2 ring-primary\" : \"border-muted\"\n                        }`}\n                        style={{ backgroundColor: color.value }}\n                        aria-label={`Choisir la couleur ${color.name}`}\n                      />\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n\n                  {/* Onglet Devise */}\n                  <TabsContent value=\"currency\" className=\"space-y-4 py-4\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>Devise</Label>\n                    <Select\n                      value={formData.currency}\n                      onValueChange={value => setFormData({ ...formData, currency: value })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Sélectionner une devise\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {CURRENCIES.map(currency => (\n                          <SelectItem key={currency.code} value={currency.code}>\n                            {currency.symbol} - {currency.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"flex gap-2 mt-2\">\n                    <div className=\"flex-1\">\n                      <Label>1 € = (CFA)</Label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        value={eurToCfa}\n                        onChange={e => setEurToCfa(e.target.value)}\n                      />\n                    </div>\n                    <div className=\"flex-1\">\n                      <Label>1 € = (USD)</Label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        value={eurToUsd}\n                        onChange={e => setEurToUsd(e.target.value)}\n                      />\n                    </div>\n                  </div>\n                  <Button onClick={handleSaveProject} disabled={isLoading} className=\"mt-4\">\n                    {isLoading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Save className=\"mr-2 h-4 w-4\" />}\n                    Enregistrer les modifications\n                  </Button>\n                </div>\n            </TabsContent>\n\n            {/* Onglet Catégories */}\n            <TabsContent value=\"categories\" className=\"py-4\">\n              <div className=\"space-y-6\">\n                {/* Ajouter une catégorie */}\n                <div className=\"space-y-2\">\n                  <Label>Ajouter une catégorie</Label>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      placeholder=\"Nom de la catégorie\"\n                      value={newCategory}\n                      onChange={(e) => setNewCategory(e.target.value)}\n                    />\n                    <Button type=\"button\" onClick={addCategory} disabled={isLoading || !newCategory.trim()}>\n                      <Plus className=\"h-4 w-4 mr-1\" />\n                      Ajouter\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Ajouter une sous-catégorie */}\n                <div className=\"space-y-2\">\n                  <Label>Ajouter une sous-catégorie</Label>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <Select\n                      value={selectedCategoryForSub?.toString() || \"\"}\n                      onValueChange={(value) => setSelectedCategoryForSub(Number(value))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Sélectionner une catégorie\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {categories\n                          .filter((cat) => cat.level === 1)\n                          .map((cat) => (\n                            <SelectItem key={cat.id} value={cat.id!.toString()}>\n                              {cat.name}\n                            </SelectItem>\n                          ))}\n                      </SelectContent>\n                    </Select>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        placeholder=\"Nom de la sous-catégorie\"\n                        value={newSubcategory}\n                        onChange={(e) => setNewSubcategory(e.target.value)}\n                      />\n                      <Button\n                        type=\"button\"\n                        onClick={addSubcategory}\n                        disabled={isLoading || !newSubcategory.trim() || !selectedCategoryForSub}\n                      >\n                        <Plus className=\"h-4 w-4 mr-1\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Liste des catégories et sous-catégories */}\n                <div className=\"space-y-4\">\n                  <Label>Catégories existantes</Label>\n                  <div className=\"space-y-3\">\n                    {categories\n                      .filter((cat) => cat.level === 1)\n                      .map((mainCat) => (\n                        <div key={mainCat.id} className=\"border rounded-md p-3\">\n                          <div className=\"flex justify-between items-center\">\n                            <div className=\"font-medium\">{mainCat.name}</div>\n                          </div>\n                          <div className=\"mt-2 pl-4 space-y-1\">\n                            {categories\n                              .filter((subCat) => subCat.parent_id === mainCat.id)\n                              .map((subCat) => (\n                                <div key={subCat.id} className=\"flex justify-between items-center py-1\">\n                                  <div className=\"text-sm\">{subCat.name}</div>\n                                </div>\n                              ))}\n                          </div>\n                        </div>\n                      ))}\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n\n            {/* Onglet Utilisateurs */}\n            <TabsContent value=\"users\" className=\"py-4\">\n              <div className=\"space-y-4\">\n                {/* Ajouter un utilisateur */}\n                <div className=\"space-y-2\">\n                  <Label>Ajouter un utilisateur au projet</Label>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <Select\n                      onValueChange={(value) => {\n                        const selectedUser = allUsers.find((user) => user.id.toString() === value);\n                        if (selectedUser && !projectUsers.some((pu) => String(pu.id) === value)) {\n                          setNewUserId(value);\n                        }\n                      }}\n                    >\n                      <SelectTrigger className=\"col-span-2\">\n                        <SelectValue placeholder=\"Sélectionner un utilisateur\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {allUsers\n                          .filter((user) => !projectUsers.some((pu) => pu.id === user.id))\n                          .map((user) => (\n                            <SelectItem key={user.id} value={user.id.toString()}>\n                              {user.name}\n                            </SelectItem>\n                          ))}\n                      </SelectContent>\n                    </Select>\n                    <Button \n                      onClick={addUserToProject} \n                      disabled={!newUserId || isAddingUser}\n                    >\n                      {isAddingUser ? (\n                        <Loader2 className=\"h-4 w-4 animate-spin\" />\n                      ) : (\n                        <>\n                          <Plus className=\"h-4 w-4 mr-1\" />\n                          Ajouter\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Liste des utilisateurs du projet */}\n                <div className=\"space-y-2\">\n                  <Label>Utilisateurs actuels</Label>\n                  <div className=\"border rounded-md divide-y\">\n                    {projectUsers.length === 0 ? (\n                      <p className=\"p-4 text-sm text-muted-foreground text-center\">\n                        Aucun utilisateur dans ce projet\n                      </p>\n                    ) : (\n                      projectUsers.map((user) => (\n                        <div key={user.id} className=\"flex justify-between items-center p-3\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"h-8 w-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                              <User className=\"h-4 w-4\" />\n                            </div>\n                            <div>\n                              <p className=\"font-medium\">{user.name}</p>\n                              <p className=\"text-sm text-muted-foreground\">{user.role}</p>\n                            </div>\n                          </div>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => {\n                              if (user.role === 'owner') {\n                                toast({\n                                  title: \"Propriétaire non retirable\",\n                                  description: \"Vous ne pouvez pas retirer le propriétaire du projet.\",\n                                  variant: \"destructive\"\n                                })\n                                return\n                              }\n                              removeUserFromProject(user.id)\n                            }}\n                            disabled={isRemovingUser === user.id}\n                          >\n                            {isRemovingUser === user.id ? (\n                              <Loader2 className=\"h-4 w-4 animate-spin\" />\n                            ) : (\n                              <X className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n        )}\n      </DialogContent>\n    </Dialog>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"G:\\Projets\\expenshare\\components\\forms\\transaction-form.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1226,1229],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1226,1229],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1284,1287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1284,1287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'lastAudioSaved' is assigned a value but never used.","line":48,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadUserProjects'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, loadUserProjects]","fix":{"range":[2364,2372],"text":"[isOpen, loadUserProjects]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProjectCategories'. Either include it or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":41,"suggestions":[{"desc":"Update the dependencies array to be: [formData.projectId, formData.type, loadProjectCategories]","fix":{"range":[2532,2567],"text":"[formData.projectId, formData.type, loadProjectCategories]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3664,3667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3664,3667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3672,3675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3672,3675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":172,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6273,6276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6273,6276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":182,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6702,6705],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6702,6705],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":216,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7538,7541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7538,7541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":429,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":429,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17171,17174],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17171,17174],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport React, { useState, useEffect, useRef } from \"react\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Plus, Minus, FileText, Loader2, Camera, Mic, Upload } from \"lucide-react\"\nimport { MediaUpload, type MediaUploadHandle } from \"@/components/media/media-upload\"\nimport { useDatabase } from \"@/hooks/use-database\"\nimport { MediaFile } from \"@/lib/media-types\"\n\ninterface TransactionFormProps {\n  isOpen: boolean\n  onClose: () => void\n  onSuccess: () => void\n}\n\nexport function TransactionForm({ isOpen, onClose, onSuccess }: TransactionFormProps) {\n  const { toast } = useToast()\n  const { db } = useDatabase()\n  const [projects, setProjects] = useState<any[]>([])\n  const [categories, setCategories] = useState<any[]>([])\n  const [leafCategoryIds, setLeafCategoryIds] = useState<Set<number>>(new Set())\n  const [formData, setFormData] = useState({\n    projectId: \"\",\n    categoryId: \"\",\n    type: \"expense\" as \"expense\" | \"budget\",\n    amount: \"\",\n    title: \"\",\n    description: \"\",\n  })\n  // Devise dynamique selon le projet sélectionné (après formData)\n  const selectedProject = projects.find(p => String(p.id) === formData.projectId)\n  const projectCurrency = selectedProject?.currency || \"€\"\n  const [mediaFiles, setMediaFiles] = useState<MediaFile[]>([])\n  const audioUploadRef = useRef<MediaUploadHandle | null>(null)\n  const [showDescriptionDialog, setShowDescriptionDialog] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n  const [isRecordingAudio, setIsRecordingAudio] = useState(false)\n  const [recordingSeconds, setRecordingSeconds] = useState(0)\n  const [lastAudioSaved, setLastAudioSaved] = useState<string | null>(null)\n\n  useEffect(() => {\n    if (isOpen) {\n      loadUserProjects()\n      resetForm()\n    }\n  }, [isOpen])\n\n  useEffect(() => {\n    if (formData.projectId && formData.type === \"expense\") {\n      loadProjectCategories(Number.parseInt(formData.projectId))\n    }\n  }, [formData.projectId, formData.type])\n\n  const resetForm = () => {\n    setFormData({\n      projectId: \"\",\n      categoryId: \"\",\n      type: \"expense\",\n      amount: \"\",\n      title: \"\",\n      description: \"\",\n    })\n    setMediaFiles([])\n    setError(\"\")\n  }\n\n  const loadUserProjects = async () => {\n    if (!db) return\n    try {\n      // Récupérer l'utilisateur courant\n      const currentUserData = JSON.parse(localStorage.getItem(\"expenshare_current_user\") || \"{}\")\n      const currentUser = await db.users.getByName(currentUserData.name)\n\n      if (!currentUser) return\n\n      // Obtenir les projets de l'utilisateur\n      const userProjects = await db.getUserProjects(currentUser.id)\n      setProjects(userProjects)\n    } catch (error) {\n      console.error(\"Failed to load projects:\", error)\n    }\n  }\n\n  const loadProjectCategories = async (projectId: number) => {\n    if (!db) return\n    try {\n      // Obtenir les catégories du projet\n      const projectCategories = await db.getProjectCategories(projectId)\n      \n      // Trier les catégories par niveau puis par nom\n  const sortedCategories = projectCategories.sort((a: any, b: any) => {\n        if (a.level !== b.level) return a.level - b.level\n        return a.name.localeCompare(b.name)\n      })\n\n      setCategories(sortedCategories)\n      // Construire l'ensemble des catégories parents (qui ont des enfants) pour déduire les feuilles\n      const parents = new Set<number>()\n      for (const c of sortedCategories) {\n        if (c.parent_id != null) parents.add(Number(c.parent_id))\n      }\n      const leaves = new Set<number>()\n      for (const c of sortedCategories) {\n        if (!parents.has(Number(c.id))) leaves.add(Number(c.id))\n      }\n      setLeafCategoryIds(leaves)\n    } catch (error) {\n      console.error(\"Failed to load categories:\", error)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (!formData.projectId || !formData.amount || (formData.type === \"budget\" && !formData.title)) {\n      setError(\"Veuillez remplir tous les champs obligatoires\")\n      return\n    }\n    \n    // Pour les dépenses, assurez-vous qu'une catégorie est sélectionnée\n    if (formData.type === \"expense\" && !formData.categoryId) {\n      setError(\"Veuillez sélectionner une catégorie pour cette dépense\")\n      return\n    }\n\n    const amount = Number.parseFloat(formData.amount)\n    if (isNaN(amount) || amount <= 0) {\n      setError(\"Le montant doit être un nombre positif\")\n      return\n    }\n\n    setIsLoading(true)\n    setError(\"\")\n\n    try {\n      if (!db) throw new Error(\"Base de données non disponible\")\n\n      const currentUserData = JSON.parse(localStorage.getItem(\"expenshare_current_user\") || \"{}\")\n  const currentUser = await db.users.getByName(currentUserData.name)\n\n      if (!currentUser) throw new Error(\"Utilisateur non trouvé\")\n\n      // Créer la transaction avec uniquement la description saisie (texte pur)\n  const transactionId = await db.transactions.add({\n        project_id: Number.parseInt(formData.projectId),\n        user_id: currentUser.id!,\n        category_id: formData.categoryId ? Number.parseInt(formData.categoryId) : null,\n        type: formData.type,\n        amount: amount,\n        title: formData.title,\n        description: formData.description\n      })\n\n      // Enregistrer les notes/médias en base (table notes) si présents\n      if (db && transactionId) {\n        // Note texte (si description non vide)\n        if (formData.description && formData.description.trim().length > 0) {\n          await db.notes.add({\n            transaction_id: transactionId,\n            content_type: \"text\",\n            content: formData.description.trim(),\n            file_path: undefined,\n          } as any)\n        }\n        // Médias\n        for (const media of mediaFiles) {\n          // On stocke l'URL publique du média (déjà uploadé via MediaUpload)\n          await db.notes.add({\n            transaction_id: transactionId,\n            content_type: media.type === \"image\" ? \"image\" : media.type === \"audio\" ? \"audio\" : \"text\",\n            content: media.url, // URL publique\n            file_path: media.name,\n          } as any)\n        }\n      }\n\n      onSuccess()\n      toast({\n        title: \"Transaction enregistrée\",\n        description: \"Votre dépense a bien été ajoutée.\",\n        variant: \"success\"\n      })\n      setTimeout(() => {\n        onClose()\n      }, 1200)\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"Erreur lors de la création de la transaction\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleMediaAdd = (media: MediaFile) => {\n    setMediaFiles((prev) => [...prev, media])\n  }\n\n  const handleMediaRemove = (mediaId: string) => {\n    setMediaFiles((prev) => {\n      const media = prev.find((m) => m.id === mediaId)\n      if (media?.url) {\n        URL.revokeObjectURL(media.url)\n      }\n      return prev.filter((m) => m.id !== mediaId)\n    })\n  }\n\n  const getCategoryDisplayName = (category: any) => {\n    if (category.level === 1) return category.name\n    const parentCategory = categories.find((c) => c.id === category.parent_id)\n    return `${parentCategory?.name || ''}/${category.name}`\n  }\n\n  return (\n    <>\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"sm:max-w-lg max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              {formData.type === \"expense\" ? (\n                <Minus className=\"h-5 w-5 text-red-500\" />\n              ) : (\n                <Plus className=\"h-5 w-5 text-blue-500\" />\n              )}\n              Nouvelle {formData.type === \"expense\" ? \"Dépense\" : \"Entrée de Budget\"}\n            </DialogTitle>\n            <DialogDescription>\n              Ajoutez une {formData.type === \"expense\" ? \"dépense\" : \"entrée de budget\"} à votre projet\n            </DialogDescription>\n          </DialogHeader>\n\n          <Tabs\n            value={formData.type}\n            onValueChange={(value) => setFormData((prev) => ({ ...prev, type: value as \"expense\" | \"budget\", categoryId: \"\" }))}\n          >\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"expense\" className=\"flex items-center gap-2\">\n                <Minus className=\"h-4 w-4\" />\n                Dépense\n              </TabsTrigger>\n              <TabsTrigger value=\"budget\" className=\"flex items-center gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Budget\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value={formData.type} className=\"space-y-4\">\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                {error && (\n                  <Alert variant=\"destructive\">\n                    <AlertDescription>{error}</AlertDescription>\n                  </Alert>\n                )}\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"project\">Projet *</Label>\n                  <Select\n                    value={formData.projectId}\n                    onValueChange={(value) => setFormData((prev) => ({ ...prev, projectId: value, categoryId: \"\" }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Sélectionnez un projet\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {projects.map((project) => (\n                        <SelectItem key={project.id} value={project.id.toString()}>\n                          <div className=\"flex items-center gap-2\">\n                            <span>{project.icon}</span>\n                            <span>{project.name}</span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {formData.type === \"expense\" && categories.length > 0 && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"category\">Catégorie (titre de la dépense)</Label>\n                    <Select\n                      value={formData.categoryId}\n                      onValueChange={(value) => {\n                        setFormData((prev) => ({ ...prev, categoryId: value }))\n                        const selectedCategory = categories.find((c) => c.id.toString() === value)\n                        if (selectedCategory && !formData.title) {\n                          setFormData((prev) => ({ ...prev, title: selectedCategory.name }))\n                        }\n                      }}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Sélectionnez une catégorie\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {categories\n                          .filter((category) => leafCategoryIds.has(Number(category.id)))\n                          .map((category) => (\n                            <SelectItem key={category.id} value={category.id.toString()}>\n                              <div className=\"flex items-center gap-2\">\n                                <span>{getCategoryDisplayName(category)}</span>\n                              </div>\n                            </SelectItem>\n                          ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"amount\">Montant *</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"amount\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      placeholder=\"0.00\"\n                      value={formData.amount}\n                      onChange={(e) => setFormData((prev) => ({ ...prev, amount: e.target.value }))}\n                      required\n                      className=\"pr-8\"\n                    />\n                    <span className=\"absolute right-3 top-1/2 -translate-y-1/2 text-sm text-muted-foreground\">{projectCurrency}</span>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">\n                    {formData.type === \"expense\" ? \n                      \"Description additionnelle\" : \n                      \"Titre *\"\n                    }\n                  </Label>\n                  {formData.type === \"expense\" ? (\n                    <Input\n                      id=\"title\"\n                      placeholder=\"Description optionnelle\"\n                      value={formData.title}\n                      onChange={(e) => setFormData((prev) => ({ ...prev, title: e.target.value }))}\n                    />\n                  ) : (\n                    <Input\n                      id=\"title\"\n                      placeholder=\"Ex: Apport initial, Remboursement...\"\n                      value={formData.title}\n                      onChange={(e) => setFormData((prev) => ({ ...prev, title: e.target.value }))}\n                      required\n                    />\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Notes et fichiers</Label>\n                  <div className=\"grid grid-cols-4 gap-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        // Simuler le clic sur le bouton d'ajout d'images\n                        document.getElementById(\"image-upload-btn\")?.click();\n                      }}\n                      className=\"flex-1\"\n                      aria-label=\"Ajouter des images\"\n                      title=\"Images\"\n                    >\n                      <Camera className=\"h-4 w-4 sm:mr-2\" />\n                      <span className=\"hidden sm:inline\">Images</span>\n                    </Button>\n                    \n                    <Button\n                      type=\"button\"\n                      variant={isRecordingAudio ? \"destructive\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => {\n                        if (!audioUploadRef.current) return\n                        if (audioUploadRef.current.getRecordingState()) {\n                          audioUploadRef.current.stopAudioRecording()\n                        } else {\n                          audioUploadRef.current.startAudioRecording()\n                        }\n                      }}\n                      className=\"flex-1\"\n                      aria-label={isRecordingAudio ? \"Arrêter l'enregistrement audio\" : \"Ajouter un enregistrement audio\"}\n                      title={isRecordingAudio ? \"Arrêter l'enregistrement\" : \"Audio\"}\n                    >\n                      <Mic className=\"h-4 w-4 sm:mr-2\" />\n                      <span className=\"hidden sm:inline\">\n                        {isRecordingAudio ? `Arrêter (${Math.floor(recordingSeconds/60)}:${String(recordingSeconds%60).padStart(2,'0')})` : \"Audio\"}\n                      </span>\n                    </Button>\n                    \n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        // Simuler le clic sur le bouton d'ajout de fichiers\n                        document.getElementById(\"file-upload-btn\")?.click();\n                      }}\n                      className=\"flex-1\"\n                      aria-label=\"Ajouter des fichiers\"\n                      title=\"Fichiers\"\n                    >\n                      <Upload className=\"h-4 w-4 sm:mr-2\" />\n                      <span className=\"hidden sm:inline\">Fichiers</span>\n                    </Button>\n                    \n                    {/* Composants MediaUpload invisibles mais liés à l'état */}\n                    <div className=\"hidden\">\n                      <MediaUpload\n                        id=\"image-upload-btn\"\n                        onMediaAdd={handleMediaAdd}\n                        onMediaRemove={handleMediaRemove}\n                        mediaFiles={mediaFiles}\n                        maxFiles={10}\n                        acceptedTypes={[\"image/*\"]}\n                      />\n                      \n                      <MediaUpload\n                        id=\"audio-upload-btn\"\n                        ref={audioUploadRef as any}\n                        onMediaAdd={(m) => { handleMediaAdd(m); setLastAudioSaved(m.name) }}\n                        onMediaRemove={handleMediaRemove}\n                        mediaFiles={mediaFiles}\n                        maxFiles={10}\n                        acceptedTypes={[\"audio/*\"]}\n                        onRecordingStart={() => { setIsRecordingAudio(true); setRecordingSeconds(0) }}\n                        onRecordingStop={() => { setIsRecordingAudio(false) }}\n                        onRecordingTimeTick={(s) => setRecordingSeconds(s)}\n                      />\n                      \n                      <MediaUpload\n                        id=\"file-upload-btn\"\n                        onMediaAdd={handleMediaAdd}\n                        onMediaRemove={handleMediaRemove}\n                        mediaFiles={mediaFiles}\n                        maxFiles={10}\n                        acceptedTypes={[\"application/*\", \"text/*\", \".pdf\", \".doc\", \".docx\", \".xls\", \".xlsx\", \".ppt\", \".pptx\"]}\n                      />\n                    </div>\n\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setShowDescriptionDialog(true)}\n                      className=\"flex-1\"\n                      aria-label=\"Ajouter une note\"\n                      title=\"Note\"\n                    >\n                      <FileText className=\"h-4 w-4\" />\n                      <span className=\"hidden sm:inline ml-2\">Note</span>\n                    </Button>\n                  </div>\n\n                  {mediaFiles.length > 0 && (\n                    <div className=\"text-xs text-muted-foreground\">\n                      {mediaFiles.length} fichier(s) joint(s)\n                      <ul className=\"mt-1 space-y-0.5\">\n                        {mediaFiles.slice(0, 3).map((m) => (\n                          <li key={m.id} className=\"truncate\">\n                            <span className=\"uppercase mr-1 text-muted-foreground\">[{m.type}]</span>\n                            {m.name}\n                          </li>\n                        ))}\n                        {mediaFiles.length > 3 && (\n                          <li className=\"text-muted-foreground\">… et {mediaFiles.length - 3} autres</li>\n                        )}\n                      </ul>\n                    </div>\n                  )}\n\n                  {formData.description && <div className=\"text-xs text-muted-foreground\">Description ajoutée</div>}\n                </div>\n\n                <div className=\"flex gap-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={onClose} className=\"flex-1 bg-transparent\">\n                    Annuler\n                  </Button>\n                  <Button type=\"submit\" disabled={isLoading} className=\"flex-1\">\n                    {isLoading ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Enregistrement...\n                      </>\n                    ) : (\n                      \"Enregistrer\"\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </TabsContent>\n          </Tabs>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={showDescriptionDialog} onOpenChange={setShowDescriptionDialog}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Description de la transaction</DialogTitle>\n            <DialogDescription>\n              Ajoutez des détails supplémentaires à votre {formData.type === \"expense\" ? \"dépense\" : \"budget\"}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <Textarea\n              placeholder=\"Détails supplémentaires...\"\n              value={formData.description}\n              onChange={(e) => setFormData((prev) => ({ ...prev, description: e.target.value }))}\n              rows={4}\n            />\n            <div className=\"flex gap-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setShowDescriptionDialog(false)}\n                className=\"flex-1\"\n              >\n                Annuler\n              </Button>\n              <Button type=\"button\" onClick={() => setShowDescriptionDialog(false)} className=\"flex-1\">\n                Enregistrer\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"G:\\Projets\\expenshare\\components\\layout\\top-header.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownMenu' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownMenuContent' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownMenuItem' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownMenuSeparator' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownMenuTrigger' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":29,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":15},{"ruleId":"prefer-const","severity":2,"message":"'lastSeen' is never reassigned. Use 'const' instead.","line":101,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":101,"endColumn":15,"fix":{"range":[3886,3940],"text":"const lastSeen = localStorage.getItem(lastSeenKey) || ''"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5463,5466],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5463,5466],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":158,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6524,6527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6524,6527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":163,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6829,6832],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6829,6832],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleImportData' is assigned a value but never used.","line":210,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":210,"endColumn":25}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":1,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect, useRef } from \"react\"\nimport { useRouter, usePathname } from \"next/navigation\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\"\nimport { Settings, LogOut, KeyRound, Download, Users, Bell } from \"lucide-react\"\nimport { db } from \"@/lib/database\"\nimport { UserSettings } from \"@/components/settings/user-settings\"\nimport { PinChange } from \"@/components/auth/pin-change\"\nimport { UserManagement } from \"@/components/settings/user-management\"\nimport { ExportDialog } from \"@/components/export/export-dialog\"\n\ninterface TopHeaderProps {\n  onLogout: () => void\n}\n\nexport function TopHeader({ onLogout }: TopHeaderProps) {\n  type NotifItem = { id: string; type: 'expense'|'budget'; projectName?: string; userName: string; ts: number }\n  const [isMenuOpen, setIsMenuOpen] = useState(false)\n  const menuRef = useRef<HTMLDivElement>(null)\n  const router = useRouter()\n  const pathname = usePathname()\n  // Fermer le menu si clic en dehors\n  useEffect(() => {\n    if (!isMenuOpen) return;\n    function handleClickOutside(event: MouseEvent) {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        setIsMenuOpen(false);\n      }\n    }\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [isMenuOpen]);\n\n  \n\n  // Fermer le menu lors d'un changement de page/onglet\n  useEffect(() => {\n    setIsMenuOpen(false);\n  }, [pathname]);\n  const [userName, setUserName] = useState<string>(\"\")\n  const [showSettings, setShowSettings] = useState(false)\n  const [showPinChange, setShowPinChange] = useState(false)\n  const [showUserMgmt, setShowUserMgmt] = useState(false)\n  const [showExport, setShowExport] = useState(false)\n  const [isAdmin, setIsAdmin] = useState(false)\n  const [unreadCount, setUnreadCount] = useState(0)\n  const [notifItems, setNotifItems] = useState<NotifItem[]>([])\n  const [showNotifMenu, setShowNotifMenu] = useState(false)\n  const notifRef = useRef<HTMLDivElement>(null)\n\n  // Fermer le menu de notifications si clic en dehors\n  useEffect(() => {\n    if (!showNotifMenu) return;\n    function handleClickOutside(event: MouseEvent) {\n      if (notifRef.current && !notifRef.current.contains(event.target as Node)) {\n        setShowNotifMenu(false);\n      }\n    }\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [showNotifMenu]);\n\n  useEffect(() => {\n    // Récupérer le nom d'utilisateur depuis le stockage local\n    const storedUser = localStorage.getItem(\"expenshare_user\")\n    if (storedUser) {\n      const userData = JSON.parse(storedUser)\n      setUserName(userData.name)\n      // Determine admin\n      db.getAdminUserId().then((aid) => {\n        if (aid && userData.id === aid) setIsAdmin(true)\n      }).catch(() => {})\n\n      // Clés par utilisateur\n      const unreadKey = `expenshare_notif_unread_${userData.id}`\n      const itemsKey = `expenshare_notif_items_${userData.id}`\n      const lastSeenKey = `expenshare_notif_lastSeen_${userData.id}`\n\n      // Charger la liste des notifications (locale d'abord)\n      try {\n        const saved = JSON.parse(localStorage.getItem(itemsKey) || '[]')\n        if (Array.isArray(saved)) setNotifItems(saved)\n      } catch {}\n\n  // lastSeen: ne pas initialiser automatiquement à \"maintenant\" pour que les utilisateurs voient\n  // les nouvelles transactions même s'ils n'étaient pas connectés.\n  // Si absent, on utilisera la date de création de l'utilisateur comme fallback (sinon 1970), sans l'écrire côté client.\n  let lastSeen = localStorage.getItem(lastSeenKey) || ''\n\n      // Calculer les non lus depuis lastSeen (serveur) pour garantir l’exactitude multi-appareils\n      // Déterminer un since effectif\n      const computeSince = async (): Promise<string> => {\n        if (lastSeen) return lastSeen\n        try {\n          const me = await db.users.get(String(userData.id))\n          const createdAt = me?.created_at ? new Date(me.created_at).toISOString() : null\n          return createdAt || '1970-01-01T00:00:00.000Z'\n        } catch {\n          return '1970-01-01T00:00:00.000Z'\n        }\n      }\n\n      const sincePromise = computeSince()\n\n      sincePromise.then((since) => db.getNewTransactionsCountSince(since)).then(async (serverCount) => {\n        // Fusionner avec un éventuel compteur local existant (priorité au max pour ne pas léser)\n        const raw = localStorage.getItem(unreadKey)\n        const localCount = raw ? Number(raw) || 0 : 0\n        const effective = Math.max(serverCount, localCount)\n        setUnreadCount(effective)\n        localStorage.setItem(unreadKey, String(effective))\n\n        // Si nous avons des non lus et que la liste locale est vide ou incomplète,\n        // récupérer les transactions depuis lastSeen pour construire des éléments\n        try {\n          if (effective > 0) {\n            const sinceVal = await sincePromise\n            const serverTx = await db.getTransactionsSince(sinceVal, Math.min(50, effective + 5))\n            if (Array.isArray(serverTx) && serverTx.length) {\n              const mapped: NotifItem[] = serverTx.map((t: any) => ({\n                id: `${t.id}_${t.created_at}`,\n                type: t.type === 'expense' ? 'expense' as const : 'budget' as const,\n                projectName: t.project_name || 'Projet',\n                userName: t.user_name || 'Utilisateur',\n                ts: new Date(t.created_at).getTime(),\n              }))\n              setNotifItems(prev => {\n                // Fusionner sans doublons par id\n                const seen = new Set(prev.map(p => p.id))\n                const merged = [...mapped.filter(m => !seen.has(m.id)), ...prev].slice(0, 30)\n                try { localStorage.setItem(itemsKey, JSON.stringify(merged)) } catch {}\n                return merged\n              })\n            }\n          }\n        } catch {}\n      }).catch(() => {\n        const raw = localStorage.getItem(unreadKey)\n        setUnreadCount(raw ? Number(raw) || 0 : 0)\n      })\n\n  // Écouter les nouvelles transactions pour incrémenter le compteur\n\n      // Écouter les nouvelles transactions pour incrémenter le compteur\n      const onNewTx = async (evt: any) => {\n        try {\n          const detail = evt?.detail || {}\n          // Vérifier si l'utilisateur courant appartient au projet concerné\n      const memberships = await db.project_users.where('user_id').equals(String(userData.id)).toArray()\n          const projectIds = new Set(memberships.map((m: any) => Number(m.project_id)))\n          if (projectIds.has(Number(detail.projectId))) {\n            // Mettre à jour compteur\n            setUnreadCount(prev => {\n              const next = (prev || 0) + 1\n        localStorage.setItem(unreadKey, String(next))\n              return next\n            })\n\n            // Ajouter l’item (type + projet + user)\n            try {\n              const u = await db.users.get(String(detail.userId))\n              const proj = await db.getProjectById(Number(detail.projectId))\n              const item = {\n                id: `${Date.now()}_${Math.random().toString(36).slice(2,7)}`,\n                type: (String(detail.type) === 'expense' ? 'expense' : 'budget') as 'expense'|'budget',\n                projectName: proj?.name || 'Projet',\n                userName: u?.name || 'Utilisateur',\n                ts: Date.now(),\n              }\n              setNotifItems(prev => {\n                const next = [item, ...prev].slice(0, 30)\n                try { localStorage.setItem(itemsKey, JSON.stringify(next)) } catch {}\n                return next\n              })\n            } catch {}\n          }\n        } catch {}\n      }\n      window.addEventListener('expenshare:new-transaction', onNewTx)\n      return () => window.removeEventListener('expenshare:new-transaction', onNewTx)\n    }\n  }, [])\n\n  const getUserInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((word) => word[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2)\n  }\n\n  const handleExportData = async () => {\n    setShowExport(true)\n  }\n\n  const handleImportData = () => {\n    const input = document.createElement(\"input\")\n    input.type = \"file\"\n    input.accept = \".txt\"\n    input.onchange = async (e) => {\n      const file = (e.target as HTMLInputElement).files?.[0]\n      if (!file) return\n\n      try {\n        // Fonctionnalité d'import non disponible avec Supabase\n        alert(\"L'import de données n'est pas disponible avec la version Supabase de l'application.\")\n      } catch (error) {\n        console.error(\"Import failed:\", error)\n        alert(\"Erreur lors de l'import des données\")\n      }\n    }\n    input.click()\n  }\n\n  return (\n    <header className=\"bg-card border-b border-border px-4 py-3 flex items-center justify-between\">\n      <div>\n        <h1 className=\"text-xl font-semibold text-foreground\">ExpenseShare</h1>\n        <p className=\"text-sm text-muted-foreground\">Gestion de projets et dépenses</p>\n      </div>\n\n      <div className=\"flex items-center gap-3\">\n        {/* Notifications */}\n        <div className=\"relative\" ref={notifRef}>\n          <Button \n            variant=\"ghost\" \n            className=\"relative h-10 w-10 rounded-full\" \n            onClick={() => setShowNotifMenu(v => !v)} \n            aria-label=\"Notifications\"\n          >\n            <Bell className=\"h-6 w-6\" />\n            {unreadCount > 0 && (\n              <span className=\"absolute -top-1 -right-1 bg-red-600 text-white font-bold text-[10px] leading-none rounded-full min-w-[18px] h-[18px] flex items-center justify-center px-1 shadow\">\n                {unreadCount}\n              </span>\n            )}\n          </Button>\n          {showNotifMenu && (\n            <div className=\"absolute right-0 mt-2 w-72 rounded-md shadow-lg bg-card border border-border z-50 p-3\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium\">Notifications</span>\n                <Button \n                  variant=\"secondary\" \n                  size=\"sm\"\n                  className=\"h-7 px-2 text-xs\"\n                  onClick={() => {\n                    const storedUser = localStorage.getItem('expenshare_user')\n                    if (storedUser) {\n                      const userData = JSON.parse(storedUser)\n                      const unreadKey = `expenshare_notif_unread_${userData.id}`\n                      const itemsKey = `expenshare_notif_items_${userData.id}`\n                      const lastSeenKey = `expenshare_notif_lastSeen_${userData.id}`\n                      localStorage.setItem(unreadKey, '0')\n                      localStorage.setItem(itemsKey, '[]')\n                      localStorage.setItem(lastSeenKey, new Date().toISOString())\n                    }\n                    setUnreadCount(0)\n                    setNotifItems([])\n                    setShowNotifMenu(false)\n                  }}\n                >Marquer comme lues</Button>\n              </div>\n              {notifItems.length === 0 ? (\n                <p className=\"text-sm text-muted-foreground\">Aucune nouvelle transaction</p>\n              ) : (\n                <ul className=\"max-h-64 overflow-auto divide-y\">\n                  {notifItems.map((n) => (\n                    <li key={n.id} className=\"py-2 flex items-center gap-2\">\n                      <span className={`text-xs font-medium px-2 py-0.5 rounded ${n.type === 'expense' ? 'bg-red-100 text-red-700' : 'bg-blue-100 text-blue-700'}`}>\n                        {n.type === 'expense' ? 'Dépense' : 'Budget'}\n                      </span>\n                      {n.projectName && (\n                        <span className=\"text-sm text-muted-foreground truncate\">{n.projectName}</span>\n                      )}\n                      <span className=\"text-sm truncate\">{n.userName}</span>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* User menu */}\n        <div className=\"relative\">\n          <Button variant=\"ghost\" className=\"relative h-10 w-10 rounded-full\" onClick={() => setIsMenuOpen(!isMenuOpen)}>\n          <Avatar className=\"h-10 w-10\">\n            <AvatarFallback className=\"bg-primary text-primary-foreground\">\n              {getUserInitials(userName)}\n            </AvatarFallback>\n          </Avatar>\n        </Button>\n\n        {isMenuOpen && (\n          <div ref={menuRef} className=\"absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-card border border-border z-50\">\n          <div className=\"flex flex-col space-y-1 p-3\">\n            <p className=\"text-sm font-medium leading-none\">{userName}</p>\n            <p className=\"text-xs leading-none text-muted-foreground\">Connecté</p>\n          </div>\n          <div className=\"border-t border-border\"></div>\n          <div className=\"p-1\">\n            <Button \n              variant=\"ghost\" \n              className=\"w-full justify-start text-left\" \n              size=\"sm\"\n              onClick={() => {\n                setIsMenuOpen(false);\n                setShowPinChange(true);\n              }}\n            >\n              <KeyRound className=\"mr-2 h-4 w-4\" />\n              <span>Changer le PIN</span>\n            </Button>\n            <Button \n              variant=\"ghost\" \n              className=\"w-full justify-start text-left\" \n              size=\"sm\"\n              onClick={() => {\n                setIsMenuOpen(false); \n                setShowSettings(true);\n              }}\n            >\n              <Settings className=\"mr-2 h-4 w-4\" />\n              <span>Paramètres</span>\n            </Button>\n            {isAdmin && (\n              <Button \n                variant=\"ghost\" \n                className=\"w-full justify-start text-left\" \n                size=\"sm\"\n                onClick={() => {\n                  setIsMenuOpen(false); \n                  setShowUserMgmt(true);\n                }}\n              >\n                <Users className=\"mr-2 h-4 w-4\" />\n                <span>Gérer les utilisateurs</span>\n              </Button>\n            )}\n            <div className=\"border-t border-border my-1\"></div>\n            <Button variant=\"ghost\" className=\"w-full justify-start text-left\" size=\"sm\" onClick={() => {\n                setIsMenuOpen(false);\n                handleExportData();\n              }}>\n              <Download className=\"mr-2 h-4 w-4\" />\n              <span>Exporter les données</span>\n            </Button>\n            <div className=\"border-t border-border my-1\"></div>\n            <Button variant=\"ghost\" className=\"w-full justify-start text-left text-destructive\" size=\"sm\" onClick={onLogout}>\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              <span>Déconnexion</span>\n            </Button>\n          </div>\n        </div>\n        )}\n        </div>\n      </div>\n\n      {/* Dialog des paramètres utilisateur */}\n      <UserSettings \n        isOpen={showSettings} \n        onClose={() => setShowSettings(false)} \n      />\n      \n      {/* Dialog pour changer le PIN */}\n      <PinChange\n        isOpen={showPinChange}\n        onClose={() => setShowPinChange(false)}\n      />\n\n      {/* Dialog gestion utilisateurs (admin only) */}\n      <UserManagement\n        isOpen={showUserMgmt}\n        onClose={() => setShowUserMgmt(false)}\n      />\n      <ExportDialog\n        isOpen={showExport}\n        onClose={() => setShowExport(false)}\n      />\n    </header>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"G:\\Projets\\expenshare\\components\\media\\media-upload.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":132,"column":15,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":132,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":139,"column":13,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":139,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":144,"column":17,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":144,"endColumn":65},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useImperativeHandle has missing dependencies: 'startRecording' and 'stopRecording'. Either include them or remove the dependency array.","line":171,"column":7,"nodeType":"ArrayExpression","endLine":171,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [isRecording, recordingTime, startRecording, stopRecording]","fix":{"range":[5639,5667],"text":"[isRecording, recordingTime, startRecording, stopRecording]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useRef, forwardRef, useImperativeHandle } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Camera, Mic, Upload, X, Play, Pause, Download } from \"lucide-react\"\nimport { MediaFile } from \"@/lib/media-types\"\nimport { supabase } from \"@/lib/supabase\"\nimport NextImage from \"next/image\"\n\nexport type MediaUploadHandle = {\n  startAudioRecording: () => Promise<void>\n  stopAudioRecording: () => void\n  getRecordingState: () => boolean\n  getRecordingTime: () => number\n}\n\ninterface MediaUploadProps {\n  // Permettre de cliquer l'input file depuis l'extérieur (ex: via document.getElementById(id).click())\n  id?: string\n  onMediaAdd: (media: MediaFile) => void\n  onMediaRemove: (mediaId: string) => void\n  mediaFiles: MediaFile[]\n  maxFiles?: number\n  acceptedTypes?: string[]\n  onRecordingStart?: () => void\n  onRecordingStop?: (blob?: Blob) => void\n  onRecordingTimeTick?: (seconds: number) => void\n}\n\nexport const MediaUpload = forwardRef<MediaUploadHandle, MediaUploadProps>(function MediaUpload(\n  {\n    id,\n    onMediaAdd,\n    onMediaRemove,\n    mediaFiles,\n    maxFiles = 5,\n    acceptedTypes = [\"image/*\", \"audio/*\"],\n    onRecordingStart,\n    onRecordingStop,\n    onRecordingTimeTick,\n  }: MediaUploadProps,\n  ref\n) {\n  const [isRecording, setIsRecording] = useState(false)\n  const [recordingTime, setRecordingTime] = useState(0)\n  const [playingAudio, setPlayingAudio] = useState<string | null>(null)\n\n  const fileInputRef = useRef<HTMLInputElement>(null)\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null)\n  const recordingIntervalRef = useRef<NodeJS.Timeout | null>(null)\n  const audioRef = useRef<HTMLAudioElement | null>(null)\n\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || [])\n\n    for (const file of files) {\n      if (mediaFiles.length >= maxFiles) return\n\n      // Upload vers Supabase Storage\n      const fileExt = file.name.split('.').pop()\n      const filePath = `${Date.now()}_${Math.random().toString(36).substr(2, 9)}.${fileExt}`\n      const { error } = await supabase.storage.from('media').upload(filePath, file, { upsert: false })\n      if (error) {\n        alert(\"Erreur lors de l'upload du fichier : \" + error.message)\n        continue\n      }\n      // Récupérer l'URL publique\n      const { data } = supabase.storage.from('media').getPublicUrl(filePath)\n      const publicUrl = data.publicUrl\n\n      const mediaFile: MediaFile = {\n        id: Date.now().toString() + Math.random().toString(36).substr(2, 9),\n        type: file.type.startsWith(\"image/\")\n          ? \"image\"\n          : file.type.startsWith(\"audio/\")\n          ? \"audio\"\n          : \"file\",\n        name: file.name,\n        size: file.size,\n        url: publicUrl,\n        blob: undefined, // plus besoin du blob après upload\n      }\n\n      onMediaAdd(mediaFile)\n    }\n\n    // Reset input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\"\n    }\n  }\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true })\n      const mediaRecorder = new MediaRecorder(stream)\n      const chunks: BlobPart[] = []\n\n      mediaRecorder.ondataavailable = (event) => {\n        chunks.push(event.data)\n      }\n\n      mediaRecorder.onstop = async () => {\n        const blob = new Blob(chunks, { type: \"audio/webm\" })\n        const fileName = `Enregistrement_${new Date().toLocaleTimeString(\"fr-FR\")}.webm`\n        // Upload audio vers Supabase Storage\n        const filePath = `${Date.now()}_${Math.random().toString(36).substr(2, 9)}.webm`\n        const { error } = await supabase.storage.from('media').upload(filePath, blob, { upsert: false })\n        if (error) {\n          alert(\"Erreur lors de l'upload de l'audio : \" + error.message)\n          stream.getTracks().forEach((track) => track.stop())\n          return\n        }\n        const { data } = supabase.storage.from('media').getPublicUrl(filePath)\n        const publicUrl = data.publicUrl\n\n        const mediaFile: MediaFile = {\n          id: Date.now().toString(),\n          type: \"audio\",\n          name: fileName,\n          size: blob.size,\n          url: publicUrl,\n          blob: undefined,\n        }\n\n        onMediaAdd(mediaFile)\n        stream.getTracks().forEach((track) => track.stop())\n        try { onRecordingStop && onRecordingStop(blob) } catch {}\n      }\n\n      mediaRecorderRef.current = mediaRecorder\n      mediaRecorder.start()\n      setIsRecording(true)\n      setRecordingTime(0)\n      try { onRecordingStart && onRecordingStart() } catch {}\n\n      recordingIntervalRef.current = setInterval(() => {\n        setRecordingTime((prev) => {\n          const next = prev + 1\n          try { onRecordingTimeTick && onRecordingTimeTick(next) } catch {}\n          return next\n        })\n      }, 1000)\n    } catch (error) {\n      console.error(\"Error starting recording:\", error)\n      alert(\"Impossible d'accéder au microphone\")\n    }\n  }\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop()\n      setIsRecording(false)\n      setRecordingTime(0)\n\n      if (recordingIntervalRef.current) {\n        clearInterval(recordingIntervalRef.current)\n      }\n    }\n  }\n\n  useImperativeHandle(ref, () => ({\n    startAudioRecording: startRecording,\n    stopAudioRecording: stopRecording,\n    getRecordingState: () => isRecording,\n    getRecordingTime: () => recordingTime,\n  }), [isRecording, recordingTime])\n\n  const playAudio = (mediaFile: MediaFile) => {\n    if (playingAudio === mediaFile.id) {\n      audioRef.current?.pause()\n      setPlayingAudio(null)\n    } else {\n      if (audioRef.current) {\n        audioRef.current.pause()\n      }\n\n      const audio = new Audio(mediaFile.url)\n      audioRef.current = audio\n\n      audio.onended = () => setPlayingAudio(null)\n      audio.play()\n      setPlayingAudio(mediaFile.id)\n    }\n  }\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return \"0 B\"\n    const k = 1024\n    const sizes = [\"B\", \"KB\", \"MB\"]\n    const i = Math.floor(Math.log(bytes) / Math.log(k))\n    return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + \" \" + sizes[i]\n  }\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60)\n    const secs = seconds % 60\n    return `${mins}:${secs.toString().padStart(2, \"0\")}`\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Upload Controls */}\n      <div className=\"flex gap-2 flex-wrap\">\n        <input\n          id={id}\n          ref={fileInputRef}\n          type=\"file\"\n          multiple\n          accept={Array.isArray(acceptedTypes) ? acceptedTypes.join(\",\") : acceptedTypes}\n          onChange={handleFileSelect}\n          className=\"hidden\"\n        />\n\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => fileInputRef.current?.click()}\n          disabled={mediaFiles.length >= maxFiles}\n        >\n          <Upload className=\"h-4 w-4 mr-1\" />\n          Fichier\n        </Button>\n\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => fileInputRef.current?.click()}\n          disabled={mediaFiles.length >= maxFiles}\n        >\n          <Camera className=\"h-4 w-4 mr-1\" />\n          Photo\n        </Button>\n\n        <Button\n          type=\"button\"\n          variant={isRecording ? \"destructive\" : \"outline\"}\n          size=\"sm\"\n          onClick={isRecording ? stopRecording : startRecording}\n          disabled={mediaFiles.length >= maxFiles && !isRecording}\n        >\n          <Mic className=\"h-4 w-4 mr-1\" />\n          {isRecording ? `Arrêter (${formatTime(recordingTime)})` : \"Audio\"}\n        </Button>\n      </div>\n\n      {/* Media Files List */}\n      {mediaFiles.length > 0 && (\n        <div className=\"space-y-2\">\n          {mediaFiles.map((media) => (\n            <Card key={media.id} className=\"p-3\">\n              <div className=\"flex items-center gap-3\">\n                {media.type === \"image\" ? (\n                  <div className=\"relative w-12 h-12 rounded overflow-hidden bg-muted flex-shrink-0\">\n                    <NextImage\n                      src={media.url || \"/placeholder.svg\"}\n                      alt={media.name}\n                      fill\n                      className=\"object-cover\"\n                      sizes=\"48px\"\n                      unoptimized\n                    />\n                  </div>\n                ) : (\n                  <div className=\"w-12 h-12 rounded bg-blue-100 dark:bg-blue-900/20 flex items-center justify-center flex-shrink-0\">\n                    <Mic className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                )}\n\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium truncate\">{media.name}</p>\n                  <div className=\"flex items-center gap-2 mt-1\">\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {media.type === \"image\" ? \"Image\" : \"Audio\"}\n                    </Badge>\n                    <span className=\"text-xs text-muted-foreground\">{formatFileSize(media.size)}</span>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-1\">\n                  {media.type === \"audio\" && (\n                    <Button type=\"button\" variant=\"ghost\" size=\"sm\" onClick={() => playAudio(media)}>\n                      {playingAudio === media.id ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n                    </Button>\n                  )}\n\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => {\n                      const link = document.createElement(\"a\")\n                      link.href = media.url\n                      link.download = media.name\n                      link.click()\n                    }}\n                  >\n                    <Download className=\"h-4 w-4\" />\n                  </Button>\n\n                  <Button type=\"button\" variant=\"ghost\" size=\"sm\" onClick={() => onMediaRemove(media.id)}>\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {mediaFiles.length >= maxFiles && (\n        <p className=\"text-xs text-muted-foreground\">Limite de {maxFiles} fichiers atteinte</p>\n      )}\n    </div>\n  )\n})\n","usedDeprecatedRules":[]},{"filePath":"G:\\Projets\\expenshare\\components\\pages\\home-page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used.","line":6,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowRight' is defined but never used.","line":6,"column":83,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":93},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatCurrency' is defined but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatDate' is defined but never used.","line":14,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2810,2813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2810,2813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4526,4529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4526,4529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5806,5809],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5806,5809],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'expenseChartData' is assigned a value but never used.","line":133,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":133,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'budgetChartData' is assigned a value but never used.","line":136,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":136,"endColumn":24},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":152,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6840,6882],"text":"Vue d&apos;ensemble de vos projets et activités"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6840,6882],"text":"Vue d&lsquo;ensemble de vos projets et activités"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6840,6882],"text":"Vue d&#39;ensemble de vos projets et activités"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6840,6882],"text":"Vue d&rsquo;ensemble de vos projets et activités"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":250,"column":39,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[11248,11286],"text":"Vue d&apos;ensemble des dépenses et budgets"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[11248,11286],"text":"Vue d&lsquo;ensemble des dépenses et budgets"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[11248,11286],"text":"Vue d&#39;ensemble des dépenses et budgets"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[11248,11286],"text":"Vue d&rsquo;ensemble des dépenses et budgets"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":358,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[16505,16534],"text":"Taux d&apos;utilisation du budget:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[16505,16534],"text":"Taux d&lsquo;utilisation du budget:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[16505,16534],"text":"Taux d&#39;utilisation du budget:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[16505,16534],"text":"Taux d&rsquo;utilisation du budget:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":475,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":475,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22572,22575],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22572,22575],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":494,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":494,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23647,23650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23647,23650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":507,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":507,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24437,24440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24437,24440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { TrendingUp, TrendingDown, DollarSign, FileText, Calendar, Folder, Clock, ArrowRight, Eye, EyeOff, Image as ImageIcon, Music, File } from \"lucide-react\"\nimport { useEffect, useState } from \"react\"\nimport NextImage from \"next/image\"\nimport type { CurrencyCode } from \"@/lib/types\"\nimport { normalizeCurrencyCode } from \"@/lib/utils\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\nimport { db } from \"@/lib/database\"\nimport { useGlobalStats, useRecentTransactions } from \"@/hooks/use-database\"\nimport { formatCurrency, formatDate, formatDateRelative } from \"@/lib/utils\"\nimport { CustomPieChart } from \"@/components/charts/pie-chart\"\nimport { Button } from \"@/components/ui/button\"\n// useState déjà importé en haut du fichier via \"use client\" (React hooks)\n\nexport function HomePage() {\n  const [showDetails, setShowDetails] = useState(true)\n  const [preview, setPreview] = useState<{ type: 'image'|'audio'|'text'; content: string; title: string } | null>(null)\n  const [displayCurrency, setDisplayCurrency] = useState<CurrencyCode>(\"EUR\")\n  const [eurToCfa, setEurToCfa] = useState<number>(655.957)\n  const [eurToUsd, setEurToUsd] = useState<number>(1.0)\n  const { stats, isLoading: statsLoading, refetch: refetchStats } = useGlobalStats(displayCurrency)\n  const { transactions, isLoading: transactionsLoading, refetch: refetchTransactions } = useRecentTransactions(10)\n\n  useEffect(() => {\n    // Charger paramètres devise utilisateur\n    const loadCurrency = async () => {\n      try {\n        const storedUser = localStorage.getItem(\"expenshare_user\")\n        if (!storedUser) return\n        const user = JSON.parse(storedUser)\n        // accès direct au module db pour lire settings\n        const settingCurrency = await db.settings.get(`user:${user.id}:currency`)\n        const settingCfa = await db.settings.get(`user:${user.id}:eur_to_cfa`)\n        const settingUsd = await db.settings.get(`user:${user.id}:eur_to_usd`)\n  const normalizedCurrency = normalizeCurrencyCode(settingCurrency?.value)\n  if (normalizedCurrency) setDisplayCurrency(normalizedCurrency)\n        if (settingCfa?.value && !Number.isNaN(Number(settingCfa.value))) setEurToCfa(Number(settingCfa.value))\n        if (settingUsd?.value && !Number.isNaN(Number(settingUsd.value))) setEurToUsd(Number(settingUsd.value))\n  // Rafraîchir les stats après chargement des préférences\n  refetchStats()\n      } catch {}\n    }\n    loadCurrency()\n\n    const onCurrencyChanged = (e: Event) => {\n      const ev = e as CustomEvent<any>\n      if (ev.detail) {\n        if (ev.detail.currency) {\n          const normalized = normalizeCurrencyCode(ev.detail.currency)\n          if (normalized) setDisplayCurrency(normalized)\n        }\n        if (ev.detail.eurToCfa && !Number.isNaN(Number(ev.detail.eurToCfa))) setEurToCfa(Number(ev.detail.eurToCfa))\n        if (ev.detail.eurToUsd && !Number.isNaN(Number(ev.detail.eurToUsd))) setEurToUsd(Number(ev.detail.eurToUsd))\n  // Recharger les stats à chaque changement de devise\n  refetchStats()\n      } else {\n        // Replis: relire depuis DB\n  loadCurrency()\n      }\n    }\n    window.addEventListener('expenshare:currency-changed', onCurrencyChanged)\n    \n    // Écouter les mises à jour de projets pour recharger les données\n    const onProjectUpdated = () => {\n      refetchStats()\n      refetchTransactions()\n    }\n    window.addEventListener('expenshare:project-updated', onProjectUpdated)\n    \n    return () => {\n      window.removeEventListener('expenshare:currency-changed', onCurrencyChanged)\n      window.removeEventListener('expenshare:project-updated', onProjectUpdated)\n    }\n  }, [refetchStats, refetchTransactions])\n\n  const convertAmount = (amountEur: number) => {\n    switch (displayCurrency) {\n      case \"CFA\":\n        return amountEur * eurToCfa\n      case \"USD\":\n        return amountEur * eurToUsd\n      default:\n        return amountEur\n    }\n  }\n\n  const formatAmount = (amount: number) => {\n    const currency = displayCurrency === \"CFA\" ? \"XOF\" : displayCurrency\n    return new Intl.NumberFormat(\"fr-FR\", { style: \"currency\", currency }).format(amount)\n  }\n\n  // Pour l'affichage ligne par ligne, préférer la colonne native de la devise\n  const formatTransactionAmount = (tx: any) => {\n    const currency = displayCurrency === \"CFA\" ? \"XOF\" : displayCurrency\n    let value: number | null = null\n    if (displayCurrency === 'CFA' && tx.amount_cfa != null) value = Number(tx.amount_cfa)\n    else if (displayCurrency === 'USD' && tx.amount_usd != null) value = Number(tx.amount_usd)\n    else if (displayCurrency === 'EUR' && tx.amount_eur != null) value = Number(tx.amount_eur)\n\n    // Repli: convertir depuis EUR si valeur native absente\n    if (value == null) value = convertAmount(Number(tx.amount_eur ?? tx.amount ?? 0))\n    return new Intl.NumberFormat(\"fr-FR\", { style: \"currency\", currency }).format(value)\n  }\n\n  // Affichage des montants aligné sur le paramètre utilisateur (comme l'onglet Stats)\n  // On ignore la devise du projet pour l'affichage Home : l’utilisateur choisit sa devise globale.\n\n  const getBalanceColor = (balance: number) => {\n    if (balance > 0) return \"text-green-600\"\n    if (balance < 0) return \"text-red-600\"\n    return \"text-gray-600\"\n  }\n\n  const getTransactionBgColor = (type: string) => {\n    return type === \"expense\" ? \"bg-red-50 dark:bg-red-950/20\" : \"bg-blue-50 dark:bg-blue-950/20\"\n  }\n  \n  // Fonction pour vérifier si une transaction a toutes les propriétés nécessaires\n  const isValidTransaction = (transaction: any): boolean => {\n    return (\n      transaction &&\n      transaction.id !== undefined &&\n      transaction.amount !== undefined &&\n      transaction.amount !== null &&\n      Number(transaction.amount) > 0\n    )\n  }\n\n  const expenseChartData =\n    stats.totalExpenses > 0 ? [{ name: \"Dépenses\", value: stats.totalExpenses, color: \"#ef4444\" }] : []\n\n  const budgetChartData =\n    stats.totalBudgets > 0 ? [{ name: \"Budgets\", value: stats.totalBudgets, color: \"#3b82f6\" }] : []\n\n  const globalChartData = []\n  if (stats.totalExpenses > 0) {\n    globalChartData.push({ name: \"Dépenses\", value: stats.totalExpenses, color: \"#ef4444\" })\n  }\n  if (stats.totalBudgets > 0) {\n    globalChartData.push({ name: \"Budgets\", value: stats.totalBudgets, color: \"#3b82f6\" })\n  }\n\n  return (\n    <div className=\"p-4 space-y-6\">\n      <div className=\"flex justify-between items-start\">\n        <div className=\"space-y-2\">\n          <h2 className=\"text-2xl font-bold text-foreground\">Tableau de bord</h2>\n          <p className=\"text-muted-foreground\">Vue d'ensemble de vos projets et activités</p>\n        </div>\n      </div>\n\n      {/* Indicateurs globaux */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Dépenses</CardTitle>\n            <TrendingDown className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">\n              {statsLoading ? \"...\" : formatAmount(stats.totalExpenses)}\n            </div>\n            <div className=\"text-xs text-muted-foreground flex items-center gap-1 mt-1\">\n              <span>Tous projets confondus</span>\n              {!statsLoading && stats.transactionCount > 0 && (\n                <Badge variant=\"outline\" className=\"ml-1 text-xs\">\n                  {stats.transactionCount} transaction{stats.transactionCount > 1 ? 's' : ''}\n                </Badge>\n              )}\n            </div>\n          </CardContent>\n          {!statsLoading && stats.lastTransactionDate && (\n            <CardFooter className=\"pt-0 pb-2\">\n              <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                <Clock className=\"h-3 w-3\" />\n                <span>Dernière transaction: {formatDateRelative(stats.lastTransactionDate)}</span>\n              </div>\n            </CardFooter>\n          )}\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Budgets</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {statsLoading ? \"...\" : formatAmount(stats.totalBudgets)}\n            </div>\n            <div className=\"text-xs text-muted-foreground flex items-center gap-1 mt-1\">\n              <span>Fonds disponibles</span>\n              {!statsLoading && stats.projectCount > 0 && (\n                <Badge variant=\"outline\" className=\"ml-1 text-xs\">\n                  {stats.projectCount} projet{stats.projectCount > 1 ? 's' : ''}\n                </Badge>\n              )}\n            </div>\n          </CardContent>\n          {!statsLoading && stats.projectCount > 0 && (\n            <CardFooter className=\"pt-0 pb-2\">\n              <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                <Folder className=\"h-3 w-3\" />\n                <span>Moyenne par projet: {formatAmount(stats.totalBudgets / stats.projectCount)}</span>\n              </div>\n            </CardFooter>\n          )}\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Solde Global</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className={`text-2xl font-bold ${getBalanceColor(stats.balance)}`}>\n              {statsLoading ? \"...\" : formatAmount(stats.balance)}\n            </div>\n            <div className=\"text-xs text-muted-foreground mt-1\">\n              Budget - Dépenses\n            </div>\n          </CardContent>\n          {!statsLoading && (\n            <CardFooter className=\"pt-0 pb-2\">\n              <div className=\"flex items-center gap-1 text-xs\">\n                <span className={getBalanceColor(stats.balance)}>\n                  {stats.balance >= 0 ? \"Excédent\" : \"Déficit\"}:\n                </span>\n                <span className=\"text-muted-foreground\">\n                  {Math.abs(stats.totalBudgets) > 0\n                    ? `${Math.abs(Math.round((stats.balance / stats.totalBudgets) * 100))}% du budget`\n                    : \"N/A\"}\n                </span>\n              </div>\n            </CardFooter>\n          )}\n        </Card>\n      </div>\n\n      {!statsLoading && (stats.totalExpenses > 0 || stats.totalBudgets > 0) && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n              <div>\n                <CardTitle>Répartition Globale</CardTitle>\n                <CardDescription>Vue d'ensemble des dépenses et budgets</CardDescription>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <CustomPieChart data={globalChartData} title=\"Dépenses vs Budgets\" size={180} currency={displayCurrency === 'CFA' ? 'XOF' : displayCurrency} />\n            </CardContent>\n          </Card>\n\n          {/* Indicateurs Visuels dans la 2e colonne */}\n          <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <div>\n              <CardTitle>Indicateurs Visuels</CardTitle>\n              <CardDescription>Représentation graphique des totaux</CardDescription>\n            </div>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => setShowDetails(!showDetails)}\n              className=\"h-8 gap-1\"\n            >\n              {showDetails ? <EyeOff className=\"h-3.5 w-3.5\" /> : <Eye className=\"h-3.5 w-3.5\" />}\n              {showDetails ? \"Moins de détails\" : \"Plus de détails\"}\n            </Button>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {stats.totalExpenses > 0 && (\n              <div>\n                <div className=\"flex justify-between items-center mb-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-sm font-medium\">Dépenses</span>\n                    {showDetails && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {Math.round((stats.totalExpenses / Math.max(1, stats.totalExpenses + stats.totalBudgets)) * 100)}% du total\n                      </Badge>\n                    )}\n                  </div>\n                  <span className=\"text-sm text-red-600\">{formatAmount(stats.totalExpenses)}</span>\n                </div>\n                <div className=\"w-full bg-red-100 rounded-full h-2.5\">\n                  <div\n                    className=\"bg-red-500 h-2.5 rounded-full\"\n                    style={{\n                      width: `${Math.min(100, (stats.totalExpenses / Math.max(stats.totalBudgets, stats.totalExpenses)) * 100)}%`,\n                    }}\n                  ></div>\n                </div>\n                {showDetails && stats.transactionCount > 0 && (\n                  <div className=\"flex justify-between items-center mt-1\">\n                    <span className=\"text-xs text-muted-foreground\">Moyenne par transaction</span>\n                    <span className=\"text-xs font-medium\">{formatAmount((stats.totalExpenses) / Math.max(1, stats.transactionCount))}</span>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {stats.totalBudgets > 0 && (\n              <div>\n                <div className=\"flex justify-between items-center mb-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-sm font-medium\">Budgets</span>\n                    {showDetails && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {Math.round((stats.totalBudgets / Math.max(1, stats.totalExpenses + stats.totalBudgets)) * 100)}% du total\n                      </Badge>\n                    )}\n                  </div>\n                  <span className=\"text-sm text-blue-600\">{formatAmount(stats.totalBudgets)}</span>\n                </div>\n                <div className=\"w-full bg-blue-100 rounded-full h-2.5\">\n                  <div\n                    className=\"bg-blue-500 h-2.5 rounded-full\"\n                    style={{\n                      width: `${Math.min(100, (stats.totalBudgets) / Math.max(stats.totalBudgets, stats.totalExpenses) * 100)}%`,\n                    }}\n                  ></div>\n                </div>\n                {showDetails && stats.projectCount > 0 && (\n                  <div className=\"flex justify-between items-center mt-1\">\n                    <span className=\"text-xs text-muted-foreground\">Moyenne par projet</span>\n                    <span className=\"text-xs font-medium\">{formatAmount((stats.totalBudgets) / Math.max(1, stats.projectCount))}</span>\n                  </div>\n                )}\n              </div>\n            )}\n\n            <div className=\"pt-2 border-t\">\n              <div className=\"flex justify-between items-center\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-sm font-medium\">Solde</span>\n                  {showDetails && stats.totalBudgets > 0 && (\n                    <Badge \n                      variant={stats.balance >= 0 ? \"default\" : \"destructive\"}\n                      className=\"text-xs\"\n                    >\n                      {stats.balance >= 0 ? \"Excédent\" : \"Déficit\"}\n                    </Badge>\n                  )}\n                </div>\n                <span className={`text-sm font-bold ${getBalanceColor(stats.balance)}`}>\n                  {formatAmount(stats.balance)}\n                </span>\n              </div>\n              \n              {showDetails && (\n                <div className=\"mt-2 p-2 bg-muted/50 rounded-md\">\n                  <div className=\"text-xs\">\n                    <div className=\"flex justify-between mb-1\">\n                      <span>Taux d'utilisation du budget:</span>\n                      <span className=\"font-medium\">\n                        {stats.totalBudgets > 0 \n                          ? `${Math.min(100, Math.round((stats.totalExpenses / Math.max(1, stats.totalBudgets)) * 100))}%` \n                          : \"N/A\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Marge restante:</span>\n                      <span className={`font-medium ${getBalanceColor(stats.balance)}`}>\n                        {formatAmount(stats.balance)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n        </div>\n      )}\n\n      {/* Dernières saisies */}\n      <Card>\n                  <CardHeader className=\"pb-3\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <CardTitle>Dernières saisies</CardTitle>\n                <CardDescription>Activité récente sur tous vos projets</CardDescription>\n              </div>\n              {/* Boutons supprimés selon la demande */}\n            </div>\n          </CardHeader>\n        <CardContent>\n          {transactionsLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n              <p className=\"mt-2 text-sm text-muted-foreground\">Chargement des transactions...</p>\n            </div>\n          ) : transactions.filter(isValidTransaction).length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <p>Aucune saisie pour le moment</p>\n              <p className=\"text-sm\">Commencez par créer un projet et ajouter des dépenses</p>\n              <div className=\"flex gap-2 justify-center mt-4\">\n                <Button variant=\"outline\">\n                  Créer une saisie\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Type</TableHead>\n                    <TableHead>Titre</TableHead>\n                    <TableHead>Catégorie</TableHead>\n                    <TableHead>Sous-catégorie</TableHead>\n                    <TableHead>Montant</TableHead>\n                    <TableHead>Projet</TableHead>\n                    <TableHead>Utilisateur</TableHead>\n                    <TableHead>Note</TableHead>\n                    <TableHead>Date</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {transactions\n                    .filter(isValidTransaction)\n                    .map((transaction) => (\n                    <TableRow key={transaction.id} className={getTransactionBgColor(transaction.type)}>\n                      <TableCell>\n                        <Badge variant={transaction.type === \"expense\" ? \"destructive\" : \"default\"}>\n                          {transaction.type === \"expense\" ? \"Dépense\" : \"Budget\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"font-medium\">\n                        {transaction.parent_category_name && transaction.category_name\n                          ? `${transaction.parent_category_name}/${transaction.category_name}`\n                          : (transaction.category_name || transaction.title || \"—\")}\n                      </TableCell>\n                      <TableCell className=\"font-medium\">\n                        {transaction.parent_category_name || transaction.category_name || \"-\"}\n                      </TableCell>\n                      <TableCell>\n                        {transaction.parent_category_name ? transaction.category_name : \"\"}\n                      </TableCell>\n                      <TableCell className=\"font-medium\">\n                        <span className={transaction.type === \"expense\" ? \"text-red-600\" : \"text-blue-600\"}>\n                          {formatTransactionAmount(transaction)}\n                        </span>\n                      </TableCell>\n                      <TableCell className=\"max-w-[120px] truncate\">\n                        <div className=\"flex items-center gap-1.5\">\n                          <span className=\"text-lg leading-none\">{transaction.project_icon || \"📁\"}</span>\n                          <span>{transaction.project_name}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>{transaction.user_name}</TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          {/* Icône texte si description présente (texte pur uniquement) */}\n                          {transaction.description && typeof transaction.description === 'string' && !/^data:.+;base64,/.test(transaction.description) && (\n                            <button\n                              className=\"p-1 hover:bg-muted rounded\"\n                              title=\"Voir la note\"\n                              onClick={() => setPreview({ type: 'text', content: String(transaction.description), title: 'Note' })}\n                            >\n                              <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                            </button>\n                          )}\n                          {/* Icônes issues de la table notes (document/image/audio) */}\n                          {transaction.has_document && (\n                            <button\n                              className=\"p-1 hover:bg-muted rounded\"\n                              title=\"Voir le document\"\n                              onClick={async () => {\n                                const notes = await db.getNotesByTransaction(transaction.id)\n                                const doc = notes.find((n: any) => n.content_type === 'text' && n.file_path)\n                                if (doc) {\n                                  // Ouvrir la data URL (pdf/doc) dans un nouvel onglet si possible\n                                  const url = doc.content\n                                  if (typeof window !== 'undefined') {\n                                    window.open(url, '_blank')\n                                  }\n                                }\n                              }}\n                            >\n                              <File className=\"h-4 w-4 text-purple-600\" />\n                            </button>\n                          )}\n                          {transaction.has_image && (\n                            <button\n                              className=\"p-1 hover:bg-muted rounded\"\n                              title=\"Voir l'image\"\n                              onClick={async () => {\n                                const notes = await db.getNotesByTransaction(transaction.id)\n                                const img = notes.find((n: any) => n.content_type === 'image')\n                                if (img) setPreview({ type: 'image', content: img.content, title: img.file_path || 'Image' })\n                              }}\n                            >\n                              <ImageIcon className=\"h-4 w-4 text-blue-500\" />\n                            </button>\n                          )}\n                          {transaction.has_audio && (\n                            <button\n                              className=\"p-1 hover:bg-muted rounded\"\n                              title=\"Écouter l'audio\"\n                              onClick={async () => {\n                                const notes = await db.getNotesByTransaction(transaction.id)\n                                const audio = notes.find((n: any) => n.content_type === 'audio')\n                                if (audio) setPreview({ type: 'audio', content: audio.content, title: audio.file_path || 'Audio' })\n                              }}\n                            >\n                              <Music className=\"h-4 w-4 text-green-600\" />\n                            </button>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {transaction.created_at ? new Date(transaction.created_at).toLocaleString('fr-FR') : ''}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n        {transactions.length > 0 && (\n          <CardFooter className=\"flex justify-between items-center py-2 border-t\">\n            <p className=\"text-xs text-muted-foreground\">\n              Affichage des {transactions.length} dernières transactions\n            </p>\n          </CardFooter>\n        )}\n      </Card>\n      {/* Preview Dialog */}\n      <Dialog open={!!preview} onOpenChange={(open) => !open && setPreview(null)}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>{preview?.title || 'Aperçu'}</DialogTitle>\n          </DialogHeader>\n          {preview?.type === 'text' && (\n            <div className=\"whitespace-pre-wrap text-sm\">{preview.content}</div>\n          )}\n          {preview?.type === 'image' && (\n            <div className=\"relative w-full h-80 max-h-[65vh]\">\n              <NextImage\n                src={preview.content}\n                alt={preview?.title ?? \"Aperçu image\"}\n                fill\n                className=\"object-contain rounded border\"\n                sizes=\"(max-width: 640px) 100vw, 512px\"\n                unoptimized\n              />\n            </div>\n          )}\n          {preview?.type === 'audio' && (\n            <audio controls src={preview.content} className=\"w-full\" />\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"G:\\Projets\\expenshare\\components\\pages\\input-page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CategoryForm' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showCategoryForm' is assigned a value but never used.","line":17,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setShowCategoryForm' is assigned a value but never used.","line":17,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isReady' is assigned a value but never used.","line":21,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1762,1765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1762,1765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2038,2041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2038,2041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleCategorySuccess' is assigned a value but never used.","line":65,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3699,3702],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3699,3702],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":96,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5266,5269],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5266,5269],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'openCategoryForm' is assigned a value but never used.","line":170,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":25},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":216,"column":24,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7995,8083],"text":"\n                Créez d&apos;abord un projet pour pouvoir saisir des dépenses\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7995,8083],"text":"\n                Créez d&lsquo;abord un projet pour pouvoir saisir des dépenses\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7995,8083],"text":"\n                Créez d&#39;abord un projet pour pouvoir saisir des dépenses\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7995,8083],"text":"\n                Créez d&rsquo;abord un projet pour pouvoir saisir des dépenses\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Plus, FolderPlus, Settings, Pencil, X } from \"lucide-react\"\nimport { ProjectForm } from \"@/components/forms/project-form\"\nimport { TransactionForm } from \"@/components/forms/transaction-form\"\nimport { CategoryForm } from \"@/components/forms/category-form\"\nimport { ProjectSettingsForm } from \"@/components/forms/project-settings-form\"\nimport { useUserProjects, useDatabase } from \"@/hooks/use-database\"\n\nexport function InputPage() {\n  const [showProjectForm, setShowProjectForm] = useState(false)\n  const [showTransactionForm, setShowTransactionForm] = useState(false)\n  const [showCategoryForm, setShowCategoryForm] = useState(false)\n  const [showProjectSettings, setShowProjectSettings] = useState(false)\n  const [selectedProjectForCategories, setSelectedProjectForCategories] = useState<number | null>(null)\n  const [selectedProjectForSettings, setSelectedProjectForSettings] = useState<number | null>(null)\n  const { db, isReady } = useDatabase()\n  // États pour l’éditeur des transactions (devise projet)\n  const [editDisplayCurrency, setEditDisplayCurrency] = useState<\"EUR\"|\"CFA\"|\"USD\">(\"EUR\")\n  const [editEurToCfa, setEditEurToCfa] = useState<number>(655.957)\n  const [editEurToUsd, setEditEurToUsd] = useState<number>(1.0)\n  const [editingProjectId, setEditingProjectId] = useState<number | null>(null)\n  const [editPage, setEditPage] = useState(1)\n  const [editPageSize] = useState(5)\n  const [editTotal, setEditTotal] = useState(0)\n  const [editTransactions, setEditTransactions] = useState<any[]>([])\n  const [isLoadingEdits, setIsLoadingEdits] = useState(false)\n  const [userId, setUserId] = useState<number | null>(null)\n  const [editTab, setEditTab] = useState<'transactions' | 'categories'>('transactions')\n  const [editCategories, setEditCategories] = useState<any[]>([])\n  const [editingProjectName, setEditingProjectName] = useState<string>(\"\")\n\n  const { projects, isLoading, refetch } = useUserProjects(userId)\n\n  useEffect(() => {\n    const storedUser = localStorage.getItem(\"expenshare_user\")\n    if (storedUser) {\n      const userData = JSON.parse(storedUser)\n      setUserId(userData.id)\n    }\n\n    // Écouter les mises à jour de projets\n    const onProjectUpdated = () => {\n      void refetch()\n    }\n    window.addEventListener('expenshare:project-updated', onProjectUpdated)\n\n    return () => {\n      window.removeEventListener('expenshare:project-updated', onProjectUpdated)\n    }\n  }, [refetch])\n\n  const handleProjectSuccess = () => {\n    refetch()\n  }\n\n  const handleTransactionSuccess = () => {\n    // Refresh data if needed\n  }\n\n  const handleCategorySuccess = () => {\n    // Géré par handleProjectSettingsSuccess\n    refetch()\n  }\n\n  const handleProjectSettingsSuccess = () => {\n    refetch()\n  }\n\n  const openEditTransactions = async (projectId: number) => {\n    setEditingProjectId(projectId)\n    // Déterminer le nom du projet pour un titre plus parlant\n    const project = projects.find((candidate) => candidate.id === projectId)\n    setEditingProjectName(project?.name ?? `Projet #${projectId}`)\n    setEditPage(1)\n    setEditTab('transactions')\n    await loadEditCurrency(projectId)\n    await loadEditPage(projectId, 1)\n    await loadEditCategories(projectId)\n  }\n\n  const loadEditPage = async (projectId: number, page: number) => {\n    if (!db) return\n    setIsLoadingEdits(true)\n    try {\n      const all = await db.getProjectTransactions(projectId)\n      const onlyMine = (all || []).filter((t: any) => String(t.user_id) === String(userId))\n      setEditTotal(onlyMine.length)\n      const start = (page - 1) * editPageSize\n      const end = start + editPageSize\n      setEditTransactions(onlyMine.slice(start, end))\n    } catch (e) {\n      // ignore\n    } finally {\n      setIsLoadingEdits(false)\n    }\n  }\n\n  const deleteLine = async (txId: number) => {\n    if (!db || !editingProjectId) return\n    const ok = await db.deleteTransaction(txId)\n    if (ok) {\n      await loadEditPage(editingProjectId, editPage)\n      // rafraîchir la liste des projets/statistiques si nécessaire\n      try {\n        window.dispatchEvent(new CustomEvent('expenshare:project-updated'))\n      } catch {}\n    }\n  }\n\n  const loadEditCategories = async (projectId: number) => {\n    if (!db) return\n    try {\n      const cats = await db.getProjectCategories(projectId)\n      setEditCategories(cats || [])\n    } catch {}\n  }\n\n  const deleteCategory = async (catId: number) => {\n    if (!db || !editingProjectId) return\n    const ok = await db.deleteCategory(catId, editingProjectId)\n    if (ok) {\n      await loadEditCategories(editingProjectId)\n      try {\n        window.dispatchEvent(new CustomEvent('expenshare:project-updated'))\n      } catch {}\n    }\n  }\n\n  // Charger devise et taux du projet pour l’éditeur\n  const loadEditCurrency = async (projectId: number) => {\n    try {\n      if (!db) return\n      const proj = await db.getProjectById(projectId)\n      if (proj?.currency) {\n        const c = String(proj.currency)\n        setEditDisplayCurrency((c === 'XOF' ? 'CFA' : c) as any)\n      } else {\n        setEditDisplayCurrency('EUR')\n      }\n      const cfa = await db.settings.get(`project:${projectId}:eur_to_cfa`)\n      const usd = await db.settings.get(`project:${projectId}:eur_to_usd`)\n      if (cfa?.value && !Number.isNaN(Number(cfa.value))) setEditEurToCfa(Number(cfa.value))\n      if (usd?.value && !Number.isNaN(Number(usd.value))) setEditEurToUsd(Number(usd.value))\n    } catch {\n      // silencieux\n    }\n  }\n\n  const convertEditAmount = (amountEur: number) => {\n    switch (editDisplayCurrency) {\n      case 'CFA':\n        return amountEur * editEurToCfa\n      case 'USD':\n        return amountEur * editEurToUsd\n      default:\n        return amountEur\n    }\n  }\n  const formatEditAmount = (amountEur: number) => {\n    const currency = editDisplayCurrency === 'CFA' ? 'XOF' : editDisplayCurrency\n    const value = convertEditAmount(amountEur)\n    return new Intl.NumberFormat('fr-FR', { style: 'currency', currency }).format(value)\n  }\n\n  const openCategoryForm = (projectId: number) => {\n    // Ouvrir directement les paramètres du projet avec l'onglet catégories activé\n    setSelectedProjectForCategories(projectId)\n    setSelectedProjectForSettings(projectId)\n    setShowProjectSettings(true)\n  }\n  \n  const openProjectSettings = (projectId: number) => {\n    setSelectedProjectForSettings(projectId)\n    setShowProjectSettings(true)\n  }\n\n  return (\n    <div className=\"p-4 space-y-6\">\n      <div className=\"space-y-2\">\n        <h2 className=\"text-2xl font-bold text-foreground\">Saisie</h2>\n        <p className=\"text-muted-foreground\">Ajoutez des dépenses, budgets et projets</p>\n      </div>\n\n      <div className=\"grid gap-4\">\n        {/* Nouveau Projet */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FolderPlus className=\"h-5 w-5\" />\n              Nouveau Projet\n            </CardTitle>\n            <CardDescription>Créez un nouveau projet pour organiser vos dépenses</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button className=\"w-full\" onClick={() => setShowProjectForm(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Créer un projet\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Saisie de dépenses/budgets */}\n        <Card className={projects.length === 0 ? \"opacity-50\" : \"\"}>\n          <CardHeader>\n            <CardTitle>Saisie de dépenses/budgets</CardTitle>\n            <CardDescription>Ajoutez des transactions à vos projets existants</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {projects.length === 0 ? (\n              <p className=\"text-sm text-muted-foreground text-center py-4\">\n                Créez d'abord un projet pour pouvoir saisir des dépenses\n              </p>\n            ) : (\n              <Button className=\"w-full\" onClick={() => setShowTransactionForm(true)}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Nouvelle transaction\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Gestion des projets existants */}\n        {projects.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings className=\"h-5 w-5\" />\n                Gestion des Projets\n              </CardTitle>\n              <CardDescription>Configurez vos projets existants et leurs catégories</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {isLoading ? (\n                <div className=\"text-center py-4\">\n                  <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary mx-auto\"></div>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\n                  {projects.map((project) => (\n                    <div key={project.id} className=\"border rounded-lg overflow-hidden hover:bg-accent/50 transition-colors h-full flex flex-col\">\n                      <div \n                        className=\"p-4 flex items-center gap-3 cursor-pointer flex-grow\" \n                        onClick={() => setShowTransactionForm(true)}\n                      >\n                        <div className=\"flex-shrink-0 h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center\">\n                          <span className=\"text-2xl\">{project.icon}</span>\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <h4 className=\"font-medium truncate\">{project.name}</h4>\n                          {project.description && (\n                            <p className=\"text-sm text-muted-foreground line-clamp-2\">{project.description}</p>\n                          )}\n                          <Badge variant=\"outline\" className=\"mt-1\">\n                            {project.role}\n                          </Badge>\n                        </div>\n                      </div>\n                      <div className=\"p-3 pt-0\">\n                        <div className=\"grid grid-cols-2 gap-2\">\n                          <Button variant=\"outline\" size=\"sm\" onClick={() => openProjectSettings(project.id)} className=\"w-full\">\n                            <Settings className=\"h-4 w-4 mr-1\" />\n                            Paramètres\n                          </Button>\n                          <Button variant=\"secondary\" size=\"sm\" onClick={() => openEditTransactions(project.id)} className=\"w-full\">\n                            <Pencil className=\"h-4 w-4 mr-1\" />\n                            Modifier\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Forms */}\n      <ProjectForm\n        isOpen={showProjectForm}\n        onClose={() => setShowProjectForm(false)}\n        onSuccess={handleProjectSuccess}\n      />\n\n      <TransactionForm\n        isOpen={showTransactionForm}\n        onClose={() => setShowTransactionForm(false)}\n        onSuccess={handleTransactionSuccess}\n      />\n\n      {/* Nous n'avons plus besoin de ce composant séparé pour les catégories car nous utilisons l'onglet catégories des paramètres */}\n\n      {selectedProjectForSettings && (\n        <ProjectSettingsForm \n          isOpen={showProjectSettings}\n          onClose={() => {\n            setShowProjectSettings(false)\n            setSelectedProjectForSettings(null)\n          }}\n          onSuccess={handleProjectSettingsSuccess}\n          projectId={selectedProjectForSettings}\n          activeTab={selectedProjectForCategories ? \"categories\" : \"general\"}\n        />\n      )}\n\n      {/* Panneau de modification des transactions */}\n      {editingProjectId && (\n        <div className=\"fixed inset-0 bg-black/40 z-40 flex items-end sm:items-center justify-center\">\n          <div className=\"bg-background w-full sm:max-w-2xl sm:rounded-lg shadow-lg p-4 max-h-[80vh] overflow-auto\">\n            <div className=\"flex items-start justify-between mb-3\">\n              <div>\n                <h3 className=\"text-lg font-semibold\">Modifier — {editingProjectName}</h3>\n                <div className=\"mt-2 w-full\">\n                  <div className=\"grid w-full grid-cols-2 rounded-md border border-border overflow-hidden\">\n                    <button\n                      className={`px-3 py-2 text-sm text-center transition-colors ${editTab === 'transactions' ? 'bg-primary text-primary-foreground' : 'bg-card text-foreground hover:bg-accent'}`}\n                      onClick={() => setEditTab('transactions')}\n                    >Transactions</button>\n                    <button\n                      className={`px-3 py-2 text-sm text-center transition-colors ${editTab === 'categories' ? 'bg-primary text-primary-foreground' : 'bg-card text-foreground hover:bg-accent'}`}\n                      onClick={() => setEditTab('categories')}\n                    >Catégories</button>\n                  </div>\n                </div>\n              </div>\n              <Button variant=\"ghost\" size=\"icon\" onClick={() => setEditingProjectId(null)} aria-label=\"Fermer\">\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            {isLoadingEdits ? (\n              <div className=\"text-center py-6\">\n                <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary mx-auto\"></div>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {editTab === 'transactions' ? (\n                  <>\n                    {editTransactions.length === 0 ? (\n                      <p className=\"text-sm text-muted-foreground\">Aucune transaction</p>\n                    ) : (\n                      <ul className=\"divide-y\">\n                        {editTransactions.map((t) => (\n                          <li key={t.id} className=\"py-2 flex items-center gap-3\">\n                            <div className={`px-2 py-0.5 rounded text-xs ${t.type === 'expense' ? 'bg-red-100 text-red-700' : 'bg-blue-100 text-blue-700'}`}>{t.type}</div>\n                            <div className=\"flex-1 min-w-0\">\n                              <div className=\"text-sm font-medium truncate\">\n                                {t.parent_category_name && t.category_name\n                                  ? `${t.parent_category_name}/${t.category_name}`\n                                  : (t.category_name || t.title || '(sans titre)')}\n                                {` — ${formatEditAmount(Number(t.amount))}`}\n                              </div>\n                              {t.description && <div className=\"text-xs text-muted-foreground truncate\">{t.description}</div>}\n                            </div>\n                            <button aria-label=\"Supprimer\" className=\"text-muted-foreground hover:text-destructive\" onClick={() => deleteLine(t.id)}>\n                              <X className=\"h-4 w-4\" />\n                            </button>\n                          </li>\n                        ))}\n                      </ul>\n                    )}\n                    {/* Pagination */}\n                    {editTotal > editPageSize && (\n                      <div className=\"flex items-center justify-between pt-2\">\n                        <span className=\"text-xs text-muted-foreground\">Page {editPage} / {Math.max(1, Math.ceil(editTotal / editPageSize))}</span>\n                        <div className=\"flex gap-2\">\n                          <Button variant=\"outline\" size=\"sm\" disabled={editPage <= 1} onClick={() => { const p = editPage - 1; setEditPage(p); loadEditPage(editingProjectId!, p); }}>Précédent</Button>\n                          <Button variant=\"outline\" size=\"sm\" disabled={editPage >= Math.ceil(editTotal / editPageSize)} onClick={() => { const p = editPage + 1; setEditPage(p); loadEditPage(editingProjectId!, p); }}>Suivant</Button>\n                        </div>\n                      </div>\n                    )}\n                  </>\n                ) : (\n                  <>\n                    {editCategories.length === 0 ? (\n                      <p className=\"text-sm text-muted-foreground\">Aucune catégorie</p>\n                    ) : (\n                      <ul className=\"divide-y\">\n                        {(() => {\n                          // Construire l'ensemble des parents pour déduire les feuilles\n                          const parents = new Set<number>()\n                          for (const cat of editCategories) {\n                            if (cat.parent_id != null) parents.add(Number(cat.parent_id))\n                          }\n                          const leaves = editCategories.filter(cat => !parents.has(Number(cat.id)))\n                          return leaves.map((c) => (\n                            <li key={c.id} className=\"py-2 flex items-center gap-3\">\n                              <div className=\"flex-1 min-w-0\">\n                                <div className=\"text-sm font-medium truncate\">\n                                  {c.parent_id ? `${(editCategories.find((x) => x.id === c.parent_id)?.name) || 'Parent'}/${c.name}` : c.name}\n                                </div>\n                              </div>\n                              <button aria-label=\"Supprimer\" className=\"text-muted-foreground hover:text-destructive\" onClick={() => deleteCategory(c.id)}>\n                                <X className=\"h-4 w-4\" />\n                              </button>\n                            </li>\n                          ))\n                        })()}\n                      </ul>\n                    )}\n                  </>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"G:\\Projets\\expenshare\\components\\pages\\stats-page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1345,1348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1345,1348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4205,4208],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4205,4208],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5856,5859],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5856,5859],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6460,6463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6460,6463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6468,6471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6468,6471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":160,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7165,7168],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7165,7168],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":296,"column":50,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[12886,12900],"text":"Vue d&apos;ensemble"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[12886,12900],"text":"Vue d&lsquo;ensemble"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[12886,12900],"text":"Vue d&#39;ensemble"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[12886,12900],"text":"Vue d&rsquo;ensemble"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":312,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":312,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13706,13709],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13706,13709],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":317,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":317,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14000,14003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14000,14003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":334,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":334,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14651,14654],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14651,14654],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":355,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":355,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15544,15547],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15544,15547],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":360,"column":100,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[15785,15847],"text":"Ajoutez des catégories et des transactions pour voir l&apos;analyse"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[15785,15847],"text":"Ajoutez des catégories et des transactions pour voir l&lsquo;analyse"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[15785,15847],"text":"Ajoutez des catégories et des transactions pour voir l&#39;analyse"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[15785,15847],"text":"Ajoutez des catégories et des transactions pour voir l&rsquo;analyse"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":381,"column":89,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[16794,16848],"text":"Ajoutez des dépenses ou budgets pour voir l&apos;historique"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[16794,16848],"text":"Ajoutez des dépenses ou budgets pour voir l&lsquo;historique"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[16794,16848],"text":"Ajoutez des dépenses ou budgets pour voir l&#39;historique"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[16794,16848],"text":"Ajoutez des dépenses ou budgets pour voir l&rsquo;historique"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":442,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":442,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20694,20697],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20694,20697],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":458,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":458,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21723,21726],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21723,21726],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":471,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":471,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22617,22620],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22617,22620],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect, useMemo, useCallback } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { BarChart3, TrendingUp, TrendingDown, DollarSign, FileText, Image as ImageIcon, Music, File } from \"lucide-react\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\nimport { useUserProjects, useProjectStats } from \"@/hooks/use-database\"\nimport { formatDate, normalizeCurrencyCode } from \"@/lib/utils\"\nimport { CustomPieChart } from \"@/components/charts/pie-chart\"\nimport { HierarchicalPieChart } from \"@/components/charts/hierarchical-pie-chart\"\nimport { db } from \"@/lib/database\"\nimport NextImage from \"next/image\"\nimport type { CurrencyCode } from \"@/lib/types\"\n\nexport function StatsPage() {\n  const [selectedProjectId, setSelectedProjectId] = useState<string>(\"\")\n  const [userId, setUserId] = useState<number | null>(null)\n  const [categoryHierarchy, setCategoryHierarchy] = useState<any[]>([])\n  const [preview, setPreview] = useState<{ type: 'image'|'audio'|'text'; content: string; title: string } | null>(null)\n  // Devise projet + taux\n  const [displayCurrency, setDisplayCurrency] = useState<CurrencyCode>(\"EUR\")\n  const [eurToCfa, setEurToCfa] = useState<number>(655.957)\n  const [eurToUsd, setEurToUsd] = useState<number>(1.0)\n\n  // Get user ID\n  useEffect(() => {\n    const storedUser = localStorage.getItem(\"expenshare_user\")\n    if (storedUser) {\n      const userData = JSON.parse(storedUser)\n      setUserId(userData.id)\n    }\n  }, [])\n\n  const { projects, isLoading: projectsLoading } = useUserProjects(userId)\n  const { stats, isLoading: statsLoading } = useProjectStats(selectedProjectId ? Number.parseInt(selectedProjectId) : 0, displayCurrency === 'CFA' ? 'CFA' : displayCurrency)\n\n  // Sélectionner automatiquement le premier projet si aucun n'est sélectionné\n  useEffect(() => {\n    if (!projectsLoading && projects.length > 0 && !selectedProjectId) {\n      setSelectedProjectId(projects[0].id.toString())\n    }\n  }, [projectsLoading, projects, selectedProjectId])\n  const loadCategoryHierarchy = useCallback(\n    async (projectId: number) => {\n      try {\n        const cur: CurrencyCode = displayCurrency === 'CFA' ? 'CFA' : displayCurrency\n        const hierarchy = await db.getProjectCategoryHierarchy(projectId, cur)\n        setCategoryHierarchy(hierarchy)\n      } catch (error) {\n        console.error(\"Failed to load category hierarchy:\", error)\n      }\n    },\n    [displayCurrency],\n  )\n\n  // Charger devise + taux pour le projet\n  const loadProjectCurrency = useCallback(async (projectId: number) => {\n    try {\n      const proj = await db.getProjectById(projectId)\n      if (proj?.currency) {\n        const normalizedCurrency = normalizeCurrencyCode(proj.currency)\n        if (normalizedCurrency) {\n          setDisplayCurrency(normalizedCurrency)\n        }\n      }\n      const cfa = await db.settings.get(`project:${projectId}:eur_to_cfa`)\n      const usd = await db.settings.get(`project:${projectId}:eur_to_usd`)\n      if (cfa?.value && !Number.isNaN(Number(cfa.value))) setEurToCfa(Number(cfa.value))\n      if (usd?.value && !Number.isNaN(Number(usd.value))) setEurToUsd(Number(usd.value))\n    } catch (error) {\n      console.error(\"Failed to load project currency:\", error)\n    }\n  }, [])\n\n  // Load category hierarchy when project changes\n  useEffect(() => {\n    if (selectedProjectId) {\n      const projectNumericId = Number.parseInt(selectedProjectId)\n      void loadCategoryHierarchy(projectNumericId)\n      void loadProjectCurrency(projectNumericId)\n    }\n  }, [loadCategoryHierarchy, loadProjectCurrency, selectedProjectId])\n\n  // Ecouter les changements depuis le formulaire de paramètres projet\n  useEffect(() => {\n    const onProjectCurrencyChanged = (e: Event) => {\n      const ev = e as CustomEvent<any>\n      if (!ev.detail) return\n      if (!selectedProjectId) return\n      if (Number(ev.detail.projectId) !== Number(selectedProjectId)) return\n      if (ev.detail.currency) {\n        const normalizedCurrency = normalizeCurrencyCode(ev.detail.currency)\n        if (normalizedCurrency) {\n          setDisplayCurrency(normalizedCurrency)\n        }\n      }\n      if (ev.detail.eurToCfa && !Number.isNaN(Number(ev.detail.eurToCfa))) setEurToCfa(Number(ev.detail.eurToCfa))\n      if (ev.detail.eurToUsd && !Number.isNaN(Number(ev.detail.eurToUsd))) setEurToUsd(Number(ev.detail.eurToUsd))\n    }\n    window.addEventListener('expenshare:project-currency-changed', onProjectCurrencyChanged)\n    return () => window.removeEventListener('expenshare:project-currency-changed', onProjectCurrencyChanged)\n  }, [selectedProjectId])\n\n  // Recharger la hiérarchie quand la devise change\n  useEffect(() => {\n    if (selectedProjectId) {\n      void loadCategoryHierarchy(Number.parseInt(selectedProjectId))\n    }\n  }, [displayCurrency, loadCategoryHierarchy, selectedProjectId])\n\n  const convertAmount = (amountEur: number) => {\n    switch (displayCurrency) {\n      case \"CFA\":\n        return amountEur * eurToCfa\n      case \"USD\":\n        return amountEur * eurToUsd\n      default:\n        return amountEur\n    }\n  }\n\n  const currencyForIntl = displayCurrency === \"CFA\" ? \"XOF\" : displayCurrency\n  const formatAmount = (amount: number) => {\n    return new Intl.NumberFormat(\"fr-FR\", { style: \"currency\", currency: currencyForIntl }).format(amount)\n  }\n\n  // Affichage ligne par ligne: utiliser la colonne native si disponible\n  const formatTransactionAmount = (tx: any) => {\n    let value: number | null = null\n    if (displayCurrency === 'CFA' && tx.amount_cfa != null) value = Number(tx.amount_cfa)\n    else if (displayCurrency === 'USD' && tx.amount_usd != null) value = Number(tx.amount_usd)\n    else if (displayCurrency === 'EUR' && tx.amount_eur != null) value = Number(tx.amount_eur)\n    if (value == null) value = convertAmount(Number(tx.amount_eur ?? tx.amount ?? 0))\n    return new Intl.NumberFormat(\"fr-FR\", { style: \"currency\", currency: currencyForIntl }).format(value)\n  }\n\n  // La hiérarchie est déjà en devise cible\n  const mapHierarchyValues = (nodes: any[]): any[] => nodes\n\n  const getBalanceColor = (balance: number) => {\n    if (balance > 0) return \"text-green-600\"\n    if (balance < 0) return \"text-red-600\"\n    return \"text-gray-600\"\n  }\n\n  const getTransactionBgColor = (type: string) => {\n    return type === \"expense\" ? \"bg-red-50 dark:bg-red-950/20\" : \"bg-blue-50 dark:bg-blue-950/20\"\n  }\n\n  const selectedProject = projects.find((p) => p.id.toString() === selectedProjectId)\n\n  // Données 'Répartition des Budgets' basées sur les transactions de type budget, étiquetées par titre\n  const budgetsPieData = useMemo(() => {\n    if (!stats || !stats.transactions) return [] as { name: string; value: number; color: string }[]\n\n    const getAmt = (t: any) => {\n      if (displayCurrency === 'CFA') return Number(t.amount_cfa ?? 0)\n      if (displayCurrency === 'USD') return Number(t.amount_usd ?? 0)\n      return Number(t.amount_eur ?? t.amount ?? 0)\n    }\n\n    const map = new Map<string, number>()\n    for (const t of stats.transactions) {\n      if (t.type !== 'budget') continue\n      const key = (typeof t.title === 'string' && t.title.trim().length > 0) ? t.title.trim() : 'Sans titre'\n      const val = getAmt(t)\n      map.set(key, (map.get(key) ?? 0) + val)\n    }\n\n    const colors = [\n      \"#3b82f6\", \"#10b981\", \"#f59e0b\", \"#ef4444\", \"#8b5cf6\", \"#ec4899\",\n      \"#14b8a6\", \"#f97316\", \"#6366f1\", \"#84cc16\", \"#f43f5e\", \"#06b6d4\",\n    ]\n\n    // Ordonner par montant décroissant pour une lecture plus claire\n    const entries = Array.from(map.entries()).sort((a, b) => b[1] - a[1])\n    return entries.map(([name, value], idx) => ({ name, value, color: colors[idx % colors.length] }))\n  }, [stats, displayCurrency])\n\n  if (projectsLoading) {\n    return (\n      <div className=\"p-4 space-y-6\">\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n        </div>\n      </div>\n    )\n  }\n\n  if (projects.length === 0) {\n    return (\n      <div className=\"p-4 space-y-6\">\n        <div className=\"space-y-2\">\n          <h2 className=\"text-2xl font-bold text-foreground\">Statistiques</h2>\n          <p className=\"text-muted-foreground\">Analyses détaillées par projet</p>\n        </div>\n\n        <Card>\n          <CardHeader className=\"text-center\">\n            <BarChart3 className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n            <CardTitle>Aucun projet disponible</CardTitle>\n            <CardDescription>Créez votre premier projet pour voir les statistiques</CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-4 space-y-6\">\n      <div className=\"space-y-2\">\n        <h2 className=\"text-2xl font-bold text-foreground\">Statistiques</h2>\n        <p className=\"text-muted-foreground\">Analyses détaillées par projet</p>\n      </div>\n\n      {/* Project Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Sélection du Projet</CardTitle>\n          <CardDescription>Choisissez un projet pour voir ses statistiques détaillées</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Select value={selectedProjectId} onValueChange={setSelectedProjectId}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Sélectionnez un projet\" />\n            </SelectTrigger>\n            <SelectContent>\n              {projects.map((project) => (\n                <SelectItem key={project.id} value={project.id.toString()}>\n                  <div className=\"flex items-center gap-2\">\n                    <span>{project.icon}</span>\n                    <span>{project.name}</span>\n                    <Badge variant=\"outline\" className=\"ml-2\">\n                      {project.role}\n                    </Badge>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </CardContent>\n      </Card>\n\n      {/* Project Statistics */}\n      {selectedProjectId && (\n        <>\n          {/* Project Indicators */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card className=\"bg-red-50 dark:bg-red-950/20\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Dépenses</CardTitle>\n                <TrendingDown className=\"h-4 w-4 text-red-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-red-600\">\n                  {statsLoading ? \"...\" : formatAmount(stats.totalExpenses)}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">{selectedProject?.name}</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-blue-50 dark:bg-blue-950/20\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Budgets</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-blue-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {statsLoading ? \"...\" : formatAmount(stats.totalBudgets)}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Fonds disponibles</p>\n              </CardContent>\n            </Card>\n\n            <Card className={stats.balance >= 0 ? \"bg-green-50 dark:bg-green-950/20\" : \"bg-red-50 dark:bg-red-950/20\"}>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Solde</CardTitle>\n                <DollarSign className={`h-4 w-4 ${stats.balance >= 0 ? \"text-green-500\" : \"text-red-500\"}`} />\n              </CardHeader>\n              <CardContent>\n                <div className={`text-2xl font-bold ${getBalanceColor(stats.balance)}`}>\n                  {statsLoading ? \"...\" : formatAmount(stats.balance)}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Budget - Dépenses</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Charts and Analysis */}\n          <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"overview\">Vue d'ensemble</TabsTrigger>\n              <TabsTrigger value=\"categories\">Catégories</TabsTrigger>\n              <TabsTrigger value=\"transactions\">Transactions</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {stats.expensesByCategory.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Répartition des Dépenses</CardTitle>\n                      <CardDescription>Dépenses par catégorie</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <CustomPieChart\n                        data={stats.expensesByCategory.map(d => {\n                          const parent = (d as any).parent as string | undefined\n                          return { ...d, name: parent ? `${parent}/${d.name}` : d.name }\n                        })}\n                        title=\"Dépenses par Catégorie\"\n                        size={200}\n                        currency={currencyForIntl as any}\n                      />\n                    </CardContent>\n                  </Card>\n                )}\n\n                {budgetsPieData.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Répartition des Budgets</CardTitle>\n                      <CardDescription>Budgets par titre</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <CustomPieChart\n                        data={budgetsPieData}\n                        title=\"Budgets par Titre\"\n                        size={200}\n                        currency={currencyForIntl as any}\n                      />\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"categories\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Analyse Hiérarchique des Catégories</CardTitle>\n                  <CardDescription>Explorez vos dépenses par catégorie avec navigation interactive</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {categoryHierarchy.length > 0 ? (\n                    <HierarchicalPieChart\n                      data={mapHierarchyValues(categoryHierarchy)}\n                      onCategoryClick={(categoryId) => {\n                        console.log(\"Category clicked:\", categoryId)\n                      }}\n                      currency={currencyForIntl as any}\n                    />\n                  ) : (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <p>Aucune donnée de catégorie disponible</p>\n                      <p className=\"text-sm\">Ajoutez des catégories et des transactions pour voir l'analyse</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"transactions\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Historique des Transactions</CardTitle>\n                  <CardDescription>Toutes les transactions de ce projet</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {statsLoading ? (\n                    <div className=\"text-center py-8\">\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                    </div>\n                  ) : stats.transactions.length === 0 ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <p>Aucune transaction pour ce projet</p>\n                      <p className=\"text-sm\">Ajoutez des dépenses ou budgets pour voir l'historique</p>\n                    </div>\n                  ) : (\n                    <div className=\"overflow-x-auto\">\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Type</TableHead>\n                            <TableHead>Titre</TableHead>\n                            <TableHead>Catégorie</TableHead>\n                            <TableHead>Sous-catégorie</TableHead>\n                            <TableHead>Montant</TableHead>\n                            <TableHead>Utilisateur</TableHead>\n                            <TableHead>Note</TableHead>\n                            <TableHead>Date</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {stats.transactions.map((transaction) => (\n                            <TableRow key={transaction.id} className={getTransactionBgColor(transaction.type)}>\n                              <TableCell>\n                                <Badge variant={transaction.type === \"expense\" ? \"destructive\" : \"default\"}>\n                                  {transaction.type === \"expense\" ? \"Dépense\" : \"Budget\"}\n                                </Badge>\n                              </TableCell>\n                              <TableCell className=\"font-medium\">\n                                {transaction.parent_category_name && transaction.category_name\n                                  ? `${transaction.parent_category_name}/${transaction.category_name}`\n                                  : (transaction.category_name || transaction.title || '—')}\n                              </TableCell>\n                              <TableCell>\n                                {transaction.type === 'budget'\n                                  ? '-'\n                                  : (transaction.parent_category_name || transaction.category_name || '-')}\n                              </TableCell>\n                              <TableCell>\n                                {transaction.type === 'budget'\n                                  ? '-'\n                                  : (transaction.parent_category_name ? transaction.category_name : '')}\n                              </TableCell>\n                              <TableCell className=\"font-medium\">\n                                {formatTransactionAmount(transaction)}\n                              </TableCell>\n                              <TableCell>{transaction.user_name}</TableCell>\n                              <TableCell>\n                                <div className=\"flex items-center gap-2\">\n                                  {transaction.description && typeof transaction.description === 'string' && !/^data:.+;base64,/.test(transaction.description) && (\n                                    <button\n                                      className=\"p-1 hover:bg-muted rounded\"\n                                      title=\"Voir la note\"\n                                      onClick={() => setPreview({ type: 'text', content: String(transaction.description), title: 'Note' })}\n                                    >\n                                      <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                                    </button>\n                                  )}\n                                  {transaction.has_document && (\n                                    <button\n                                      className=\"p-1 hover:bg-muted rounded\"\n                                      title=\"Voir le document\"\n                                      onClick={async () => {\n                                        const notes = await db.getNotesByTransaction(transaction.id)\n                                        const doc = notes.find((n: any) => n.content_type === 'text' && n.file_path)\n                                        if (doc) {\n                                          const url = doc.content\n                                          if (typeof window !== 'undefined') window.open(url, '_blank')\n                                        }\n                                      }}\n                                    >\n                                      <File className=\"h-4 w-4 text-purple-600\" />\n                                    </button>\n                                  )}\n                                  {transaction.has_image && (\n                                    <button\n                                      className=\"p-1 hover:bg-muted rounded\"\n                                      title=\"Voir l'image\"\n                                      onClick={async () => {\n                                        const notes = await db.getNotesByTransaction(transaction.id)\n                                        const img = notes.find((n: any) => n.content_type === 'image')\n                                        if (img) setPreview({ type: 'image', content: img.content, title: img.file_path || 'Image' })\n                                      }}\n                                    >\n                                      <ImageIcon className=\"h-4 w-4 text-blue-500\" />\n                                    </button>\n                                  )}\n                                  {transaction.has_audio && (\n                                    <button\n                                      className=\"p-1 hover:bg-muted rounded\"\n                                      title=\"Écouter l'audio\"\n                                      onClick={async () => {\n                                        const notes = await db.getNotesByTransaction(transaction.id)\n                                        const audio = notes.find((n: any) => n.content_type === 'audio')\n                                        if (audio) setPreview({ type: 'audio', content: audio.content, title: audio.file_path || 'Audio' })\n                                      }}\n                                    >\n                                      <Music className=\"h-4 w-4 text-green-600\" />\n                                    </button>\n                                  )}\n                                </div>\n                              </TableCell>\n                              <TableCell>{formatDate(transaction.created_at)}</TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Preview Dialog */}\n              <Dialog open={!!preview} onOpenChange={(open) => !open && setPreview(null)}>\n                <DialogContent className=\"sm:max-w-lg\">\n                  <DialogHeader>\n                    <DialogTitle>{preview?.title || 'Aperçu'}</DialogTitle>\n                  </DialogHeader>\n                  {preview?.type === 'text' && (\n                    <div className=\"whitespace-pre-wrap text-sm\">{preview.content}</div>\n                  )}\n                  {preview?.type === 'image' && (\n                    <div className=\"relative w-full h-80 max-h-[65vh]\">\n                      <NextImage\n                        src={preview.content}\n                        alt={preview?.title ?? \"Aperçu image\"}\n                        fill\n                        className=\"object-contain rounded border\"\n                        sizes=\"(max-width: 640px) 100vw, 512px\"\n                        unoptimized\n                      />\n                    </div>\n                  )}\n                  {preview?.type === 'audio' && (\n                    <audio controls src={preview.content} className=\"w-full\" />\n                  )}\n                </DialogContent>\n              </Dialog>\n            </TabsContent>\n          </Tabs>\n        </>\n      )}\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"G:\\Projets\\expenshare\\components\\settings\\user-settings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSupportedCurrency' is defined but never used.","line":14,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useCallback, useEffect, useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Loader2, Trash2, ArrowLeft } from \"lucide-react\"\nimport { useDatabase } from \"@/hooks/use-database\"\nimport type { SupabaseDatabaseInstance } from \"@/lib/database-supabase\"\nimport type { CurrencyCode, ProjectWithId, User } from \"@/lib/types\"\nimport { SUPPORTED_CURRENCIES } from \"@/lib/types\"\nimport { CURRENCY_LABELS, isSupportedCurrency, normalizeCurrencyCode } from \"@/lib/utils\"\n\ninterface UserSettingsProps {\n  isOpen: boolean\n  onClose: () => void\n}\n\ntype ProjectOwner = Pick<User, \"id\" | \"name\">\n\ntype ProjectListItem = ProjectWithId & {\n  owner?: ProjectOwner | null\n}\n\nexport function UserSettings({ isOpen, onClose }: UserSettingsProps) {\n  const { db, isReady } = useDatabase()\n  const database = db as SupabaseDatabaseInstance | null\n  const [projects, setProjects] = useState<ProjectListItem[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [userId, setUserId] = useState<string | null>(null)\n  const [isAdmin, setIsAdmin] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [isDeleting, setIsDeleting] = useState<number | null>(null)\n  const [confirmDelete, setConfirmDelete] = useState<number | null>(null)\n  // Nouveaux états: devise utilisateur et taux de conversion\n  const [currency, setCurrency] = useState<CurrencyCode>(\"EUR\")\n  const [eurToCfa, setEurToCfa] = useState<string>(\"\")\n  const [eurToUsd, setEurToUsd] = useState<string>(\"\")\n  const [savingCurrency, setSavingCurrency] = useState(false)\n\n  const loadUserData = useCallback(async () => {\n    setIsLoading(true)\n\n    if (!database) {\n      setError(\"La base de données n'est pas disponible\")\n      setIsLoading(false)\n      return\n    }\n\n    try {\n      const storedUserRaw =\n        typeof window !== \"undefined\" ? localStorage.getItem(\"expenshare_user\") : null\n\n      if (!storedUserRaw) {\n        setError(\"Utilisateur non connecté\")\n        setIsLoading(false)\n        return\n      }\n\n      let parsedUser: unknown\n      try {\n        parsedUser = JSON.parse(storedUserRaw)\n      } catch {\n        setError(\"Données utilisateur invalides\")\n        setIsLoading(false)\n        return\n      }\n\n      const parsedId = (parsedUser as { id?: unknown })?.id\n      if (typeof parsedId !== \"string\" && typeof parsedId !== \"number\") {\n        setError(\"Identifiant utilisateur introuvable\")\n        setIsLoading(false)\n        return\n      }\n\n      const normalizedUserId = String(parsedId)\n      setUserId(normalizedUserId)\n\n      const adminIdentifier = await database.getAdminUserId()\n      const isUserAdmin = Boolean(adminIdentifier && normalizedUserId === adminIdentifier)\n      setIsAdmin(isUserAdmin)\n\n      let fetchedProjects: ProjectListItem[] = []\n\n      if (isUserAdmin) {\n        const allProjects = await database.projects.toArray()\n        const projectsWithOwner = allProjects\n          .filter((project): project is ProjectWithId => project?.id != null)\n          .map<ProjectListItem>((project) => ({\n            ...project,\n            id: Number(project.id),\n            owner: null,\n          }))\n\n        try {\n          const users = await database.users.toArray()\n          const ownerEntries = users\n            .map((user) => {\n              if (typeof user?.id !== \"string\" || typeof user?.name !== \"string\" || user.name.length === 0) {\n                return null\n              }\n\n              return [String(user.id), { id: String(user.id), name: user.name } as ProjectOwner]\n            })\n            .filter((entry): entry is [string, ProjectOwner] => entry !== null)\n\n          const ownerMap = new Map<string, ProjectOwner>(ownerEntries)\n\n          fetchedProjects = projectsWithOwner.map((project) => ({\n            ...project,\n            owner: ownerMap.get(String(project.created_by)) ?? null,\n          }))\n        } catch (ownerError) {\n          console.error(\"[UserSettings] Unable to load project owners:\", ownerError)\n          fetchedProjects = projectsWithOwner\n        }\n      } else {\n        const ownProjects = await database.projects\n          .where(\"created_by\")\n          .equals(normalizedUserId)\n          .toArray()\n\n        fetchedProjects = ownProjects\n          .filter((project): project is ProjectWithId => project?.id != null)\n          .map<ProjectListItem>((project) => ({\n            ...project,\n            id: Number(project.id),\n            owner: null,\n          }))\n      }\n\n      setProjects(fetchedProjects)\n\n      try {\n        const userCurrency = await database.settings.get(`user:${normalizedUserId}:currency`)\n        const cfaRate = await database.settings.get(`user:${normalizedUserId}:eur_to_cfa`)\n        const usdRate = await database.settings.get(`user:${normalizedUserId}:eur_to_usd`)\n\n  const normalizedCurrency = normalizeCurrencyCode(userCurrency?.value)\n        if (normalizedCurrency) {\n          setCurrency(normalizedCurrency)\n        }\n\n        setEurToCfa(typeof cfaRate?.value === \"string\" ? cfaRate.value : \"\")\n        setEurToUsd(typeof usdRate?.value === \"string\" ? usdRate.value : \"\")\n      } catch (settingsError) {\n        console.error(\"[UserSettings] Failed to load currency settings:\", settingsError)\n      }\n\n      setError(\"\")\n    } catch (error) {\n      console.error(\"[UserSettings] Erreur lors du chargement des données utilisateur:\", error)\n      setError(\"Erreur lors du chargement des projets\")\n    } finally {\n      setIsLoading(false)\n    }\n  }, [database])\n\n  useEffect(() => {\n    if (!isOpen || !isReady || !database) {\n      return\n    }\n\n    void loadUserData()\n  }, [isOpen, isReady, database, loadUserData])\n\n  const saveCurrencySettings = useCallback(async () => {\n    if (!database || !userId) {\n      setError(\"La base de données n'est pas disponible\")\n      return\n    }\n\n    setSavingCurrency(true)\n    try {\n      await database.settings.put({ key: `user:${userId}:currency`, value: currency })\n\n      if (eurToCfa.trim()) {\n        await database.settings.put({ key: `user:${userId}:eur_to_cfa`, value: eurToCfa.trim() })\n      }\n\n      if (eurToUsd.trim()) {\n        await database.settings.put({ key: `user:${userId}:eur_to_usd`, value: eurToUsd.trim() })\n      }\n\n      try {\n        const detail = {\n          currency,\n          eurToCfa: eurToCfa.trim(),\n          eurToUsd: eurToUsd.trim(),\n          userId,\n          updatedAt: Date.now(),\n        }\n        window.dispatchEvent(new CustomEvent(\"expenshare:currency-changed\", { detail }))\n      } catch {\n        // ignore dispatch errors\n      }\n    } catch (error: unknown) {\n      console.error(\"[UserSettings] Failed to save currency settings:\", error)\n      setError(\"Erreur lors de l'enregistrement des paramètres de devise\")\n    } finally {\n      setSavingCurrency(false)\n    }\n  }, [currency, database, eurToCfa, eurToUsd, userId])\n\n  const handleCurrencyChange = useCallback((value: string) => {\n    const normalized = normalizeCurrencyCode(value)\n    if (normalized) {\n      setCurrency(normalized)\n    }\n  }, [])\n\n  const handleDeleteProject = useCallback(\n    async (projectId: number) => {\n      if (!database || !userId) {\n        setError(\"La base de données ou l'utilisateur n'est pas disponible\")\n        return\n      }\n\n      setIsDeleting(projectId)\n      try {\n        await database.transactions.where(\"project_id\").equals(projectId).delete()\n        await database.categories.where(\"project_id\").equals(projectId).delete()\n        await database.project_users.where(\"project_id\").equals(projectId).delete()\n        await database.projects.where(\"id\").equals(projectId).delete()\n\n        setProjects((prev) => prev.filter((project) => project.id !== projectId))\n        setConfirmDelete(null)\n      } catch (error: unknown) {\n        console.error(\"Erreur lors de la suppression du projet:\", error)\n        setError(\"Erreur lors de la suppression du projet\")\n      } finally {\n        setIsDeleting(null)\n      }\n    },\n    [database, userId],\n  )\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            Paramètres utilisateur\n          </DialogTitle>\n          <DialogDescription>\n            Gérez vos projets et paramètres personnels\n          </DialogDescription>\n        </DialogHeader>\n\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        <div className=\"space-y-6\">\n          {/* Paramètres devise utilisateur */}\n          <div>\n            <h3 className=\"text-lg font-medium\">Devise d’affichage</h3>\n            <p className=\"text-sm text-muted-foreground mb-3\">\n              Choisissez votre devise et définissez les taux de conversion (1 € = …)\n            </p>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3 items-end\">\n              <div>\n                <label className=\"text-sm font-medium\">Devise</label>\n                <select\n                  className=\"mt-1 w-full border rounded-md bg-transparent px-3 py-2\"\n                  value={currency}\n                  onChange={(event) => handleCurrencyChange(event.target.value)}\n                >\n                  {SUPPORTED_CURRENCIES.map((code) => (\n                    <option key={code} value={code}>\n                      {CURRENCY_LABELS[code]}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">1 € = (CFA)</label>\n                <input\n                  type=\"number\"\n                  inputMode=\"decimal\"\n                  className=\"mt-1 w-full border rounded-md bg-transparent px-3 py-2\"\n                  placeholder=\"Ex: 655.957\"\n                  value={eurToCfa}\n                  onChange={(e) => setEurToCfa(e.target.value)}\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">1 € = (USD)</label>\n                <input\n                  type=\"number\"\n                  inputMode=\"decimal\"\n                  className=\"mt-1 w-full border rounded-md bg-transparent px-3 py-2\"\n                  placeholder=\"Ex: 1.08\"\n                  value={eurToUsd}\n                  onChange={(e) => setEurToUsd(e.target.value)}\n                />\n              </div>\n            </div>\n            <div className=\"flex justify-end mt-3\">\n              <Button onClick={saveCurrencySettings} disabled={savingCurrency}>\n                {savingCurrency ? \"Enregistrement…\" : \"Enregistrer\"}\n              </Button>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-medium\">{isAdmin ? \"Tous les projets\" : \"Mes projets\"}</h3>\n            <p className=\"text-sm text-muted-foreground mb-2\">\n              {isAdmin\n                ? \"Liste de tous les projets de tous les utilisateurs. Vous pouvez supprimer n’importe quel projet.\"\n                : \"Liste des projets que vous avez créés. Vous pouvez supprimer les projets dont vous êtes propriétaire.\"}\n            </p>\n\n            {isLoading ? (\n              <div className=\"flex justify-center p-4\">\n                <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n              </div>\n            ) : (\n              <>\n                {projects.length === 0 ? (\n                  <div className=\"text-center p-4 border rounded-lg text-muted-foreground\">\n                    {isAdmin\n                      ? \"Aucun projet n’a encore été créé.\"\n                      : \"Vous n’avez pas encore créé de projets.\"}\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {projects.map((project) => (\n                      <Card key={project.id} className=\"overflow-hidden\">\n                        <CardHeader className=\"p-4 pb-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"text-2xl\">{project.icon}</span>\n                              <CardTitle className=\"text-base\">{project.name}</CardTitle>\n                            </div>\n                            <Badge \n                              variant=\"outline\" \n                              style={{ backgroundColor: `${project.color}20`, borderColor: project.color }}\n                            >\n                              {isAdmin && project.owner && project.owner.name\n                                ? `Propriétaire: ${project.owner.name}`\n                                : \"Propriétaire\"}\n                            </Badge>\n                          </div>\n                          {project.description && (\n                            <CardDescription className=\"mt-1 line-clamp-2\">\n                              {project.description}\n                            </CardDescription>\n                          )}\n                        </CardHeader>\n                        <CardContent className=\"p-4 pt-0\">\n                          {confirmDelete === project.id ? (\n                            <div className=\"flex flex-col gap-2\">\n                              <p className=\"text-sm font-medium text-destructive\">\n                                Êtes-vous sûr de vouloir supprimer ce projet ? Cette action est irréversible.\n                              </p>\n                              <div className=\"flex gap-2 justify-end\">\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => setConfirmDelete(null)}\n                                  disabled={isDeleting === project.id}\n                                >\n                                  Annuler\n                                </Button>\n                                <Button\n                                  variant=\"destructive\"\n                                  size=\"sm\"\n                                  onClick={() => handleDeleteProject(project.id)}\n                                  disabled={isDeleting === project.id}\n                                >\n                                  {isDeleting === project.id ? (\n                                    <>\n                                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                      Suppression...\n                                    </>\n                                  ) : (\n                                    \"Confirmer\"\n                                  )}\n                                </Button>\n                              </div>\n                            </div>\n                          ) : (\n                            <div className=\"flex justify-end\">\n                              <Button\n                                variant=\"destructive\"\n                                size=\"sm\"\n                                onClick={() => setConfirmDelete(project.id)}\n                              >\n                                <Trash2 className=\"h-4 w-4 mr-1\" /> \n                                Supprimer\n                              </Button>\n                            </div>\n                          )}\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n\n        <DialogFooter>\n          <Button onClick={onClose} className=\"w-full\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Retour\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"G:\\Projets\\expenshare\\components\\ui\\chart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":131,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3486,3489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3486,3489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4399,4402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4399,4402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":185,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4798,4801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4798,4801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":185,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4816,4819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4816,4819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":263,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":263,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7686,7689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7686,7689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":269,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7835,7838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7835,7838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":281,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8062,8065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8062,8065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":281,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8080,8083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8080,8083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  config: ChartConfig\n  children: React.ComponentProps<\n    typeof RechartsPrimitive.ResponsiveContainer\n  >[\"children\"]\n}) {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nfunction ChartTooltipContent(\n  props: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n) {\n  const {\n    active,\n    payload,\n    className,\n    indicator = \"dot\",\n    hideLabel = false,\n    hideIndicator = false,\n    label,\n    labelFormatter,\n    labelClassName,\n    formatter,\n    color,\n    nameKey,\n    labelKey,\n  } = props as any\n  const { config } = useChart()\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null\n    }\n\n    const [item] = payload\n    const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n    const value =\n      !labelKey && typeof label === \"string\"\n        ? config[label as keyof typeof config]?.label || label\n        : itemConfig?.label\n\n    if (labelFormatter) {\n      return (\n        <div className={cn(\"font-medium\", labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>\n      )\n    }\n\n    if (!value) {\n      return null\n    }\n\n    return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n  }, [\n    label,\n    labelFormatter,\n    payload,\n    hideLabel,\n    labelClassName,\n    config,\n    labelKey,\n  ])\n\n  if (!active || !(payload as any)?.length) {\n    return null\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n  return (\n    <div\n      className={cn(\n        \"border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl\",\n        className\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n  {(payload as any[]).map((item: any, index: number) => {\n          const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n          const indicatorColor = color || item.payload.fill || item.color\n\n          return (\n            <div\n              key={item.dataKey}\n              className={cn(\n                \"[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5\",\n                indicator === \"dot\" && \"items-center\"\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn(\n                          \"shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)\",\n                          {\n                            \"h-2.5 w-2.5\": indicator === \"dot\",\n                            \"w-1\": indicator === \"line\",\n                            \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                              indicator === \"dashed\",\n                            \"my-0.5\": nestLabel && indicator === \"dashed\",\n                          }\n                        )}\n                        style={\n                          {\n                            \"--color-bg\": indicatorColor,\n                            \"--color-border\": indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    className={cn(\n                      \"flex flex-1 justify-between leading-none\",\n                      nestLabel ? \"items-end\" : \"items-center\"\n                    )}\n                  >\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">\n                        {itemConfig?.label || item.name}\n                      </span>\n                    </div>\n                    {item.value && (\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = \"bottom\",\n  nameKey,\n}: React.ComponentProps<\"div\"> &\n  { payload?: any[]; verticalAlign?: \"top\" | \"bottom\" } & {\n    hideIcon?: boolean\n    nameKey?: string\n  }) {\n  const { config } = useChart()\n\n  if (!(payload as any)?.length) {\n    return null\n  }\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center justify-center gap-4\",\n        verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n        className\n      )}\n    >\n  {(payload as any[]).map((item: any) => {\n        const key = `${nameKey || item.dataKey || \"value\"}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n        return (\n          <div\n            key={item.value}\n            className={cn(\n              \"[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3\"\n            )}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","usedDeprecatedRules":[]},{"filePath":"G:\\Projets\\expenshare\\components\\ui\\database-controls.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":24,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":49,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Download, Upload } from \"lucide-react\"\nimport { db } from \"@/lib/database\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { useRef } from \"react\"\n\ninterface DatabaseControlsProps {\n  className?: string\n}\n\nexport function DatabaseControls({ className }: DatabaseControlsProps) {\n  const { toast } = useToast()\n  const fileInputRef = useRef<HTMLInputElement>(null)\n\n  const handleDownload = () => {\n    try {\n      db.downloadDatabase()\n      toast({\n        title: \"Base de données téléchargée\",\n        description: \"Le fichier expenseshare.db a été téléchargé avec succès.\",\n      })\n    } catch (error) {\n      toast({\n        title: \"Erreur lors du téléchargement\",\n        description: \"Impossible de télécharger la base de données.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  const handleUpload = () => {\n    fileInputRef.current?.click()\n  }\n\n  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (!file) return\n\n    try {\n      await db.uploadDatabase(file)\n      toast({\n        title: \"Base de données importée\",\n        description: \"La base de données a été importée avec succès.\",\n      })\n      // Refresh the page to reflect the changes\n      window.location.reload()\n    } catch (error) {\n      toast({\n        title: \"Erreur lors de l'importation\",\n        description: \"Impossible d'importer la base de données.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  return (\n    <div className={className}>\n      <div className=\"flex gap-2\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={handleDownload}\n          className=\"flex items-center gap-2\"\n        >\n          <Download className=\"h-4 w-4\" />\n          Télécharger DB\n        </Button>\n        \n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={handleUpload}\n          className=\"flex items-center gap-2\"\n        >\n          <Upload className=\"h-4 w-4\" />\n          Importer DB\n        </Button>\n      </div>\n      \n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\".db,.sqlite,.sqlite3\"\n        onChange={handleFileChange}\n        className=\"hidden\"\n      />\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"G:\\Projets\\expenshare\\components\\ui\\database-error.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":22,"column":29,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[523,568],"text":"Erreur d&apos;initialisation de la base de données"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[523,568],"text":"Erreur d&lsquo;initialisation de la base de données"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[523,568],"text":"Erreur d&#39;initialisation de la base de données"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[523,568],"text":"Erreur d&rsquo;initialisation de la base de données"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"\nimport { Button } from \"@/components/ui/button\"\n\ninterface Props {\n  error: string\n}\n\nexport function DatabaseError({ error }: Props) {\n  const clearAndReload = () => {\n    try {\n      localStorage.removeItem(\"expenseshare.db\")\n      localStorage.removeItem(\"expenseshare-db-url\")\n    } catch {}\n    window.location.reload()\n  }\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <Alert variant=\"destructive\">\n        <AlertTitle>Erreur d'initialisation de la base de données</AlertTitle>\n        <AlertDescription className=\"space-y-2\">\n          <div>{error}</div>\n          <p>Causes possibles :</p>\n          <ul className=\"list-disc pl-5\">\n            <li>Problème de connexion internet (fichiers WASM)</li>\n            <li>Navigateur incompatible avec WebAssembly</li>\n            <li>Erreur dans les données du localStorage</li>\n          </ul>\n        </AlertDescription>\n      </Alert>\n      <div className=\"flex gap-2\">\n        <Button onClick={() => window.location.reload()} className=\"flex-1\">Recharger la page</Button>\n        <Button variant=\"outline\" onClick={clearAndReload} className=\"flex-1\">Vider le cache et recharger</Button>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"G:\\Projets\\expenshare\\components\\ui\\error-boundary.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":13,"column":76,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":13,"endColumn":78,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[387,389],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[387,389],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":14,"column":46,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":14,"endColumn":48,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[459,461],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[459,461],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":34,"column":38,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1138,1163],"text":"Une erreur s&apos;est produite"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1138,1163],"text":"Une erreur s&lsquo;est produite"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1138,1163],"text":"Une erreur s&#39;est produite"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1138,1163],"text":"Une erreur s&rsquo;est produite"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":35,"column":33,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1207,1254],"text":"L&apos;application a rencontré un problème inattendu"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1207,1254],"text":"L&lsquo;application a rencontré un problème inattendu"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1207,1254],"text":"L&#39;application a rencontré un problème inattendu"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1207,1254],"text":"L&rsquo;application a rencontré un problème inattendu"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":45,"column":28,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1752,1807],"text":"\n                Recharger l&apos;application\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1752,1807],"text":"\n                Recharger l&lsquo;application\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1752,1807],"text":"\n                Recharger l&#39;application\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1752,1807],"text":"\n                Recharger l&rsquo;application\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport React from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { AlertTriangle, RefreshCw } from \"lucide-react\"\n\ninterface ErrorBoundaryState {\n  hasError: boolean\n  error?: Error\n}\n\nexport class ErrorBoundary extends React.Component<React.PropsWithChildren<{}>, ErrorBoundaryState> {\n  constructor(props: React.PropsWithChildren<{}>) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error }\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error(\"[ExpenseShare] Error caught by boundary:\", error, errorInfo)\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n          <Card className=\"w-full max-w-md\">\n            <CardHeader className=\"text-center\">\n              <AlertTriangle className=\"h-12 w-12 mx-auto text-destructive mb-4\" />\n              <CardTitle>Une erreur s'est produite</CardTitle>\n              <CardDescription>L'application a rencontré un problème inattendu</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {process.env.NODE_ENV === \"development\" && this.state.error && (\n                <div className=\"p-3 bg-muted rounded text-sm font-mono text-xs overflow-auto max-h-32\">\n                  {this.state.error.message}\n                </div>\n              )}\n              <Button onClick={() => window.location.reload()} className=\"w-full\">\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Recharger l'application\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      )\n    }\n\n    return this.props.children\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"G:\\Projets\\expenshare\\components\\ui\\use-toast.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'actionTypes' is assigned a value but only used as a type.","line":21,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":21,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","usedDeprecatedRules":[]},{"filePath":"G:\\Projets\\expenshare\\lib\\database-supabase.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1673,1676],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1673,1676],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2098,2101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2098,2101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2889,2892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2889,2892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2960,2963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2960,2963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4217,4220],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4217,4220],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4388,4391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4388,4391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":203,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7381,7384],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7381,7384],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":244,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8759,8762],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8759,8762],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":275,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10051,10054],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10051,10054],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":280,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":280,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10192,10195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10192,10195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":344,"column":102,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":105,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12329,12332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12329,12332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":370,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":370,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13248,13251],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13248,13251],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":374,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":374,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13398,13401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13398,13401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":374,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":374,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13437,13440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13437,13440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":375,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":375,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13506,13509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13506,13509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":375,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":375,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13545,13548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13545,13548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":376,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":376,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13590,13593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13590,13593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":376,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":376,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13629,13632],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13629,13632],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":392,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":392,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14327,14330],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14327,14330],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":441,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":441,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16281,16284],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16281,16284],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":442,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":442,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16356,16359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16356,16359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":443,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":443,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16441,16444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16441,16444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":444,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":444,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16530,16533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16530,16533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":449,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":449,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16753,16756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16753,16756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":453,"column":144,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":453,"endColumn":147,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17059,17062],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17059,17062],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":453,"column":168,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":453,"endColumn":171,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17083,17086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17083,17086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":454,"column":118,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":454,"endColumn":121,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17207,17210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17207,17210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":454,"column":142,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":454,"endColumn":145,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17231,17234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17231,17234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":455,"column":132,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":455,"endColumn":135,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17369,17372],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17369,17372],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":455,"column":156,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":455,"endColumn":159,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17393,17396],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17393,17396],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":458,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":458,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17433,17436],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17433,17436],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":458,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":458,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17457,17460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17457,17460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":459,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":459,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17494,17497],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17494,17497],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":459,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":459,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17515,17518],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17515,17518],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":460,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":460,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17557,17560],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17557,17560],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":460,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":460,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17583,17586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17583,17586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":462,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":462,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17633,17636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17633,17636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":462,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":462,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17638,17641],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17638,17641],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":462,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":462,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17660,17663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17660,17663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":463,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":463,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17711,17714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17711,17714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":463,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":463,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17716,17719],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17716,17719],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":463,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":463,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17735,17738],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17735,17738],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":464,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":464,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17793,17796],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17793,17796],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":464,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":464,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17798,17801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17798,17801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":464,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":464,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17822,17825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17822,17825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":467,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":467,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17947,17950],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17947,17950],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":467,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":467,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17993,17996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17993,17996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":467,"column":105,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":467,"endColumn":108,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18025,18028],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18025,18028],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":470,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":470,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18223,18226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18223,18226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":471,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":471,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18264,18267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18264,18267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":471,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":471,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18269,18272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18269,18272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":471,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":471,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18298,18301],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18298,18301],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":473,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":473,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18353,18356],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18353,18356],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":475,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":475,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18452,18455],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18452,18455],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":476,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":476,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18498,18501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18498,18501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":477,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":477,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18549,18552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18549,18552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":478,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":478,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18621,18624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18621,18624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":485,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":485,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18876,18879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18876,18879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":485,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":485,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18915,18918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18915,18918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":486,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":486,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18981,18984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18981,18984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":486,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":486,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19020,19023],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19020,19023],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":487,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":487,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19086,19089],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19086,19089],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":487,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":487,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19125,19128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19125,19128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":488,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":488,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19184,19187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19184,19187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":488,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":488,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19223,19226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19223,19226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":528,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":528,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20663,20666],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20663,20666],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":529,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":529,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20738,20741],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20738,20741],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":530,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":530,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20823,20826],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20823,20826],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":531,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":531,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20912,20915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20912,20915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":536,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":536,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21119,21122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21119,21122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":540,"column":144,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":540,"endColumn":147,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21401,21404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21401,21404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":540,"column":168,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":540,"endColumn":171,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21425,21428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21425,21428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":541,"column":118,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":541,"endColumn":121,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21549,21552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21549,21552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":541,"column":142,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":541,"endColumn":145,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21573,21576],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21573,21576],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":542,"column":132,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":542,"endColumn":135,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21711,21714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21711,21714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":542,"column":156,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":542,"endColumn":159,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21735,21738],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21735,21738],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":545,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":545,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21775,21778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21775,21778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":545,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":545,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21799,21802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21799,21802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":546,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":546,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21836,21839],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21836,21839],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":546,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":546,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21857,21860],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21857,21860],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":547,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":547,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21899,21902],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21899,21902],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":547,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":547,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21925,21928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21925,21928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":549,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":549,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21975,21978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21975,21978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":549,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":549,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21980,21983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21980,21983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":549,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":549,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22002,22005],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22002,22005],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":550,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":550,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22053,22056],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22053,22056],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":550,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":550,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22058,22061],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22058,22061],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":550,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":550,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22077,22080],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22077,22080],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":551,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":551,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22135,22138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22135,22138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":551,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":551,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22140,22143],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22140,22143],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":551,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":551,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22164,22167],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22164,22167],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":554,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":554,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22231,22234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22231,22234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":554,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":554,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22277,22280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22277,22280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":554,"column":105,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":554,"endColumn":108,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22309,22312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22309,22312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":557,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":557,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22507,22510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22507,22510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":558,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":558,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22548,22551],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22548,22551],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":558,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":558,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22553,22556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22553,22556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":558,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":558,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22582,22585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22582,22585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":560,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":560,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22637,22640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22637,22640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":562,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":562,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22736,22739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22736,22739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":563,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":563,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22782,22785],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22782,22785],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":564,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":564,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22833,22836],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22833,22836],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":565,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":565,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22905,22908],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22905,22908],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":572,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":572,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23160,23163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23160,23163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":572,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":572,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23199,23202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23199,23202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":573,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":573,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23265,23268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23265,23268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":573,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":573,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23304,23307],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23304,23307],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":574,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":574,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23370,23373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23370,23373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":574,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":574,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23409,23412],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23409,23412],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":575,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":575,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23468,23471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23468,23471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":575,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":575,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23507,23510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23507,23510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":619,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":619,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25150,25153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25150,25153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":620,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":620,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25225,25228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25225,25228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":621,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":621,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25310,25313],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25310,25313],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":622,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":622,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25399,25402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25399,25402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":627,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":627,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25606,25609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25606,25609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":631,"column":134,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":631,"endColumn":137,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25849,25852],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25849,25852],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":631,"column":158,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":631,"endColumn":161,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25873,25876],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25873,25876],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":632,"column":118,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":632,"endColumn":121,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25997,26000],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25997,26000],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":632,"column":142,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":632,"endColumn":145,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26021,26024],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26021,26024],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":633,"column":132,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":633,"endColumn":135,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26159,26162],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26159,26162],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":633,"column":156,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":633,"endColumn":159,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26183,26186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26183,26186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":636,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":636,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26223,26226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26223,26226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":636,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":636,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26247,26250],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26247,26250],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":637,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":637,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26284,26287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26284,26287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":637,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":637,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26305,26308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26305,26308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":638,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":638,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26347,26350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26347,26350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":638,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":638,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26373,26376],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26373,26376],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":640,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":640,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26423,26426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26423,26426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":640,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":640,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26428,26431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26428,26431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":640,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":640,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26450,26453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26450,26453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":641,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":641,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26501,26504],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26501,26504],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":641,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":641,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26506,26509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26506,26509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":641,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":641,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26525,26528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26525,26528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":642,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":642,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26583,26586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26583,26586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":642,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":642,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26588,26591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26588,26591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":642,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":642,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26612,26615],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26612,26615],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":645,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":645,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26679,26682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26679,26682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":645,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":645,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26725,26728],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26725,26728],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":645,"column":105,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":645,"endColumn":108,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26757,26760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26757,26760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":648,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":648,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26955,26958],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26955,26958],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":649,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":649,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26996,26999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26996,26999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":649,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":649,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27001,27004],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27001,27004],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":649,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":649,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27030,27033],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27030,27033],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":651,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":651,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27085,27088],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27085,27088],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":653,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":653,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27190,27193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27190,27193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":654,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":654,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27242,27245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27242,27245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":655,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":655,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27299,27302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27299,27302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":656,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":656,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27377,27380],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27377,27380],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":761,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":761,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31371,31374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31371,31374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":762,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":762,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31457,31460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31457,31460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":763,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":763,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31512,31515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31512,31515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":764,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":764,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31610,31613],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31610,31613],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":765,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":765,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31693,31696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31693,31696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":768,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":768,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31857,31860],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31857,31860],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":769,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":769,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31941,31944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31941,31944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":774,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":774,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32171,32174],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32171,32174],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":775,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":775,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32258,32261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32258,32261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":776,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":776,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32347,32350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32347,32350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":777,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":777,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32434,32437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32434,32437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":782,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":782,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32728,32731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32728,32731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":784,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":784,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32817,32820],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32817,32820],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":808,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":808,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":817,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":817,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34011,34014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34011,34014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":820,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":820,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34149,34152],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34149,34152],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":820,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":820,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34185,34188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34185,34188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":832,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":832,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34698,34701],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34698,34701],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":836,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":836,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34882,34885],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34882,34885],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'file' is defined but never used.","line":854,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":854,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":929,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":929,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[38173,38176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[38173,38176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":957,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":957,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39519,39522],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39519,39522],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":962,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":962,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39661,39664],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39661,39664],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1027,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1027,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[42037,42040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[42037,42040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1055,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1055,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[42944,42947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[42944,42947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1068,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1068,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43399,43402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43399,43402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1127,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1127,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[45542,45545],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[45542,45545],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1146,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1146,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[46148,46151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[46148,46151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1201,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1201,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[48302,48305],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[48302,48305],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1207,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1207,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[48481,48484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[48481,48484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1259,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1259,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[50262,50265],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[50262,50265],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1290,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1290,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[51127,51130],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[51127,51130],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1296,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1296,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[51300,51303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[51300,51303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1336,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1336,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[52701,52704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[52701,52704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1403,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1403,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[54531,54534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[54531,54534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1431,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1431,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[55236,55239],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[55236,55239],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1437,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1437,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[55404,55407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[55404,55407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1472,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1472,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[56688,56691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[56688,56691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1491,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1491,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[57275,57278],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[57275,57278],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1568,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1568,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[60318,60321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[60318,60321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1569,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1569,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[60349,60352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[60349,60352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1578,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1578,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[60609,60612],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[60609,60612],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1614,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1614,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[61973,61976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[61973,61976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1620,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1620,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[62148,62151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[62148,62151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1659,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1659,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[63515,63518],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[63515,63518],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createClient' is defined but never used.","line":1670,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1670,"endColumn":22}],"suppressedMessages":[],"errorCount":192,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\r\n\r\nimport { supabase } from './supabase'\r\nimport { User, Project, ProjectUser, Category, Transaction, Note, Setting } from './types'\r\n\r\n// Classe de gestion de la base de données avec Supabase\r\nclass SupabaseDatabase {\r\n  // --- Helpers d'autorisation (sans RLS) ---\r\n  private getCurrentUserId(): string | null {\r\n    try {\r\n      const stored =\r\n        (typeof window !== 'undefined' && (localStorage.getItem('expenshare_current_user') || localStorage.getItem('expenshare_user'))) ||\r\n        null\r\n      if (!stored) return null\r\n      const obj = JSON.parse(stored)\r\n      return obj?.id ? String(obj.id) : null\r\n    } catch {\r\n      return null\r\n    }\r\n  }\r\n\r\n    // Créer une catégorie (helper utilisé par le formulaire)\r\n    async createCategory(projectId: number, name: string, parentId?: number) {\r\n      try {\r\n        // Déterminer le niveau (1 si sans parent, sinon parent.level + 1)\r\n        let level = 1\r\n        let parent_id: number | null = null\r\n        if (parentId && Number(parentId) > 0) {\r\n          parent_id = Number(parentId)\r\n          const { data: parent, error: perr } = await supabase\r\n            .from('categories')\r\n            .select('id, level, project_id')\r\n            .eq('id', parent_id)\r\n            .maybeSingle()\r\n          if (perr) throw new Error(perr.message)\r\n          if (!parent) throw new Error('Catégorie parente introuvable')\r\n          if (Number(parent.project_id) !== Number(projectId)) throw new Error('Parent hors projet')\r\n          level = (Number(parent.level) || 1) + 1\r\n          if (level > 3) throw new Error('Maximum 3 niveaux de catégories autorisés')\r\n        }\r\n\r\n        const payload: any = {\r\n          project_id: Number(projectId),\r\n          name,\r\n          parent_id,\r\n          level,\r\n          created_at: new Date().toISOString(),\r\n        }\r\n        const { data, error } = await supabase\r\n          .from('categories')\r\n          .insert(payload)\r\n          .select('id')\r\n          .single()\r\n        if (error) throw new Error(error.message)\r\n        return data?.id as number\r\n      } catch (e: any) {\r\n        console.error('[ExpenseShare] createCategory failed:', e)\r\n        throw new Error(e?.message || 'Impossible de créer la catégorie')\r\n      }\r\n    }\r\n  /**\r\n   * Retourne la liste des project_ids accessibles pour un utilisateur donné\r\n   */\r\n  private async getAuthorizedProjectIds(userId: string): Promise<number[]> {\r\n    try {\r\n      // Projets créés par l'utilisateur\r\n      const { data: created } = await supabase\r\n        .from('projects')\r\n        .select('id')\r\n        .eq('created_by', userId)\r\n\r\n      // Projets où l'utilisateur est membre\r\n      const { data: memberships } = await supabase\r\n        .from('project_users')\r\n        .select('project_id')\r\n        .eq('user_id', userId)\r\n\r\n      const ids = new Set<number>()\r\n      ;(created || []).forEach((p: any) => ids.add(Number(p.id)))\r\n      ;(memberships || []).forEach((m: any) => ids.add(Number(m.project_id)))\r\n      return Array.from(ids)\r\n    } catch {\r\n      return []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Supprime un utilisateur par son ID (admin uniquement)\r\n   * @param userId ID de l'utilisateur à supprimer\r\n   * @throws Error si la suppression échoue\r\n   */\r\n  async deleteUser(userId: string) {\r\n    const { error } = await supabase.from('users').delete().eq('id', userId);\r\n    if (error) {\r\n      console.error('[ExpenseShare] Error deleting user:', error);\r\n      throw new Error(error.message);\r\n    }\r\n    return true;\r\n  }\r\n  projects = {\r\n    add: async (data: Project) => {\r\n      try {\r\n        const payload = {\r\n          ...data,\r\n          created_by: String(data.created_by),\r\n          created_at: data.created_at ? (typeof data.created_at === 'string' ? data.created_at : (data.created_at as Date).toISOString()) : new Date().toISOString()\r\n        }\r\n        const { data: inserted, error } = await supabase\r\n          .from('projects')\r\n          .insert(payload)\r\n          .select('id')\r\n          .single();\r\n        if (error) {\r\n          console.error('[ExpenseShare] Error adding project:', error)\r\n          throw new Error(error.message)\r\n        }\r\n        return inserted?.id\r\n      } catch (error: any) {\r\n        console.error('[ExpenseShare] projects.add failed:', error)\r\n        throw error\r\n      }\r\n    },\r\n    where: (field: string) => ({\r\n      equals: (value: any) => ({\r\n        toArray: async () => {\r\n          try {\r\n            if (field === 'id') {\r\n              const { data, error } = await supabase\r\n                .from('projects')\r\n                .select('*')\r\n                .eq('id', Number(value))\r\n              if (error) {\r\n                console.error('[ExpenseShare] Error fetching projects by id:', error)\r\n                return []\r\n              }\r\n              return (data || []) as Project[]\r\n            }\r\n            if (field === 'created_by') {\r\n              const { data, error } = await supabase\r\n                .from('projects')\r\n                .select('*')\r\n                .eq('created_by', String(value))\r\n              if (error) {\r\n                console.error('[ExpenseShare] Error fetching projects by created_by:', error)\r\n                return []\r\n              }\r\n              return (data || []) as Project[]\r\n            }\r\n            return []\r\n          } catch (error) {\r\n            console.error('[ExpenseShare] projects.where.equals.toArray failed:', error)\r\n            return []\r\n          }\r\n        },\r\n        delete: async () => {\r\n          try {\r\n            if (field === 'id') {\r\n              // Authorization: only admin or project owner can delete the project\r\n              const uid = this.getCurrentUserId()\r\n              if (!uid) {\r\n                throw new Error('Non authentifié')\r\n              }\r\n\r\n              // Is admin?\r\n              let isAdmin = false\r\n              try {\r\n                const { data: adminRow } = await supabase\r\n                  .from('users')\r\n                  .select('id')\r\n                  .eq('id', uid)\r\n                  .eq('is_admin', true)\r\n                  .maybeSingle()\r\n                isAdmin = !!adminRow\r\n              } catch {}\r\n\r\n              if (!isAdmin) {\r\n                // If not admin, ensure current user is the project owner\r\n                const { data: proj, error: projErr } = await supabase\r\n                  .from('projects')\r\n                  .select('created_by')\r\n                  .eq('id', Number(value))\r\n                  .maybeSingle()\r\n                if (projErr) {\r\n                  console.error('[ExpenseShare] Error fetching project for delete auth:', projErr)\r\n                  throw new Error(projErr.message)\r\n                }\r\n                if (!proj || String(proj.created_by) !== String(uid)) {\r\n                  throw new Error(\"Seul le propriétaire du projet ou un administrateur peut supprimer ce projet.\")\r\n                }\r\n              }\r\n\r\n              const { error } = await supabase\r\n                .from('projects')\r\n                .delete()\r\n                .eq('id', Number(value))\r\n              if (error) {\r\n                console.error('[ExpenseShare] Error deleting project by id:', error)\r\n                throw new Error(error.message)\r\n              }\r\n              return 1\r\n            }\r\n            return 0\r\n          } catch (error: any) {\r\n            console.error('[ExpenseShare] projects.where.equals.delete failed:', error)\r\n            throw error\r\n          }\r\n        }\r\n      })\r\n    }),\r\n    toArray: async () => {\r\n      try {\r\n        const uid = this.getCurrentUserId()\r\n        if (!uid) return []\r\n\r\n        // Vérifier si admin\r\n        let isAdmin = false\r\n        try {\r\n          const { data } = await supabase.from('users').select('id').eq('id', uid).eq('is_admin', true).maybeSingle()\r\n          isAdmin = !!data\r\n        } catch {}\r\n\r\n        if (isAdmin) {\r\n          const { data, error } = await supabase.from('projects').select('*')\r\n          if (error) return []\r\n          return (data || []) as Project[]\r\n        }\r\n\r\n        const authorized = await this.getAuthorizedProjectIds(uid)\r\n        if (!authorized.length) return []\r\n        const { data, error } = await supabase\r\n          .from('projects')\r\n          .select('*')\r\n          .in('id', authorized)\r\n        if (error) return []\r\n        return (data || []) as Project[]\r\n      } catch (error) {\r\n        console.error('[ExpenseShare] projects.toArray failed:', error)\r\n        return []\r\n      }\r\n    }\r\n  }\r\n  // --- Méthodes métiers attendues par l'app ---\r\n  async createProject(name: string, description: string, icon: string, color: string, currency: string, created_by: string | number) {\r\n    const payload: any = { name, description, icon, color, currency, created_by: String(created_by), created_at: new Date().toISOString() };\r\n    const { data, error } = await supabase.from('projects').insert(payload).select('id').single();\r\n    if (error) throw new Error(error.message);\r\n    // Créer l’association owner\r\n    await supabase.from('project_users').insert({ project_id: data!.id, user_id: String(created_by), role: 'owner', added_at: new Date().toISOString() });\r\n    return data!.id as number;\r\n  }\r\n\r\n  async getUserProjects(userId: string | number) {\r\n    try {\r\n      // Toujours filtrer: projets créés par l'utilisateur + projets où il est membre\r\n      const uid = String(userId)\r\n      const authorized = await this.getAuthorizedProjectIds(uid)\r\n      if (!authorized.length) return []\r\n\r\n      const { data: projects, error } = await supabase\r\n        .from('projects')\r\n        .select('*')\r\n        .in('id', authorized)\r\n\r\n      if (error) {\r\n        console.error('[ExpenseShare] Error loading user projects:', error)\r\n        return []\r\n      }\r\n\r\n      // Récupérer les rôles depuis project_users\r\n      const { data: rels } = await supabase\r\n        .from('project_users')\r\n        .select('project_id, role')\r\n        .eq('user_id', uid)\r\n\r\n      return (projects || []).map((p: any) => ({\r\n        ...p,\r\n        role:\r\n          String(p.created_by) === uid\r\n            ? 'owner'\r\n            : (rels || []).find((r: any) => Number(r.project_id) === Number(p.id))?.role || 'viewer',\r\n      }))\r\n    } catch (error) {\r\n      console.error('[ExpenseShare] getUserProjects failed:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async getProjectById(projectId: number) {\r\n    try {\r\n  const uid = this.getCurrentUserId()\r\n  if (!uid) return null\r\n  const authorized = await this.getAuthorizedProjectIds(uid)\r\n  if (!authorized.includes(Number(projectId))) return null\r\n      const { data, error } = await supabase\r\n        .from('projects')\r\n        .select('*')\r\n        .eq('id', projectId)\r\n        .single();\r\n      \r\n      if (error) {\r\n        console.error('[ExpenseShare] Error getting project by ID:', error);\r\n        return null;\r\n      }\r\n      \r\n      return data as Project;\r\n    } catch (error) {\r\n      console.error('[ExpenseShare] getProjectById failed:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Met à jour un projet et retourne l'objet projet mis à jour.\r\n   * Retourne null en cas d'erreur.\r\n   */\r\n  async updateProject(projectId: number, values: { name: string; description: string; icon: string; color: string; currency: string }) {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('projects')\r\n        .update(values)\r\n        .eq('id', projectId);\r\n      if (error) {\r\n        console.error('[ExpenseShare] Error updating project:', error);\r\n        return null;\r\n      }\r\n      // Re-fetch the project to return the updated data\r\n      return await this.getProjectById(projectId);\r\n    } catch (e) {\r\n      console.error('[ExpenseShare] updateProject failed:', e);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getProjectCategories(projectId: number) {\r\n  const uid = this.getCurrentUserId()\r\n  if (!uid) return []\r\n  const authorized = await this.getAuthorizedProjectIds(uid)\r\n  if (!authorized.includes(Number(projectId))) return []\r\n  const { data, error } = await supabase.from('categories').select('*').eq('project_id', projectId);\r\n    if (error) return [];\r\n    return data as Category[];\r\n  }\r\n\r\n  async getProjectCategoryHierarchy(projectId: number, currency: 'EUR'|'CFA'|'USD' = 'EUR'): Promise<any[]> {\r\n    try {\r\n  const uid = this.getCurrentUserId()\r\n  if (!uid) return []\r\n  const authorized = await this.getAuthorizedProjectIds(uid)\r\n  if (!authorized.includes(Number(projectId))) return []\r\n      // Charger catégories du projet\r\n      const { data: categories, error: catErr } = await supabase\r\n        .from('categories')\r\n        .select('*')\r\n        .eq('project_id', projectId)\r\n        .order('level', { ascending: true })\r\n        .order('name', { ascending: true })\r\n\r\n      if (catErr) return []\r\n\r\n      // Charger transactions du projet\r\n      const { data: transactions, error: txErr } = await supabase\r\n        .from('transactions')\r\n        .select('*')\r\n        .eq('project_id', projectId)\r\n\r\n      if (txErr) return []\r\n\r\n    // Totaux par (category_id, type) selon la devise demandée (colonnes natives)\r\n    const totals = new Map<string, number>()\r\n    ;(transactions || []).forEach((t: any) => {\r\n        if (t.category_id) {\r\n      const key = `${t.category_id}_${t.type}`\r\n      let amt = 0\r\n      if (currency === 'CFA') amt = (t as any).amount_cfa != null ? Number((t as any).amount_cfa) : 0\r\n      else if (currency === 'USD') amt = (t as any).amount_usd != null ? Number((t as any).amount_usd) : 0\r\n      else amt = (t as any).amount_eur != null ? Number((t as any).amount_eur) : Number(t.amount)\r\n      totals.set(key, (totals.get(key) || 0) + amt)\r\n        }\r\n    })\r\n\r\n      // Palette de couleurs simple et stable\r\n      const getColorForIndex = (index: number) => {\r\n        const colors = [\r\n          '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8', '#F7DC6F',\r\n          '#60A5FA', '#34D399', '#F59E0B', '#EF4444', '#8B5CF6', '#EC4899', '#14B8A6', '#F97316'\r\n        ]\r\n        return colors[index % colors.length]\r\n      }\r\n\r\n      // Construction récursive de l'arbre (parent_id null => niveau racine)\r\n      const cats = (categories || []) as Category[]\r\n      const build = (parentId: number | null = null, level = 1): any[] => {\r\n        return cats\r\n          .filter((c) => (c.parent_id ?? null) === parentId)\r\n          .map((c, idx) => {\r\n            const expense = totals.get(`${c.id}_expense`) || 0\r\n            const budget = totals.get(`${c.id}_budget`) || 0\r\n            const children = build(c.id!, level + 1)\r\n            const childrenExpense = children.reduce((s, ch) => s + (ch.expenseValue || 0), 0)\r\n            const childrenBudget = children.reduce((s, ch) => s + (ch.budgetValue || 0), 0)\r\n            const totalExpense = expense + childrenExpense\r\n            const totalBudget = budget + childrenBudget\r\n            return {\r\n              id: String(c.id!),\r\n              name: c.name,\r\n              value: totalExpense,\r\n              expenseValue: totalExpense,\r\n              budgetValue: totalBudget,\r\n              color: getColorForIndex(idx + level * 3),\r\n              level,\r\n              parentId: parentId !== null ? String(parentId) : undefined,\r\n              children: children.length > 0 ? children : undefined,\r\n            }\r\n          })\r\n          .filter((node) => Number(node.value || 0) > 0)\r\n      }\r\n\r\n      return build(null, 1)\r\n    } catch (e) {\r\n      console.error('[ExpenseShare] getProjectCategoryHierarchy failed:', e)\r\n      return []\r\n    }\r\n  }\r\n\r\n  async getProjectTransactions(projectId: number) {\r\n    try {\r\n  // Autorisation: l'utilisateur doit avoir accès à ce projet\r\n  const uid = this.getCurrentUserId()\r\n  if (!uid) return []\r\n  const authorized = await this.getAuthorizedProjectIds(uid)\r\n  if (!authorized.includes(Number(projectId))) return []\r\n\r\n      // 1) Récupérer les transactions (sans jointures pour réduire l'impact RLS)\r\n      const { data: tx, error: txErr } = await supabase\r\n        .from('transactions')\r\n        .select('*')\r\n        .eq('project_id', projectId)\r\n        .order('created_at', { ascending: false })\r\n      if (txErr) return []\r\n\r\n      const ids = (tx || []).map((t: any) => t.id)\r\n      const projIds = Array.from(new Set((tx || []).map((t: any) => t.project_id)))\r\n      const userIds = Array.from(new Set((tx || []).map((t: any) => String(t.user_id))))\r\n      const catIds = Array.from(new Set((tx || []).map((t: any) => t.category_id).filter(Boolean)))\r\n\r\n      // 2) Charger notes (flags)\r\n      const { data: notes } = ids.length\r\n        ? await supabase.from('notes').select('*').in('transaction_id', ids)\r\n        : { data: [] as any[] }\r\n\r\n      // 3) Charger projets, users, catégories (meilleure tolérance aux RLS)\r\n      const [projectsRes, usersRes, categoriesRes] = await Promise.all([\r\n        projIds.length ? supabase.from('projects').select('id, name, icon, color, currency').in('id', projIds) : Promise.resolve({ data: [] as any[], error: null } as any),\r\n        userIds.length ? supabase.from('users').select('id, name').in('id', userIds) : Promise.resolve({ data: [] as any[], error: null } as any),\r\n        catIds.length ? supabase.from('categories').select('id, name, parent_id').in('id', catIds) : Promise.resolve({ data: [] as any[], error: null } as any)\r\n      ])\r\n\r\n      const projects: any[] = (projectsRes as any)?.data || []\r\n      const users: any[] = (usersRes as any)?.data || []\r\n      const categories: any[] = (categoriesRes as any)?.data || []\r\n\r\n      const projMap = new Map<any, any>(projects.map((p: any) => [p.id, p]))\r\n      const userMap = new Map<any, any>(users.map((u: any) => [String(u.id), u]))\r\n      const catMap = new Map<any, any>(categories.map((c: any) => [c.id, c]))\r\n\r\n      // 4) Pour parent_category_name, on récupère les parents nécessaires\r\n      const parentIdsAny: any[] = Array.from(new Set(categories.map((c: any) => c.parent_id).filter((v: any) => v != null)))\r\n      const { data: parents } = parentIdsAny.length\r\n        ? await supabase.from('categories').select('id, name').in('id', parentIdsAny as number[])\r\n        : { data: [] as any[] }\r\n      const parentMap = new Map<any, any>((parents || []).map((p: any) => [p.id, p]))\r\n\r\n      return (tx || []).map((t: any) => {\r\n        const n = (notes || []).filter((x) => x.transaction_id === t.id)\r\n  const proj: any = projMap.get(t.project_id)\r\n  const usr: any = userMap.get(String(t.user_id))\r\n  const cat: any = t.category_id ? catMap.get(t.category_id) : null\r\n  const parent: any = cat?.parent_id ? parentMap.get(cat.parent_id) : null\r\n        return {\r\n          id: t.id,\r\n          project_id: t.project_id,\r\n          user_id: t.user_id,\r\n          category_id: t.category_id,\r\n          type: t.type,\r\n          amount: (t as any).amount_eur != null ? Number((t as any).amount_eur) : Number(t.amount),\r\n          amount_eur: (t as any).amount_eur != null ? Number((t as any).amount_eur) : Number(t.amount),\r\n          amount_cfa: (t as any).amount_cfa != null ? Number((t as any).amount_cfa) : undefined,\r\n          amount_usd: (t as any).amount_usd != null ? Number((t as any).amount_usd) : undefined,\r\n          title: t.title,\r\n          description: t.description,\r\n          created_at: t.created_at,\r\n          project_name: proj?.name,\r\n          project_icon: proj?.icon,\r\n          project_color: proj?.color,\r\n          project_currency: proj?.currency,\r\n          user_name: usr?.name,\r\n          category_name: cat?.name,\r\n          parent_category_name: parent?.name,\r\n          has_text: n.some((nn) => nn.content_type === 'text'),\r\n          has_document: n.some((nn) => nn.content_type === 'text' && nn.file_path),\r\n          has_image: n.some((nn) => nn.content_type === 'image'),\r\n          has_audio: n.some((nn) => nn.content_type === 'audio'),\r\n        }\r\n      })\r\n    } catch (e) {\r\n      console.error('[ExpenseShare] getProjectTransactions failed:', e)\r\n      return []\r\n    }\r\n  }\r\n\r\n  async getRecentTransactions(limit = 10) {\r\n    try {\r\n      // Filtrer par projets autorisés\r\n      const uid = this.getCurrentUserId()\r\n      if (!uid) return []\r\n      const authorized = await this.getAuthorizedProjectIds(uid)\r\n      if (!authorized.length) return []\r\n\r\n      // 1) Transactions autorisées\r\n      const { data: tx, error: txErr } = await supabase\r\n        .from('transactions')\r\n        .select('*')\r\n        .in('project_id', authorized)\r\n        .order('created_at', { ascending: false })\r\n        .limit(limit)\r\n      if (txErr) return []\r\n\r\n      const ids = (tx || []).map((t: any) => t.id)\r\n      const projIds = Array.from(new Set((tx || []).map((t: any) => t.project_id)))\r\n      const userIds = Array.from(new Set((tx || []).map((t: any) => String(t.user_id))))\r\n      const catIds = Array.from(new Set((tx || []).map((t: any) => t.category_id).filter(Boolean)))\r\n\r\n      // 2) Notes\r\n      const { data: notes } = ids.length\r\n        ? await supabase.from('notes').select('*').in('transaction_id', ids)\r\n        : { data: [] as any[] }\r\n\r\n      // 3) Métadonnées (projets, users, catégories)\r\n      const [projectsRes, usersRes, categoriesRes] = await Promise.all([\r\n        projIds.length ? supabase.from('projects').select('id, name, icon, color, currency').in('id', projIds) : Promise.resolve({ data: [] as any[], error: null } as any),\r\n        userIds.length ? supabase.from('users').select('id, name').in('id', userIds) : Promise.resolve({ data: [] as any[], error: null } as any),\r\n        catIds.length ? supabase.from('categories').select('id, name, parent_id').in('id', catIds) : Promise.resolve({ data: [] as any[], error: null } as any)\r\n      ])\r\n\r\n      const projects: any[] = (projectsRes as any)?.data || []\r\n      const users: any[] = (usersRes as any)?.data || []\r\n      const categories: any[] = (categoriesRes as any)?.data || []\r\n\r\n      const projMap = new Map<any, any>(projects.map((p: any) => [p.id, p]))\r\n      const userMap = new Map<any, any>(users.map((u: any) => [String(u.id), u]))\r\n      const catMap = new Map<any, any>(categories.map((c: any) => [c.id, c]))\r\n\r\n      // Parents\r\n      const parentIdsAny: any[] = Array.from(new Set(categories.map((c: any) => c.parent_id).filter((v: any) => v != null)))\r\n      const { data: parents } = parentIdsAny.length\r\n        ? await supabase.from('categories').select('id, name').in('id', parentIdsAny as number[])\r\n        : { data: [] as any[] }\r\n      const parentMap = new Map<any, any>((parents || []).map((p: any) => [p.id, p]))\r\n\r\n      return (tx || []).map((t: any) => {\r\n        const n = (notes || []).filter((x) => x.transaction_id === t.id)\r\n  const proj: any = projMap.get(t.project_id)\r\n  const usr: any = userMap.get(String(t.user_id))\r\n  const cat: any = t.category_id ? catMap.get(t.category_id) : null\r\n  const parent: any = cat?.parent_id ? parentMap.get(cat.parent_id) : null\r\n        return {\r\n          id: t.id,\r\n          project_id: t.project_id,\r\n          user_id: t.user_id,\r\n          category_id: t.category_id,\r\n          type: t.type,\r\n          amount: (t as any).amount_eur != null ? Number((t as any).amount_eur) : Number(t.amount),\r\n          amount_eur: (t as any).amount_eur != null ? Number((t as any).amount_eur) : Number(t.amount),\r\n          amount_cfa: (t as any).amount_cfa != null ? Number((t as any).amount_cfa) : undefined,\r\n          amount_usd: (t as any).amount_usd != null ? Number((t as any).amount_usd) : undefined,\r\n          title: t.title,\r\n          description: t.description,\r\n          created_at: t.created_at,\r\n          project_name: proj?.name,\r\n          project_icon: proj?.icon,\r\n          project_color: proj?.color,\r\n          project_currency: proj?.currency,\r\n          user_name: usr?.name,\r\n          category_name: cat?.name,\r\n          parent_category_name: parent?.name,\r\n          has_text: n.some((nn) => nn.content_type === 'text'),\r\n          has_document: n.some((nn) => nn.content_type === 'text' && nn.file_path),\r\n          has_image: n.some((nn) => nn.content_type === 'image'),\r\n          has_audio: n.some((nn) => nn.content_type === 'audio'),\r\n        }\r\n      })\r\n    } catch (e) {\r\n      console.error('[ExpenseShare] getRecentTransactions failed:', e)\r\n      return []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Récupère les transactions créées après une date donnée pour les projets autorisés\r\n   * de l'utilisateur courant, avec métadonnées (projet, utilisateur, catégories).\r\n   */\r\n  async getTransactionsSince(sinceISO: string, limit = 50) {\r\n    try {\r\n      const uid = this.getCurrentUserId()\r\n      if (!uid) return []\r\n      const authorized = await this.getAuthorizedProjectIds(uid)\r\n      if (!authorized.length) return []\r\n\r\n      // 1) Transactions après sinceISO\r\n      const { data: tx, error: txErr } = await supabase\r\n        .from('transactions')\r\n        .select('*')\r\n        .in('project_id', authorized)\r\n        .gt('created_at', sinceISO)\r\n        .order('created_at', { ascending: false })\r\n        .limit(limit)\r\n      if (txErr) return []\r\n\r\n      const ids = (tx || []).map((t: any) => t.id)\r\n      const projIds = Array.from(new Set((tx || []).map((t: any) => t.project_id)))\r\n      const userIds = Array.from(new Set((tx || []).map((t: any) => String(t.user_id))))\r\n      const catIds = Array.from(new Set((tx || []).map((t: any) => t.category_id).filter(Boolean)))\r\n\r\n      // 2) Notes\r\n      const { data: notes } = ids.length\r\n        ? await supabase.from('notes').select('*').in('transaction_id', ids)\r\n        : { data: [] as any[] }\r\n\r\n      // 3) Métadonnées\r\n      const [projectsRes, usersRes, categoriesRes] = await Promise.all([\r\n        projIds.length ? supabase.from('projects').select('id, name, icon, color').in('id', projIds) : Promise.resolve({ data: [] as any[], error: null } as any),\r\n        userIds.length ? supabase.from('users').select('id, name').in('id', userIds) : Promise.resolve({ data: [] as any[], error: null } as any),\r\n        catIds.length ? supabase.from('categories').select('id, name, parent_id').in('id', catIds) : Promise.resolve({ data: [] as any[], error: null } as any)\r\n      ])\r\n\r\n      const projects: any[] = (projectsRes as any)?.data || []\r\n      const users: any[] = (usersRes as any)?.data || []\r\n      const categories: any[] = (categoriesRes as any)?.data || []\r\n\r\n      const projMap = new Map<any, any>(projects.map((p: any) => [p.id, p]))\r\n      const userMap = new Map<any, any>(users.map((u: any) => [String(u.id), u]))\r\n      const catMap = new Map<any, any>(categories.map((c: any) => [c.id, c]))\r\n\r\n      // Parents\r\n      const parentIdsAny: any[] = Array.from(new Set(categories.map((c: any) => c.parent_id).filter((v: any) => v != null)))\r\n      const { data: parents } = parentIdsAny.length\r\n        ? await supabase.from('categories').select('id, name').in('id', parentIdsAny as number[])\r\n        : { data: [] as any[] }\r\n      const parentMap = new Map<any, any>((parents || []).map((p: any) => [p.id, p]))\r\n\r\n      return (tx || []).map((t: any) => {\r\n        const n = (notes || []).filter((x) => x.transaction_id === t.id)\r\n        const proj: any = projMap.get(t.project_id)\r\n        const usr: any = userMap.get(String(t.user_id))\r\n        const cat: any = t.category_id ? catMap.get(t.category_id) : null\r\n        const parent: any = cat?.parent_id ? parentMap.get(cat.parent_id) : null\r\n        return {\r\n          id: t.id,\r\n          project_id: t.project_id,\r\n          user_id: t.user_id,\r\n          category_id: t.category_id,\r\n          type: t.type,\r\n          amount: t.amount,\r\n          title: t.title,\r\n          description: t.description,\r\n          created_at: t.created_at,\r\n          project_name: proj?.name,\r\n          project_icon: proj?.icon,\r\n          project_color: proj?.color,\r\n          user_name: usr?.name,\r\n          category_name: cat?.name,\r\n          parent_category_name: parent?.name,\r\n          has_text: n.some((nn) => nn.content_type === 'text'),\r\n          has_document: n.some((nn) => nn.content_type === 'text' && nn.file_path),\r\n          has_image: n.some((nn) => nn.content_type === 'image'),\r\n          has_audio: n.some((nn) => nn.content_type === 'audio'),\r\n        }\r\n      })\r\n    } catch (e) {\r\n      console.error('[ExpenseShare] getTransactionsSince failed:', e)\r\n      return []\r\n    }\r\n  }\r\n\r\n  async getNotesByTransaction(transactionId: number) {\r\n    const { data, error } = await supabase.from('notes').select('*').eq('transaction_id', transactionId);\r\n    if (error) return [];\r\n    return data as Note[];\r\n  }\r\n\r\n  /**\r\n   * Supprime une catégorie d'un projet si l'utilisateur courant est le propriétaire du projet.\r\n   * Même esprit de permission que deleteTransaction (seul l'auteur/owner peut supprimer).\r\n   */\r\n  async deleteCategory(categoryId: number, projectId: number): Promise<boolean> {\r\n    try {\r\n      const uid = this.getCurrentUserId()\r\n      if (!uid) return false\r\n      // Vérifier que l'utilisateur est le propriétaire du projet\r\n      const { data: proj, error: projErr } = await supabase\r\n        .from('projects')\r\n        .select('id, created_by')\r\n        .eq('id', Number(projectId))\r\n        .maybeSingle()\r\n      if (projErr || !proj) return false\r\n      if (String(proj.created_by) !== String(uid)) {\r\n        // Aligné sur deleteTransaction: pas de privilège admin pour supprimer les éléments des autres\r\n        return false\r\n      }\r\n\r\n      const { error } = await supabase\r\n        .from('categories')\r\n        .delete()\r\n        .eq('id', Number(categoryId))\r\n        .eq('project_id', Number(projectId))\r\n\r\n      if (error) {\r\n        console.error('[ExpenseShare] Error deleting category:', error)\r\n        return false\r\n      }\r\n      try {\r\n        if (typeof window !== 'undefined') {\r\n          window.dispatchEvent(new CustomEvent('expenshare:project-updated'))\r\n        }\r\n      } catch {}\r\n      return true\r\n    } catch (e) {\r\n      console.error('[ExpenseShare] deleteCategory failed:', e)\r\n      return false\r\n    }\r\n  }\r\n\r\n  async getGlobalStats() {\r\n    try {\r\n      const uid = this.getCurrentUserId()\r\n      if (!uid) {\r\n        return { totalExpenses: 0, totalBudgets: 0, balance: 0, transactionCount: 0, lastTransactionDate: null, projectCount: 0, expensesByMonth: [], budgetsByMonth: [],\r\n          totalExpenses_eur: 0, totalBudgets_eur: 0,\r\n          totalExpenses_cfa: 0, totalBudgets_cfa: 0,\r\n          totalExpenses_usd: 0, totalBudgets_usd: 0,\r\n        }\r\n      }\r\n      const authorized = await this.getAuthorizedProjectIds(uid)\r\n      if (!authorized.length) {\r\n        return { totalExpenses: 0, totalBudgets: 0, balance: 0, transactionCount: 0, lastTransactionDate: null, projectCount: 0, expensesByMonth: [], budgetsByMonth: [],\r\n          totalExpenses_eur: 0, totalBudgets_eur: 0,\r\n          totalExpenses_cfa: 0, totalBudgets_cfa: 0,\r\n          totalExpenses_usd: 0, totalBudgets_usd: 0,\r\n        }\r\n      }\r\n\r\n      const { data: transactionsData } = await supabase\r\n        .from('transactions')\r\n        .select('*')\r\n        .in('project_id', authorized)\r\n      const { count: projectCount } = await supabase\r\n        .from('projects')\r\n        .select('*', { count: 'exact', head: true })\r\n        .in('id', authorized as number[])\r\n\r\n  const expenses = (transactionsData || []).filter((t: any) => t.type === 'expense');\r\n  const budgets = (transactionsData || []).filter((t: any) => t.type === 'budget');\r\n  const getAmtEur = (t: any) => (t.amount_eur != null ? Number(t.amount_eur) : Number(t.amount))\r\n  const getAmtCfa = (t: any) => (t.amount_cfa != null ? Number(t.amount_cfa) : 0)\r\n  const getAmtUsd = (t: any) => (t.amount_usd != null ? Number(t.amount_usd) : 0)\r\n\r\n  // Totaux en EUR (compat champs historiques)\r\n  const totalExpenses = expenses.reduce((s: number, t: any) => s + getAmtEur(t), 0);\r\n  const totalBudgets = budgets.reduce((s: number, t: any) => s + getAmtEur(t), 0);\r\n\r\n  // Totaux par devise à partir des colonnes natives\r\n  const totalExpenses_eur = totalExpenses\r\n  const totalBudgets_eur = totalBudgets\r\n  const totalExpenses_cfa = expenses.reduce((s: number, t: any) => s + getAmtCfa(t), 0)\r\n  const totalBudgets_cfa = budgets.reduce((s: number, t: any) => s + getAmtCfa(t), 0)\r\n  const totalExpenses_usd = expenses.reduce((s: number, t: any) => s + getAmtUsd(t), 0)\r\n  const totalBudgets_usd = budgets.reduce((s: number, t: any) => s + getAmtUsd(t), 0)\r\n      const balance = totalBudgets - totalExpenses;\r\n      const lastTransactionDate = (transactionsData || [])\r\n        .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0]?.created_at || null;\r\n\r\n    const groupByMonth = (arr: any[]) => {\r\n        const months: Record<string, number> = {};\r\n        arr.forEach((t: any) => {\r\n          const d = new Date(t.created_at);\r\n          const k = `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}`;\r\n      months[k] = (months[k] || 0) + getAmtEur(t);\r\n        });\r\n        return Object.entries(months).map(([month, amount]) => ({ month, amount }));\r\n      };\r\n\r\n      return {\r\n        totalExpenses,\r\n        totalBudgets,\r\n        balance,\r\n        transactionCount: transactionsData?.length || 0,\r\n        lastTransactionDate,\r\n        projectCount: projectCount || 0,\r\n        expensesByMonth: groupByMonth(expenses),\r\n        budgetsByMonth: groupByMonth(budgets),\r\n        totalExpenses_eur,\r\n        totalBudgets_eur,\r\n        totalExpenses_cfa,\r\n        totalBudgets_cfa,\r\n        totalExpenses_usd,\r\n        totalBudgets_usd,\r\n      };\r\n    } catch (e) {\r\n      return { totalExpenses: 0, totalBudgets: 0, balance: 0, transactionCount: 0, lastTransactionDate: null, projectCount: 0, expensesByMonth: [], budgetsByMonth: [],\r\n        totalExpenses_eur: 0, totalBudgets_eur: 0,\r\n        totalExpenses_cfa: 0, totalBudgets_cfa: 0,\r\n        totalExpenses_usd: 0, totalBudgets_usd: 0,\r\n      };\r\n    }\r\n  }\r\n\r\n  async createTransaction(payload: any) {\r\n    const p = typeof payload === 'object' ? payload : null;\r\n    if (!p) throw new Error('Invalid payload');\r\n    const toInsert: any = { ...p, user_id: String((p as any).user_id) };\r\n    const { data, error } = await supabase.from('transactions').insert(toInsert).select('id').single();\r\n    if (error) throw new Error(error.message);\r\n    return data!.id as number;\r\n  }\r\n\r\n  // Export/Import DB (dev tools UI)\r\n  downloadDatabase() {\r\n    // Pour Supabase, on exporte un snapshot JSON lisible\r\n    ;(async () => {\r\n      try {\r\n  const tables = ['users','projects','project_users','categories','transactions','notes','settings'] as const\r\n        const result: Record<string, any[]> = {}\r\n  for (const t of tables) {\r\n          const { data, error } = await supabase.from(t).select('*')\r\n          if (error) throw error\r\n          result[t] = (data || []) as any[]\r\n        }\r\n        const blob = new Blob([JSON.stringify(result, null, 2)], { type: 'application/json' })\r\n        const url = URL.createObjectURL(blob)\r\n        const a = document.createElement('a')\r\n        a.href = url\r\n        a.download = `expenseshare-snapshot-${new Date().toISOString().replace(/[:.]/g,'-')}.json`\r\n        document.body.appendChild(a)\r\n        a.click()\r\n        a.remove()\r\n        URL.revokeObjectURL(url)\r\n      } catch (e) {\r\n        console.error('[ExpenseShare] downloadDatabase failed:', e)\r\n        throw e\r\n      }\r\n    })()\r\n  }\r\n\r\n  async uploadDatabase(file: File) {\r\n    // Non supporté pour Supabase (les fichiers .db SQLite ne sont pas importables directement)\r\n    // Option: accepter un snapshot JSON produit par downloadDatabase et tenter un import.\r\n    // Pour l’instant on renvoie une erreur claire.\r\n    throw new Error(\"Import de base SQLite non supporté avec Supabase. Exportez/Importez via JSON.\")\r\n  }\r\n\r\n  /**\r\n   * Compte les transactions créées après une date donnée pour les projets autorisés de l'utilisateur courant.\r\n   */\r\n  async getNewTransactionsCountSince(sinceISO: string): Promise<number> {\r\n    try {\r\n      const uid = this.getCurrentUserId()\r\n      if (!uid) return 0\r\n      const authorized = await this.getAuthorizedProjectIds(uid)\r\n      if (!authorized.length) return 0\r\n      const { count, error } = await supabase\r\n        .from('transactions')\r\n        .select('id', { head: true, count: 'exact' })\r\n        .in('project_id', authorized as number[])\r\n        .gt('created_at', sinceISO)\r\n      if (error) return 0\r\n      return count || 0\r\n    } catch {\r\n      return 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Supprime une transaction par ID si elle appartient à l'utilisateur courant.\r\n   * Retourne true si supprimée, false sinon.\r\n   */\r\n  async deleteTransaction(transactionId: number): Promise<boolean> {\r\n    const uid = this.getCurrentUserId()\r\n    if (!uid) return false\r\n    const { error } = await supabase\r\n      .from('transactions')\r\n      .delete()\r\n      .eq('id', Number(transactionId))\r\n      .eq('user_id', uid)\r\n    if (error) {\r\n      console.error('[ExpenseShare] Error deleting transaction:', error)\r\n      return false\r\n    }\r\n    try {\r\n      // Notifier l'app pour rafraîchir les vues (Home, etc.)\r\n      if (typeof window !== 'undefined') {\r\n        window.dispatchEvent(new CustomEvent('expenshare:project-updated'))\r\n      }\r\n    } catch {}\r\n    return true\r\n  }\r\n  async getAdminUserId(): Promise<string | null> {\r\n    try {\r\n      const { data, error } = await supabase.from('users').select('id').eq('is_admin', true).maybeSingle()\r\n      if (error || !data) return null\r\n      return data.id\r\n    } catch {\r\n      return null\r\n    }\r\n  }\r\n  private isInitialized = false\r\n\r\n  get isReady() {\r\n    return this.isInitialized\r\n  }\r\n\r\n  // Initialiser la base de données\r\n  async initialize(): Promise<void> {\r\n    if (this.isInitialized) return\r\n\r\n    try {\r\n      // Vérifier la connexion à Supabase avec timeout\r\n      const timeout = new Promise((_, rej) => setTimeout(() => rej(new Error('Timeout de connexion à Supabase')), 10000))\r\n      const query = supabase.from('users').select('id', { head: true, count: 'exact' })\r\n      const { error } = (await Promise.race([query, timeout])) as any\r\n      if (error) {\r\n        console.error('[ExpenseShare] Supabase connection error:', error)\r\n        throw error\r\n      }\r\n\r\n      this.isInitialized = true\r\n      console.log('[ExpenseShare] Supabase connected')\r\n\r\n      // Assurer qu'il existe un utilisateur admin par défaut\r\n      await this.ensureAdminUser()\r\n\r\n      const currentUserId = this.getCurrentUserId()\r\n      if (currentUserId) {\r\n        // Vérifier la présence des autres tables clés uniquement lorsqu'un utilisateur est authentifié localement\r\n        const checks = [\r\n          supabase.from('projects').select('id', { head: true, count: 'exact' }),\r\n          supabase.from('project_users').select('project_id', { head: true, count: 'exact' }),\r\n          supabase.from('categories').select('id', { head: true, count: 'exact' }),\r\n          supabase.from('transactions').select('id', { head: true, count: 'exact' }),\r\n          supabase.from('notes').select('id', { head: true, count: 'exact' }),\r\n          supabase.from('settings').select('key', { head: true, count: 'exact' }),\r\n        ]\r\n        const results = await Promise.allSettled(checks)\r\n        results.forEach((r, idx) => {\r\n          if (r.status === 'rejected') {\r\n            console.warn('[ExpenseShare] Table check failed:', idx, r.reason)\r\n          } else {\r\n            const er = (r.value as any)?.error\r\n            if (er) console.warn('[ExpenseShare] Table check error:', er)\r\n          }\r\n        })\r\n      }\r\n    } catch (error: any) {\r\n      console.error('[ExpenseShare] Failed to initialize Supabase:', error)\r\n      throw new Error(error?.message || 'Impossible de se connecter à Supabase')\r\n    }\r\n  }\r\n\r\n  // Assurer qu'il existe un utilisateur admin par défaut\r\n  private async ensureAdminUser(): Promise<void> {\r\n    try {\r\n      console.log('[ExpenseShare] Checking for admin user...')\r\n      const { data: adminUser, error: selectError } = await supabase\r\n        .from('users')\r\n        .select('id')\r\n        .eq('name', 'admin')\r\n        .maybeSingle()\r\n\r\n      if (selectError) {\r\n        console.error('[ExpenseShare] Error checking admin user:', selectError)\r\n      }\r\n\r\n      if (!adminUser) {\r\n        console.log('[ExpenseShare] Creating admin user...')\r\n        const pinHash = btoa('1234' + 'salt_' + 'admin')\r\n        const { error: insertError } = await supabase.from('users').insert({\r\n          name: 'admin',\r\n          pin_hash: pinHash,\r\n          is_admin: true,\r\n          created_at: new Date().toISOString()\r\n        })\r\n        if (insertError) {\r\n          console.error('[ExpenseShare] Failed to create admin user:', insertError)\r\n        } else {\r\n          console.log('[ExpenseShare] Admin user created successfully')\r\n        }\r\n      } else {\r\n        console.log('[ExpenseShare] Admin user already exists')\r\n      }\r\n    } catch (error) {\r\n      console.error('[ExpenseShare] Error in ensureAdminUser:', error)\r\n    }\r\n  }\r\n\r\n  // Couche de compatibilité attendue par l'app -----------------------------\r\n  users = {\r\n    getByName: async (name: string) => {\r\n      try {\r\n        const { data, error } = await supabase.from('users').select('*').eq('name', name).maybeSingle();\r\n        if (error) {\r\n          console.error('[ExpenseShare] Error getting user by name:', error);\r\n          return null;\r\n        }\r\n        return data as User;\r\n      } catch (error) {\r\n        console.error('[ExpenseShare] users.getByName failed:', error);\r\n        return null;\r\n      }\r\n    },\r\n    toArray: async (): Promise<User[]> => {\r\n      try {\r\n        const { data, error } = await supabase.from('users').select('*').order('created_at', { ascending: false })\r\n        if (error) {\r\n          console.error('[ExpenseShare] Error fetching users:', error)\r\n          throw new Error(error.message)\r\n        }\r\n        return (data || []) as User[]\r\n      } catch (error: any) {\r\n        console.error('[ExpenseShare] users.toArray failed:', error)\r\n        throw error\r\n      }\r\n    },\r\n    add: async (data: Omit<User, 'id'>): Promise<string> => {\r\n      try {\r\n        // Génère un UUID pour l'id utilisateur\r\n        const id = (typeof crypto !== 'undefined' && crypto.randomUUID)\r\n          ? crypto.randomUUID()\r\n          : Math.random().toString(36).slice(2) + Date.now();\r\n\r\n        const payload = {\r\n          id,\r\n          name: data.name,\r\n          pin_hash: data.pin_hash,\r\n          is_admin: false,\r\n          created_at: new Date().toISOString()\r\n        };\r\n\r\n        const { data: inserted, error } = await supabase\r\n          .from('users')\r\n          .insert(payload)\r\n          .select('id')\r\n          .single();\r\n\r\n        if (error) throw new Error(`Erreur création utilisateur: ${error.message}`);\r\n        return inserted!.id;\r\n      } catch (error: any) {\r\n        console.error('[ExpenseShare] users.add failed:', error)\r\n        throw error;\r\n      }\r\n    },\r\n    get: async (id: string | number) => {\r\n      try {\r\n        const { data, error } = await supabase.from('users').select('*').eq('id', String(id)).maybeSingle()\r\n        if (error) {\r\n          console.error('[ExpenseShare] Error getting user:', error)\r\n          return null\r\n        }\r\n        return data as User\r\n      } catch (error: any) {\r\n        console.error('[ExpenseShare] users.get failed:', error)\r\n        return null\r\n      }\r\n    },\r\n  }\r\n\r\n  project_users = {\r\n    add: async (data: ProjectUser) => {\r\n      try {\r\n        // Authorization: only project owner or an admin who is a member of the project can add users\r\n        const uid = this.getCurrentUserId()\r\n        if (!uid) throw new Error('Non authentifié')\r\n\r\n        // Load project owner\r\n        const { data: proj, error: projErr } = await supabase\r\n          .from('projects')\r\n          .select('id, created_by')\r\n          .eq('id', Number(data.project_id))\r\n          .maybeSingle()\r\n        if (projErr) {\r\n          console.error('[ExpenseShare] Error fetching project for add auth:', projErr)\r\n          throw new Error(projErr.message)\r\n        }\r\n        if (!proj) throw new Error('Projet introuvable')\r\n\r\n        // Determine admin\r\n        let isAdmin = false\r\n        try {\r\n          const { data: adminRow } = await supabase\r\n            .from('users')\r\n            .select('id')\r\n            .eq('id', uid)\r\n            .eq('is_admin', true)\r\n            .maybeSingle()\r\n          isAdmin = !!adminRow\r\n        } catch {}\r\n\r\n        if (String(proj.created_by) !== String(uid)) {\r\n          // Not the owner → only allow if admin AND already a member of this project\r\n          if (!isAdmin) {\r\n            throw new Error(\"Seul le propriétaire du projet ou un administrateur membre du projet peut ajouter des utilisateurs.\")\r\n          }\r\n          const { data: membership, error: memErr } = await supabase\r\n            .from('project_users')\r\n            .select('user_id')\r\n            .eq('project_id', Number(proj.id))\r\n            .eq('user_id', String(uid))\r\n            .maybeSingle()\r\n          if (memErr) {\r\n            console.error('[ExpenseShare] Error checking admin membership for add:', memErr)\r\n            throw new Error(memErr.message)\r\n          }\r\n          if (!membership) {\r\n            throw new Error(\"L'administrateur doit faire partie du projet pour ajouter des utilisateurs.\")\r\n          }\r\n        }\r\n\r\n        // Build payload\r\n        const payload: any = { \r\n          ...data, \r\n          user_id: String(data.user_id),\r\n          project_id: Number(data.project_id)\r\n        }\r\n        \r\n        if (!payload.added_at) {\r\n          payload.added_at = new Date().toISOString()\r\n        }\r\n        \r\n  console.log('[ExpenseShare] Adding project user:', payload)\r\n        const { error } = await supabase.from('project_users').insert(payload)\r\n        \r\n        if (error) {\r\n          console.error('[ExpenseShare] Error adding project user:', error)\r\n          throw new Error(error.message)\r\n        }\r\n        \r\n        return 1\r\n      } catch (error: any) {\r\n        console.error('[ExpenseShare] project_users.add failed:', error)\r\n        throw error\r\n      }\r\n    },\r\n    // Supprimer un utilisateur d'un projet (par project_id + user_id)\r\n    remove: async (project_id: number, user_id: string | number) => {\r\n      try {\r\n        // Prevent removing the project owner. Only allow if target is not the owner.\r\n        // Admins also should not remove the owner via membership removal; they should delete the project instead.\r\n        const { data: proj, error: projErr } = await supabase\r\n          .from('projects')\r\n          .select('created_by')\r\n          .eq('id', Number(project_id))\r\n          .maybeSingle()\r\n        if (projErr) {\r\n          console.error('[ExpenseShare] Error checking project owner before removal:', projErr)\r\n          throw new Error(projErr.message)\r\n        }\r\n        if (proj && String(proj.created_by) === String(user_id)) {\r\n          throw new Error(\"Impossible de retirer le propriétaire du projet.\")\r\n        }\r\n\r\n        // Optional: only allow owner or admin to remove other members\r\n        const uid = this.getCurrentUserId()\r\n        if (!uid) throw new Error('Non authentifié')\r\n        let isAdmin = false\r\n        try {\r\n          const { data: adminRow } = await supabase\r\n            .from('users')\r\n            .select('id')\r\n            .eq('id', uid)\r\n            .eq('is_admin', true)\r\n            .maybeSingle()\r\n          isAdmin = !!adminRow\r\n        } catch {}\r\n        if (!isAdmin) {\r\n          // Ensure caller is the project owner to remove others\r\n          if (!proj || String(proj.created_by) !== String(uid)) {\r\n            throw new Error(\"Seul le propriétaire du projet ou un administrateur peut retirer des membres.\")\r\n          }\r\n        }\r\n\r\n        const { error } = await supabase\r\n          .from('project_users')\r\n          .delete()\r\n          .eq('project_id', Number(project_id))\r\n          .eq('user_id', String(user_id))\r\n\r\n        if (error) {\r\n          console.error('[ExpenseShare] Error removing project user:', error)\r\n          throw new Error(error.message)\r\n        }\r\n\r\n        return 1\r\n      } catch (error: any) {\r\n        console.error('[ExpenseShare] project_users.remove failed:', error)\r\n        throw error\r\n      }\r\n    },\r\n    where: (field: string) => ({\r\n      equals: (value: any) => ({\r\n        toArray: async () => {\r\n          try {\r\n            if (field === 'user_id') {\r\n              const { data, error } = await supabase\r\n                .from('project_users')\r\n                .select('*')\r\n                .eq('user_id', String(value))\r\n              \r\n              if (error) {\r\n                console.error('[ExpenseShare] Error fetching project_users by user_id:', error)\r\n                return []\r\n              }\r\n              \r\n              return (data || []) as ProjectUser[]\r\n            }\r\n            \r\n            if (field === 'project_id') {\r\n              const { data, error } = await supabase\r\n                .from('project_users')\r\n                .select('*')\r\n                .eq('project_id', Number(value))\r\n              \r\n              if (error) {\r\n                console.error('[ExpenseShare] Error fetching project_users by project_id:', error)\r\n                return []\r\n              }\r\n              \r\n              return (data || []) as ProjectUser[]\r\n            }\r\n            \r\n            return []\r\n          } catch (error) {\r\n            console.error('[ExpenseShare] project_users.where.equals.toArray failed:', error)\r\n            return []\r\n          }\r\n        },\r\n        delete: async () => {\r\n          try {\r\n            if (field !== 'project_id') return 0\r\n            \r\n            const { error } = await supabase\r\n              .from('project_users')\r\n              .delete()\r\n              .eq('project_id', Number(value))\r\n            \r\n            if (error) {\r\n              console.error('[ExpenseShare] Error deleting project_users by project_id:', error)\r\n              throw new Error(error.message)\r\n            }\r\n            \r\n            return 1\r\n          } catch (error: any) {\r\n            console.error('[ExpenseShare] project_users.where.equals.delete failed:', error)\r\n            throw error\r\n          }\r\n        },\r\n      }),\r\n    }),\r\n  }\r\n\r\n  categories = {\r\n    add: async (data: Category) => {\r\n      try {\r\n        const payload = {\r\n          ...data,\r\n          project_id: Number(data.project_id),\r\n          parent_id: data.parent_id ? Number(data.parent_id) : null,\r\n          created_at: new Date().toISOString()\r\n        }\r\n        \r\n        const { data: inserted, error } = await supabase\r\n          .from('categories')\r\n          .insert(payload)\r\n          .select('id')\r\n          .single();\r\n        \r\n        if (error) {\r\n          console.error('[ExpenseShare] Error adding category:', error)\r\n          throw new Error(error.message)\r\n        }\r\n        \r\n        return inserted?.id\r\n      } catch (error: any) {\r\n        console.error('[ExpenseShare] categories.add failed:', error)\r\n        throw error\r\n      }\r\n    },\r\n    where: (field: string) => ({\r\n      equals: (value: any) => ({\r\n        toArray: async () => {\r\n          try {\r\n            if (field === 'project_id') {\r\n              const { data, error } = await supabase\r\n                .from('categories')\r\n                .select('*')\r\n                .eq('project_id', Number(value))\r\n                .order('level', { ascending: true })\r\n                .order('name', { ascending: true })\r\n              \r\n              if (error) {\r\n                console.error('[ExpenseShare] Error fetching categories by project_id:', error)\r\n                return []\r\n              }\r\n              \r\n              return (data || []) as Category[]\r\n            }\r\n            return []\r\n          } catch (error) {\r\n            console.error('[ExpenseShare] categories.where.equals.toArray failed:', error)\r\n            return []\r\n          }\r\n        },\r\n        delete: async () => {\r\n          try {\r\n            if (field === 'project_id') {\r\n              const { error } = await supabase\r\n                .from('categories')\r\n                .delete()\r\n                .eq('project_id', Number(value))\r\n              \r\n              if (error) {\r\n                console.error('[ExpenseShare] Error deleting categories by project_id:', error)\r\n                throw new Error(error.message)\r\n              }\r\n              \r\n              return 1\r\n            }\r\n            return 0\r\n          } catch (error: any) {\r\n            console.error('[ExpenseShare] categories.where.equals.delete failed:', error)\r\n            throw error\r\n          }\r\n        }\r\n      })\r\n    }),\r\n  }\r\n  \r\n  settings = {\r\n    get: async (key: string) => {\r\n      try {\r\n        const { data, error } = await supabase\r\n          .from('settings')\r\n          .select('*')\r\n          .eq('key', key)\r\n          .maybeSingle()\r\n        \r\n        if (error) {\r\n          console.error('[ExpenseShare] Error getting setting:', error)\r\n          return null\r\n        }\r\n        \r\n        return data as Setting\r\n      } catch (error) {\r\n        console.error('[ExpenseShare] settings.get failed:', error)\r\n        return null\r\n      }\r\n    },\r\n    put: async (data: Setting) => {\r\n      try {\r\n        const payload = {\r\n          ...data,\r\n          updated_at: new Date().toISOString()\r\n        }\r\n        \r\n        // Vérifier si le setting existe déjà\r\n        const { data: existing } = await supabase\r\n          .from('settings')\r\n          .select('key')\r\n          .eq('key', data.key)\r\n          .maybeSingle()\r\n        \r\n        if (existing) {\r\n          // Update\r\n          const { error } = await supabase\r\n            .from('settings')\r\n            .update(payload)\r\n            .eq('key', data.key)\r\n          \r\n          if (error) {\r\n            console.error('[ExpenseShare] Error updating setting:', error)\r\n            throw new Error(error.message)\r\n          }\r\n        } else {\r\n          // Insert\r\n          const { error } = await supabase\r\n            .from('settings')\r\n            .insert(payload)\r\n          \r\n          if (error) {\r\n            console.error('[ExpenseShare] Error inserting setting:', error)\r\n            throw new Error(error.message)\r\n          }\r\n        }\r\n        \r\n        return data.key\r\n      } catch (error: any) {\r\n        console.error('[ExpenseShare] settings.put failed:', error)\r\n        throw error\r\n      }\r\n    }\r\n  }\r\n  \r\n  notes = {\r\n    add: async (data: Note) => {\r\n      try {\r\n        const payload = {\r\n          ...data,\r\n          transaction_id: Number(data.transaction_id),\r\n          created_at: new Date().toISOString(),\r\n        }\r\n\r\n        const { data: inserted, error } = await supabase\r\n          .from('notes')\r\n          .insert(payload)\r\n          .select('id')\r\n          .single()\r\n\r\n        if (error) {\r\n          console.error('[ExpenseShare] Error adding note:', error)\r\n          throw new Error(error.message)\r\n        }\r\n\r\n        return inserted?.id\r\n      } catch (error: any) {\r\n        console.error('[ExpenseShare] notes.add failed:', error)\r\n        throw error\r\n      }\r\n    },\r\n    where: (field: string) => ({\r\n      equals: (value: any) => ({\r\n        toArray: async () => {\r\n          try {\r\n            if (field === 'transaction_id') {\r\n              const { data, error } = await supabase\r\n                .from('notes')\r\n                .select('*')\r\n                .eq('transaction_id', Number(value))\r\n                .order('created_at', { ascending: true })\r\n              if (error) {\r\n                console.error('[ExpenseShare] Error fetching notes by transaction_id:', error)\r\n                return []\r\n              }\r\n              return (data || []) as Note[]\r\n            }\r\n            return []\r\n          } catch (error) {\r\n            console.error('[ExpenseShare] notes.where.equals.toArray failed:', error)\r\n            return []\r\n          }\r\n        },\r\n        delete: async () => {\r\n          try {\r\n            if (field === 'transaction_id') {\r\n              const { error } = await supabase\r\n                .from('notes')\r\n                .delete()\r\n                .eq('transaction_id', Number(value))\r\n              if (error) {\r\n                console.error('[ExpenseShare] Error deleting notes by transaction_id:', error)\r\n                throw new Error(error.message)\r\n              }\r\n              return 1\r\n            }\r\n            return 0\r\n          } catch (error: any) {\r\n            console.error('[ExpenseShare] notes.where.equals.delete failed:', error)\r\n            throw error\r\n          }\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  transactions = {\r\n    add: async (data: Transaction) => {\r\n      try {\r\n        // Préparer payload et déterminer devise du projet + taux\r\n        const basePayload = {\r\n          ...data,\r\n          user_id: String(data.user_id),\r\n          project_id: Number(data.project_id),\r\n          category_id: data.category_id ? Number(data.category_id) : null,\r\n          created_at: new Date().toISOString()\r\n        } as any\r\n\r\n        // Charger la devise du projet et les taux\r\n        let projCurrency: string = 'EUR'\r\n        try {\r\n          const proj = await this.getProjectById(Number(basePayload.project_id))\r\n          projCurrency = (proj?.currency as string) || 'EUR'\r\n        } catch {}\r\n\r\n        // Taux: eur->cfa et eur->usd depuis settings projet\r\n        let eurToCfa = 655.957\r\n        let eurToUsd = 1.0\r\n        try {\r\n          const cfa = await this.settings.get(`project:${Number(basePayload.project_id)}:eur_to_cfa`)\r\n          const usd = await this.settings.get(`project:${Number(basePayload.project_id)}:eur_to_usd`)\r\n          if (cfa?.value && !Number.isNaN(Number(cfa.value))) eurToCfa = Number(cfa.value)\r\n          if (usd?.value && !Number.isNaN(Number(usd.value))) eurToUsd = Number(usd.value)\r\n        } catch {}\r\n\r\n        const inputAmount = Number(data.amount || 0)\r\n        // Calculer les montants dans les 3 devises\r\n        let amount_eur = 0\r\n        let amount_cfa = 0\r\n        let amount_usd = 0\r\n        const cur = String(projCurrency).toUpperCase()\r\n        if (cur === 'EUR') {\r\n          amount_eur = inputAmount\r\n          amount_cfa = inputAmount * eurToCfa\r\n          amount_usd = inputAmount * eurToUsd\r\n        } else if (cur === 'XOF' || cur === 'CFA') {\r\n          amount_cfa = inputAmount\r\n          amount_eur = eurToCfa ? (inputAmount / eurToCfa) : inputAmount\r\n          amount_usd = amount_eur * eurToUsd\r\n        } else if (cur === 'USD') {\r\n          amount_usd = inputAmount\r\n          amount_eur = eurToUsd ? (inputAmount / eurToUsd) : inputAmount\r\n          amount_cfa = amount_eur * eurToCfa\r\n        } else {\r\n          // Par défaut considérer comme EUR\r\n          amount_eur = inputAmount\r\n          amount_cfa = inputAmount * eurToCfa\r\n          amount_usd = inputAmount * eurToUsd\r\n        }\r\n\r\n        // Arrondis pour le stockage\r\n        // - EUR/USD: 2 décimales\r\n        // - CFA/XOF: 0 décimale (pas de centimes)\r\n        const round2 = (v: number) => Math.round(v * 100) / 100\r\n        const round0 = (v: number) => Math.round(v)\r\n\r\n        if (cur === 'EUR') {\r\n          amount_eur = round2(amount_eur)\r\n          amount_usd = round2(amount_usd)\r\n          amount_cfa = round0(amount_cfa)\r\n        } else if (cur === 'XOF' || cur === 'CFA') {\r\n          amount_cfa = round0(amount_cfa)\r\n          amount_eur = round2(amount_eur)\r\n          amount_usd = round2(amount_usd)\r\n        } else if (cur === 'USD') {\r\n          amount_usd = round2(amount_usd)\r\n          amount_eur = round2(amount_eur)\r\n          amount_cfa = round0(amount_cfa)\r\n        } else {\r\n          amount_eur = round2(amount_eur)\r\n          amount_usd = round2(amount_usd)\r\n          amount_cfa = round0(amount_cfa)\r\n        }\r\n\r\n        const payload = {\r\n          ...basePayload,\r\n          // Compat: on conserve amount comme EUR pour ne pas casser l'UI existante\r\n          amount: amount_eur,\r\n          amount_eur,\r\n          amount_cfa,\r\n          amount_usd,\r\n        }\r\n        \r\n        let inserted: any = null\r\n        let error: any = null\r\n        try {\r\n          const res = await supabase\r\n            .from('transactions')\r\n            .insert(payload)\r\n            .select('id')\r\n            .single()\r\n          inserted = res.data\r\n          error = res.error\r\n        } catch (e: any) {\r\n          error = e\r\n        }\r\n\r\n        // Fallback si la migration n'est pas encore appliquée (colonnes inconnues)\r\n        if (error && String(error.message || '').toLowerCase().includes('column') && String(error.message || '').toLowerCase().includes('does not exist')) {\r\n          const legacyPayload = { ...basePayload, amount: amount_eur }\r\n          const res2 = await supabase\r\n            .from('transactions')\r\n            .insert(legacyPayload)\r\n            .select('id')\r\n            .single()\r\n          inserted = res2.data\r\n          error = res2.error\r\n        }\r\n\r\n        if (error) {\r\n          console.error('[ExpenseShare] Error adding transaction:', error)\r\n          throw new Error(error.message)\r\n        }\r\n\r\n        // Dispatch a browser event to notify UI about the new transaction\r\n        try {\r\n          if (typeof window !== 'undefined' && inserted?.id) {\r\n            const detail = {\r\n              transactionId: inserted.id,\r\n              projectId: Number(payload.project_id),\r\n              userId: String(payload.user_id),\r\n              type: payload.type,\r\n              amount: Number(payload.amount || 0),\r\n            }\r\n            window.dispatchEvent(new CustomEvent('expenshare:new-transaction', { detail }))\r\n          }\r\n        } catch {}\r\n        \r\n        return inserted?.id\r\n      } catch (error: any) {\r\n        console.error('[ExpenseShare] transactions.add failed:', error)\r\n        throw error\r\n      }\r\n    },\r\n    where: (field: string) => ({\r\n      equals: (value: any) => ({\r\n        toArray: async () => {\r\n          try {\r\n            if (field === 'project_id') {\r\n              const { data, error } = await supabase\r\n                .from('transactions')\r\n                .select('*')\r\n                .eq('project_id', Number(value))\r\n                .order('created_at', { ascending: false })\r\n              \r\n              if (error) {\r\n                console.error('[ExpenseShare] Error fetching transactions by project_id:', error)\r\n                return []\r\n              }\r\n              \r\n              return (data || []) as Transaction[]\r\n            }\r\n            return []\r\n          } catch (error) {\r\n            console.error('[ExpenseShare] transactions.where.equals.toArray failed:', error)\r\n            return []\r\n          }\r\n        },\r\n        delete: async () => {\r\n          try {\r\n            if (field === 'project_id') {\r\n              const { error } = await supabase\r\n                .from('transactions')\r\n                .delete()\r\n                .eq('project_id', Number(value))\r\n              \r\n              if (error) {\r\n                console.error('[ExpenseShare] Error deleting transactions by project_id:', error)\r\n                throw new Error(error.message)\r\n              }\r\n              \r\n              return 1\r\n            }\r\n            return 0\r\n          } catch (error: any) {\r\n            console.error('[ExpenseShare] transactions.where.equals.delete failed:', error)\r\n            throw error\r\n          }\r\n        }\r\n      })\r\n    }),\r\n  }\r\n}\r\n\r\n// Importer createClient pour le service role\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\n// Exporter l'instance de la base de données\r\nexport type SupabaseDatabaseInstance = SupabaseDatabase\r\n\r\nexport const db = new SupabaseDatabase()\r\n","usedDeprecatedRules":[]},{"filePath":"G:\\Projets\\expenshare\\lib\\utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2314,2317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2314,2317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2324,2327],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2324,2327],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2615,2618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2615,2618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2625,2628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2625,2628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\nimport { SUPPORTED_CURRENCIES, type CurrencyCode } from \"./types\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatCurrency(amount: number): string {\n  return new Intl.NumberFormat(\"fr-FR\", {\n    style: \"currency\",\n    currency: \"EUR\",\n  }).format(amount)\n}\n\nexport function formatDate(dateString: string): string {\n  return new Intl.DateTimeFormat(\"fr-FR\", {\n    day: \"2-digit\",\n    month: \"2-digit\",\n    year: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  }).format(new Date(dateString))\n}\n\nexport function formatDateShort(dateString: string): string {\n  return new Intl.DateTimeFormat(\"fr-FR\", {\n    day: \"2-digit\",\n    month: \"2-digit\",\n  }).format(new Date(dateString))\n}\n\nexport function formatDateRelative(dateString: string | null): string {\n  if (!dateString) return \"Jamais\";\n  \n  const date = new Date(dateString);\n  const now = new Date();\n  \n  const diffSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n  \n  if (diffSeconds < 60) {\n    return \"À l'instant\";\n  }\n  \n  const diffMinutes = Math.floor(diffSeconds / 60);\n  if (diffMinutes < 60) {\n    return `Il y a ${diffMinutes} minute${diffMinutes > 1 ? 's' : ''}`;\n  }\n  \n  const diffHours = Math.floor(diffMinutes / 60);\n  if (diffHours < 24) {\n    return `Il y a ${diffHours} heure${diffHours > 1 ? 's' : ''}`;\n  }\n  \n  const diffDays = Math.floor(diffHours / 24);\n  if (diffDays < 7) {\n    return `Il y a ${diffDays} jour${diffDays > 1 ? 's' : ''}`;\n  }\n  \n  const diffWeeks = Math.floor(diffDays / 7);\n  if (diffWeeks < 4) {\n    return `Il y a ${diffWeeks} semaine${diffWeeks > 1 ? 's' : ''}`;\n  }\n  \n  const diffMonths = Math.floor(diffDays / 30);\n  if (diffMonths < 12) {\n    return `Il y a ${diffMonths} mois`;\n  }\n  \n  const diffYears = Math.floor(diffDays / 365);\n  return `Il y a ${diffYears} an${diffYears > 1 ? 's' : ''}`;\n}\n\nexport function getColorForIndex(index: number): string {\n  const colors = [\n    \"#3b82f6\",\n    \"#10b981\",\n    \"#f59e0b\",\n    \"#ef4444\",\n    \"#8b5cf6\",\n    \"#ec4899\",\n    \"#14b8a6\",\n    \"#f97316\",\n    \"#6366f1\",\n    \"#84cc16\",\n    \"#f43f5e\",\n    \"#06b6d4\",\n  ]\n  return colors[index % colors.length]\n}\n\nexport function debounce<T extends (...args: any[]) => any>(func: T, wait: number): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout | null = null\n\n  return (...args: Parameters<T>) => {\n    if (timeout) clearTimeout(timeout)\n    timeout = setTimeout(() => func(...args), wait)\n  }\n}\n\nexport function throttle<T extends (...args: any[]) => any>(func: T, limit: number): (...args: Parameters<T>) => void {\n  let inThrottle: boolean\n\n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args)\n      inThrottle = true\n      setTimeout(() => (inThrottle = false), limit)\n    }\n  }\n}\n\nexport function validateEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  return emailRegex.test(email)\n}\n\nexport function validatePin(pin: string): boolean {\n  return /^\\d{4}$/.test(pin)\n}\n\nexport function announceToScreenReader(message: string): void {\n  const announcement = document.createElement(\"div\")\n  announcement.setAttribute(\"aria-live\", \"polite\")\n  announcement.setAttribute(\"aria-atomic\", \"true\")\n  announcement.className = \"sr-only\"\n  announcement.textContent = message\n\n  document.body.appendChild(announcement)\n\n  setTimeout(() => {\n    document.body.removeChild(announcement)\n  }, 1000)\n}\n\nexport function safeLocalStorage() {\n  const isAvailable = typeof window !== \"undefined\" && window.localStorage\n\n  return {\n    getItem: (key: string) => {\n      if (!isAvailable) return null\n      try {\n        return localStorage.getItem(key)\n      } catch {\n        return null\n      }\n    },\n    setItem: (key: string, value: string) => {\n      if (!isAvailable) return false\n      try {\n        localStorage.setItem(key, value)\n        return true\n      } catch {\n        return false\n      }\n    },\n    removeItem: (key: string) => {\n      if (!isAvailable) return false\n      try {\n        localStorage.removeItem(key)\n        return true\n      } catch {\n        return false\n      }\n    },\n  }\n}\n\nexport const CURRENCY_LABELS: Record<CurrencyCode, string> = {\n  EUR: \"Euro (EUR)\",\n  CFA: \"CFA\",\n  USD: \"Dollar (USD)\",\n}\n\nexport const isSupportedCurrency = (value: unknown): value is CurrencyCode =>\n  typeof value === \"string\" && SUPPORTED_CURRENCIES.includes(value as CurrencyCode)\n\nexport const normalizeCurrencyCode = (value: unknown): CurrencyCode | null => {\n  if (typeof value !== \"string\") {\n    return null\n  }\n\n  const normalized = value === \"XOF\" ? \"CFA\" : value\n  return isSupportedCurrency(normalized) ? normalized : null\n}\n","usedDeprecatedRules":[]}]